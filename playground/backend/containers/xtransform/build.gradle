/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: 'org.apache.beam.module'
apply plugin: 'base'
applyDockerNature()

def playgroundJobServerProject = "${project.path.replace('-container', '')}"

description = project(playgroundJobServerProject).description + " :: Container"

configurations {
  dockerDependency
}

dependencies {
  dockerDependency project(path: playgroundJobServerProject, configuration: "shadow")
}

def beam_version = project.rootProject.hasProperty(["sdk-tag"]) ?
project.rootProject["sdk-tag"] : project.rootProject.sdk_version

def sdks = [
   'beam_python3.7_sdk',
   'beam_java8_sdk'
   ]

docker {
  name containerImageName(
          name: project.docker_image_default_repo_prefix + "playground-xtransform",
          root: project.rootProject.hasProperty(["docker-repository-root"]) ?
                  project.rootProject["docker-repository-root"] :
                  project.docker_image_default_repo_root)
  files "./build/"
  tags containerImageTags()
  buildArgs(['BEAM_VERSION': project.rootProject.hasProperty(["sdk-tag"]) ?
                           project.rootProject["sdk-tag"] : project.rootProject.sdk_version ])
}

// Ensure that we build the required resources and copy and file dependencies from related projects
 
def copyDockerfileDependencies = tasks.register("copyDockerfileDependencies", Copy) {
   dependsOn("prePullSdkImages")
   copy {
      from 'entrypoint.sh'
      into 'build/'
   }
   copy {
      from '../../../infrastructure/proxy/allow_list.py'
      into 'build/'
   }
   copy {
      from '../../../infrastructure/proxy/allow_list_proxy.py'
      into 'build/'
   }
}

dockerPrepare.dependsOn copyDockerfileDependencies

def prePullSdkImages = tasks.register("prePullSdkImages") {
 doFirst {
            exec {
            executable 'sh'
            args "-c", "mkdir -p build/images/"
         }

      for (String sdk: sdks) {
         exec {
            executable 'sh'
            //args '-c', "docker pull $sdk "
            args '-c', "docker pull apache/$sdk:${beam_version}"
         }
      }
   }
   doLast {
      for (String sdk: sdks) {
            exec {
               executable 'sh'
               args '-c', "docker save apache/${sdk} >build//images//${sdk}.tar"
            }
      }
   }
  }

  dockerPrepare.dependsOn prePullSdkImages