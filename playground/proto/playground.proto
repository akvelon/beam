/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option go_package= "backend/pkg/api";
package proto;

// CodeInfo represents a code text and options of SDK which executes the code.

message CodeInfo {
  string code = 1;
  enum sdk {
    JAVA = 0;
    GO = 1;
    PYTHON = 2;
    SCIO = 3;
  }
  sdk SDK = 2;
}

// PipelineInfo contains information of the pipeline id.

message PipelineInfo {
  int32 pipeline_id = 1;
}

// PipelineResult represents the result of the compiled and/or executed code.

message PipelineResult {
  string output = 1;
}

// StatusInfo contains information about the status of the code execution.

message StatusInfo {
  enum status {
    EXECUTING = 0;
    FINISHED = 1;
    ERROR = 2;
  }
  status pipeline_status = 1;
}

service Playground {

  // Submit the job for an execution and get the pipeline id.
  rpc RunCode(CodeInfo) returns (PipelineInfo);

  // Get the status of pipeline execution.
  rpc CheckStatus(PipelineInfo) returns (StatusInfo);

  // Get the result of pipeline execution.
  rpc GetRunOutput(PipelineInfo) returns (PipelineResult);

  // Get the result of pipeline compilation.
  rpc GetCompileOutput(PipelineInfo) returns (PipelineResult);
}
