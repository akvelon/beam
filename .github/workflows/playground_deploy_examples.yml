# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Collect And Deploy Playground Examples

on:
  workflow_dispatch:
  
permissions:
  id-token: write
  
env:
  BEAM_ROOT_DIR: ../../
  BEAM_EXAMPLE_CATEGORIES: ../categories.yaml
  BEAM_VERSION: 2.33.0
  K8S_NAMESPACE: playground-backend
  HELM_APP_NAME: playground-backend
  PROJECT_ENV: beta
  PROJECT_ID: beaming-crowbar-354322
  SERVICE_ACCOUNT: pg-svsaccount@beaming-crowbar-354322.iam.gserviceaccount.com
  PLAYGROUND_REGISTRY_NAME: us-central1-docker.pkg.dev
jobs:
  check_examples:
    name: Check examples
    runs-on: ubuntu-latest
    outputs:
      example_has_changed: ${{ steps.check_has_example.outputs.example_has_changed }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: install deps
        run: pip install -r requirements.txt
        working-directory: playground/infrastructure
      - shell: pwsh
        name: get Difference
        id: check_file_changed
        run: |
          $diff = git diff --name-only pg-sandbox-example-test
          Write-Host "::set-output name=example_diff::$diff"
      - name: has Examples
        run: |
          output=$(python3 checker.py ${{ steps.check_file_changed.outputs.example_diff }})
          echo "::set-output name=example_has_changed::$output"
        id: check_has_example
        working-directory: playground/infrastructure
      - name: Print has_example
        run: echo "${{ steps.check_has_example.outputs.example_has_changed }}"
  deploy_examples:
    name: Deploy examples
    runs-on: ubuntu-latest
    needs: [ check_examples ]

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: actions/setup-java@v2
        with:
            distribution: 'zulu'
            java-version: '8'
      - name: Install kubectl
        run: |
             curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" &&\
             chmod +x kubectl &&\
             mv kubectl /usr/local/bin/
      - name: Install helm
        run: |
             curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 &&\
             chmod 700 get_helm.sh &&\
             ./get_helm.sh
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
      - name: install deps
        run: pip install -r requirements.txt
        working-directory: playground/infrastructure
      - name: Remove default github maven configuration
        # This step is a workaround to avoid a decryption issue
        run: rm ~/.m2/settings.xml

      - id: 'auth'
        name: 'Authenticate to GCP'
        uses: 'google-github-actions/auth@v0.3.1'
        with:
          create_credentials_file: 'true'
          workload_identity_provider: 'projects/1007768986752/locations/global/workloadIdentityPools/google-git/providers/google-git'
          service_account: "${{ env.SERVICE_ACCOUNT }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
          
      - id: 'gcloud'
        name: 'gcloud'
        run: |-
          gcloud auth login --brief --cred-file='${{ steps.auth.outputs.credentials_file_path }}'
          gcloud config set project ${{ env.PROJECT_ID }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
          
      - name: Authinticate in Artifact registry
        run: |
           DOCKER_BUILDKIT=0
           gcloud auth configure-docker us-central1-docker.pkg.dev --quiet


      - name: Set Docker Tag
        run: echo "DOCKERTAG=${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Set Docker Tag If Github Tag was trigger
        run: echo "DOCKERTAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/tags/')
      - name: Get K8s Config
        run: gcloud container clusters get-credentials --region us-central1-a playground-examples
        
      - name: Login to Docker Registry
        run: gcloud artifacts docker images list us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/playground-repository
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
        
      - name: Build And Push Java Backend
        run: |
             ./gradlew playground:backend:containers:java:dockerTagPush -Pdocker-repository-root='${{ env.PLAYGROUND_REGISTRY_NAME}}/${{ env.PROJECT_ID }}/playground-repository' -Pbase-image='apache/beam_java8_sdk:${{ env.BEAM_VERSION }}' -Pdocker-tag=${{ env.DOCKERTAG }}
      - name: Build And Push Go Backend
        run: ./gradlew playground:backend:containers:go:dockerTagPush -Pdocker-repository-root='${{ env.PLAYGROUND_REGISTRY_NAME}}/${{ env.PROJECT_ID }}/playground-repository' -Pdocker-tag=${{ env.DOCKERTAG }}
      - name: Build And Push Python Backend
        run: ./gradlew playground:backend:containers:python:dockerTagPush -Pdocker-repository-root='${{ env.PLAYGROUND_REGISTRY_NAME}}/${{ env.PROJECT_ID }}/playground-repository' -Pdocker-tag=${{ env.DOCKERTAG }}
      - name: Clean All Build directories
        run: ./gradlew clean
      - name: Install helm chart
        run: |
             kubectl create namespace $K8S_NAMESPACE --dry-run=client -o yaml | kubectl apply -f - &&\
             helm install  --namespace $K8S_NAMESPACE $HELM_APP_NAME . --set global.registry="${{ env.PLAYGROUND_REGISTRY_NAME }}/${{ env.PROJECT_ID }}/playground-repository" --set global.tag=${{ env.DOCKERTAG }} &&\
             sleep 120
        working-directory: playground/infrastructure/helm
      - name: Run Python Examples CI
        run: |
             echo "$K8S_NAMESPACE"
             K8S_SERVER_ADDRESS=$(kubectl get svc -n $K8S_NAMESPACE -l "app=service-python" -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
             BEAM_ROOT_DIR="../../"
             BEAM_EXAMPLE_CATEGORIES="../../playground/categories.yaml"
             echo $K8S_SERVER_ADDRESS
             echo "$K8S_SERVER_ADDRESS"
             export SERVER_ADDRESS="$K8S_SERVER_ADDRESS:8081" && python3 ci_cd.py --step CI --sdk SDK_PYTHON
        working-directory: playground/infrastructure
      - name: Run Python Examples CD
        run: |
             K8S_SERVER_ADDRESS=$(kubectl get svc -n $K8S_NAMESPACE -l "app=service-python" -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
             BEAM_ROOT_DIR="../../"
             BEAM_EXAMPLE_CATEGORIES="../../playground/categories.yaml"
             export SERVER_ADDRESS="$K8S_SERVER_ADDRESS:8081" && python3 ci_cd.py --step CD --sdk SDK_PYTHON
        working-directory: playground/infrastructure
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
      - name: Run Go Examples CI
        run: |
             K8S_SERVER_ADDRESS=$(kubectl get svc -n $K8S_NAMESPACE -l "app=service-go" -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
             BEAM_ROOT_DIR="../../"
             BEAM_EXAMPLE_CATEGORIES="../../playground/categories.yaml"
             export SERVER_ADDRESS="$K8S_SERVER_ADDRESS:8082" && python3 ci_cd.py --step CI --sdk SDK_GO
        working-directory: playground/infrastructure
      - name: Run Go Examples CD
        run: |
             K8S_SERVER_ADDRESS=$(kubectl get svc -n $K8S_NAMESPACE -l "app=service-go" -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
             BEAM_ROOT_DIR="../../"
             BEAM_EXAMPLE_CATEGORIES="../../playground/categories.yaml"
             export SERVER_ADDRESS="$K8S_SERVER_ADDRESS:8082" && python3 ci_cd.py --step CD --sdk SDK_GO
        working-directory: playground/infrastructure
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
      - name: Run Java Examples CI
        run: |
             K8S_SERVER_ADDRESS=$(kubectl get svc -n $K8S_NAMESPACE -l "app=service-java" -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
             BEAM_ROOT_DIR="../../"
             BEAM_EXAMPLE_CATEGORIES="../../playground/categories.yaml"
             export SERVER_ADDRESS="$K8S_SERVER_ADDRESS:8080" && python3 ci_cd.py --step CI --sdk SDK_JAVA
        working-directory: playground/infrastructure
      - name: Run Java Examples CD
        run: |
             K8S_SERVER_ADDRESS=$(kubectl get svc -n $K8S_NAMESPACE -l "app=service-java" -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
             BEAM_ROOT_DIR="../../"
             BEAM_EXAMPLE_CATEGORIES="../../playground/categories.yaml"
             export SERVER_ADDRESS="$K8S_SERVER_ADDRESS:8080" && python3 ci_cd.py --step CD --sdk SDK_JAVA
        working-directory: playground/infrastructure
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
      - name: Delete Helm Chart
        if: always()
        run: |
             helm del --namespace $K8S_NAMESPACE $HELM_APP_NAME
