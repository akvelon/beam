# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build And Deploy Playground Frontend Application

on:

  workflow_dispatch:

jobs:
  build_playground_frontend_docker_image:
    name: Build Playground Frontend App
    runs-on: ubuntu-latest
    env:
      GO_VERSION: 1.17.0
      BEAM_VERSION: 2.33.0
      TERRAFORM_VERSION: 1.0.9
      FLUTTER_VERSION: 3.0.1-stable
      STAND_SUFFIX: ''
      GOOGLE_DOMAIN: '-dot-apache-beam-testing.appspot.com'
      PROJECT_ENV: beta
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
            distribution: 'zulu'
            java-version: '8'
      - name: install flutter
        run: |
             wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_$FLUTTER_VERSION.tar.xz &&\
             tar -xf flutter_linux_$FLUTTER_VERSION.tar.xz &&\
             mv flutter /opt/ &&\
             ln -s /opt/flutter/bin/flutter /usr/local/bin/flutter &&\
             ln -s /opt/flutter/bin/dart /usr/local/bin/dart &&\
             dart pub global activate protoc_plugin &&\
             ln -s /root/.pub-cache/bin/protoc-gen-dart /usr/local/bin/
      - name: Remove default github maven configuration
        # This step is a workaround to avoid a decryption issue
        run: rm ~/.m2/settings.xml
      - name: install npm
        uses: actions/setup-node@v2
        with:
            node-version: '14'
      - name: install docker linter
        run: npm install  -g dockerlint
      - name: lint dockerfile
        run: dockerlint Dockerfile
        working-directory: playground/frontend
      - uses: hashicorp/setup-terraform@v1
        with:
            terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Set Docker Tag
        run: echo "DOCKERTAG=${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Set Docker Tag If Github Tag was trigger
        run: echo "DOCKERTAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Setup GCP account
        run: |
             echo "${{ secrets.S3D_GCP_PLAYGROUND_SA_KEY }}" | base64 -d > /tmp/gcp_access.json

      - name: Login to Docker Registry
        run: cat /tmp/gcp_access.json | docker login -u _json_key --password-stdin https://${{ secrets.S3D_PLAYGROUND_REGISTRY_NAME }}
       
      - name: Changing bucket name
        run: |
          echo "bucket  = "\"${{ secrets.S3D_BUCKET_NAME }}"\"" > playground/terraform/environment/${{ env.PROJECT_ENV }}/state.tfbackend
          echo "bucket_examples_name = "\"${{ secrets.S3D_BUCKET_NAME }}-1"\"" >> playground/terraform/environment/${{ env.PROJECT_ENV }}/terraform.tfvars
          echo "state_bucket = "\"${{ secrets.S3D_BUCKET_NAME }}"\"" >> playground/terraform/environment/${{ env.PROJECT_ENV }}/terraform.tfvars
          echo "project_id = "\"${{ secrets.S3D_GCP_PLAYGROUND_PROJECT_ID }}"\"" >> playground/terraform/environment/${{ env.PROJECT_ENV }}/terraform.tfvars
        
      - name: Deploy Frontend Application
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_access.json
        run: ./gradlew playground:terraform:deployFrontend -Pdocker-tag=${{env.PROJECT_ENV}} -Pproject_id=${{ secrets.GCP_PLAYGROUND_PROJECT_ID }} -Pproject_environment=${{env.PROJECT_ENV}}

