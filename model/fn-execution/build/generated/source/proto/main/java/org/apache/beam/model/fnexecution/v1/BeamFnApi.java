// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/apache/beam/model/fn_execution/v1/beam_fn_api.proto

package org.apache.beam.model.fnexecution.v1;

public final class BeamFnApi {
  private BeamFnApi() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface RemoteGrpcPortOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.RemoteGrpcPort)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) An API descriptor which describes where to
     * connect to including any authentication that is required.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
     * @return Whether the apiServiceDescriptor field is set.
     */
    boolean hasApiServiceDescriptor();
    /**
     * <pre>
     * (Required) An API descriptor which describes where to
     * connect to including any authentication that is required.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
     * @return The apiServiceDescriptor.
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getApiServiceDescriptor();
    /**
     * <pre>
     * (Required) An API descriptor which describes where to
     * connect to including any authentication that is required.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getApiServiceDescriptorOrBuilder();

    /**
     * <pre>
     * (Required) The ID of the Coder that will be used to encode and decode data
     * sent over this port.
     * </pre>
     *
     * <code>string coder_id = 2;</code>
     * @return The coderId.
     */
    java.lang.String getCoderId();
    /**
     * <pre>
     * (Required) The ID of the Coder that will be used to encode and decode data
     * sent over this port.
     * </pre>
     *
     * <code>string coder_id = 2;</code>
     * @return The bytes for coderId.
     */
    com.google.protobuf.ByteString
        getCoderIdBytes();
  }
  /**
   * <pre>
   * A descriptor for connecting to a remote port using the Beam Fn Data API.
   * Allows for communication between two environments (for example between the
   * runner and the SDK).
   * Stable
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.RemoteGrpcPort}
   */
  public static final class RemoteGrpcPort extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.RemoteGrpcPort)
      RemoteGrpcPortOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RemoteGrpcPort.newBuilder() to construct.
    private RemoteGrpcPort(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RemoteGrpcPort() {
      coderId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RemoteGrpcPort();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RemoteGrpcPort(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder subBuilder = null;
              if (apiServiceDescriptor_ != null) {
                subBuilder = apiServiceDescriptor_.toBuilder();
              }
              apiServiceDescriptor_ = input.readMessage(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(apiServiceDescriptor_);
                apiServiceDescriptor_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              coderId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort.Builder.class);
    }

    public static final int API_SERVICE_DESCRIPTOR_FIELD_NUMBER = 1;
    private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor apiServiceDescriptor_;
    /**
     * <pre>
     * (Required) An API descriptor which describes where to
     * connect to including any authentication that is required.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
     * @return Whether the apiServiceDescriptor field is set.
     */
    @java.lang.Override
    public boolean hasApiServiceDescriptor() {
      return apiServiceDescriptor_ != null;
    }
    /**
     * <pre>
     * (Required) An API descriptor which describes where to
     * connect to including any authentication that is required.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
     * @return The apiServiceDescriptor.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getApiServiceDescriptor() {
      return apiServiceDescriptor_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : apiServiceDescriptor_;
    }
    /**
     * <pre>
     * (Required) An API descriptor which describes where to
     * connect to including any authentication that is required.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getApiServiceDescriptorOrBuilder() {
      return getApiServiceDescriptor();
    }

    public static final int CODER_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object coderId_;
    /**
     * <pre>
     * (Required) The ID of the Coder that will be used to encode and decode data
     * sent over this port.
     * </pre>
     *
     * <code>string coder_id = 2;</code>
     * @return The coderId.
     */
    @java.lang.Override
    public java.lang.String getCoderId() {
      java.lang.Object ref = coderId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        coderId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) The ID of the Coder that will be used to encode and decode data
     * sent over this port.
     * </pre>
     *
     * <code>string coder_id = 2;</code>
     * @return The bytes for coderId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCoderIdBytes() {
      java.lang.Object ref = coderId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coderId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (apiServiceDescriptor_ != null) {
        output.writeMessage(1, getApiServiceDescriptor());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(coderId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, coderId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (apiServiceDescriptor_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getApiServiceDescriptor());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(coderId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, coderId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort) obj;

      if (hasApiServiceDescriptor() != other.hasApiServiceDescriptor()) return false;
      if (hasApiServiceDescriptor()) {
        if (!getApiServiceDescriptor()
            .equals(other.getApiServiceDescriptor())) return false;
      }
      if (!getCoderId()
          .equals(other.getCoderId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasApiServiceDescriptor()) {
        hash = (37 * hash) + API_SERVICE_DESCRIPTOR_FIELD_NUMBER;
        hash = (53 * hash) + getApiServiceDescriptor().hashCode();
      }
      hash = (37 * hash) + CODER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getCoderId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A descriptor for connecting to a remote port using the Beam Fn Data API.
     * Allows for communication between two environments (for example between the
     * runner and the SDK).
     * Stable
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.RemoteGrpcPort}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.RemoteGrpcPort)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPortOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (apiServiceDescriptorBuilder_ == null) {
          apiServiceDescriptor_ = null;
        } else {
          apiServiceDescriptor_ = null;
          apiServiceDescriptorBuilder_ = null;
        }
        coderId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort(this);
        if (apiServiceDescriptorBuilder_ == null) {
          result.apiServiceDescriptor_ = apiServiceDescriptor_;
        } else {
          result.apiServiceDescriptor_ = apiServiceDescriptorBuilder_.build();
        }
        result.coderId_ = coderId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort.getDefaultInstance()) return this;
        if (other.hasApiServiceDescriptor()) {
          mergeApiServiceDescriptor(other.getApiServiceDescriptor());
        }
        if (!other.getCoderId().isEmpty()) {
          coderId_ = other.coderId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor apiServiceDescriptor_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> apiServiceDescriptorBuilder_;
      /**
       * <pre>
       * (Required) An API descriptor which describes where to
       * connect to including any authentication that is required.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
       * @return Whether the apiServiceDescriptor field is set.
       */
      public boolean hasApiServiceDescriptor() {
        return apiServiceDescriptorBuilder_ != null || apiServiceDescriptor_ != null;
      }
      /**
       * <pre>
       * (Required) An API descriptor which describes where to
       * connect to including any authentication that is required.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
       * @return The apiServiceDescriptor.
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getApiServiceDescriptor() {
        if (apiServiceDescriptorBuilder_ == null) {
          return apiServiceDescriptor_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : apiServiceDescriptor_;
        } else {
          return apiServiceDescriptorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) An API descriptor which describes where to
       * connect to including any authentication that is required.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
       */
      public Builder setApiServiceDescriptor(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (apiServiceDescriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          apiServiceDescriptor_ = value;
          onChanged();
        } else {
          apiServiceDescriptorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) An API descriptor which describes where to
       * connect to including any authentication that is required.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
       */
      public Builder setApiServiceDescriptor(
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder builderForValue) {
        if (apiServiceDescriptorBuilder_ == null) {
          apiServiceDescriptor_ = builderForValue.build();
          onChanged();
        } else {
          apiServiceDescriptorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) An API descriptor which describes where to
       * connect to including any authentication that is required.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
       */
      public Builder mergeApiServiceDescriptor(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (apiServiceDescriptorBuilder_ == null) {
          if (apiServiceDescriptor_ != null) {
            apiServiceDescriptor_ =
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.newBuilder(apiServiceDescriptor_).mergeFrom(value).buildPartial();
          } else {
            apiServiceDescriptor_ = value;
          }
          onChanged();
        } else {
          apiServiceDescriptorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) An API descriptor which describes where to
       * connect to including any authentication that is required.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
       */
      public Builder clearApiServiceDescriptor() {
        if (apiServiceDescriptorBuilder_ == null) {
          apiServiceDescriptor_ = null;
          onChanged();
        } else {
          apiServiceDescriptor_ = null;
          apiServiceDescriptorBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) An API descriptor which describes where to
       * connect to including any authentication that is required.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder getApiServiceDescriptorBuilder() {
        
        onChanged();
        return getApiServiceDescriptorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) An API descriptor which describes where to
       * connect to including any authentication that is required.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getApiServiceDescriptorOrBuilder() {
        if (apiServiceDescriptorBuilder_ != null) {
          return apiServiceDescriptorBuilder_.getMessageOrBuilder();
        } else {
          return apiServiceDescriptor_ == null ?
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : apiServiceDescriptor_;
        }
      }
      /**
       * <pre>
       * (Required) An API descriptor which describes where to
       * connect to including any authentication that is required.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor api_service_descriptor = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> 
          getApiServiceDescriptorFieldBuilder() {
        if (apiServiceDescriptorBuilder_ == null) {
          apiServiceDescriptorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder>(
                  getApiServiceDescriptor(),
                  getParentForChildren(),
                  isClean());
          apiServiceDescriptor_ = null;
        }
        return apiServiceDescriptorBuilder_;
      }

      private java.lang.Object coderId_ = "";
      /**
       * <pre>
       * (Required) The ID of the Coder that will be used to encode and decode data
       * sent over this port.
       * </pre>
       *
       * <code>string coder_id = 2;</code>
       * @return The coderId.
       */
      public java.lang.String getCoderId() {
        java.lang.Object ref = coderId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          coderId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) The ID of the Coder that will be used to encode and decode data
       * sent over this port.
       * </pre>
       *
       * <code>string coder_id = 2;</code>
       * @return The bytes for coderId.
       */
      public com.google.protobuf.ByteString
          getCoderIdBytes() {
        java.lang.Object ref = coderId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          coderId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) The ID of the Coder that will be used to encode and decode data
       * sent over this port.
       * </pre>
       *
       * <code>string coder_id = 2;</code>
       * @param value The coderId to set.
       * @return This builder for chaining.
       */
      public Builder setCoderId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        coderId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The ID of the Coder that will be used to encode and decode data
       * sent over this port.
       * </pre>
       *
       * <code>string coder_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCoderId() {
        
        coderId_ = getDefaultInstance().getCoderId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The ID of the Coder that will be used to encode and decode data
       * sent over this port.
       * </pre>
       *
       * <code>string coder_id = 2;</code>
       * @param value The bytes for coderId to set.
       * @return This builder for chaining.
       */
      public Builder setCoderIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        coderId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.RemoteGrpcPort)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.RemoteGrpcPort)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RemoteGrpcPort>
        PARSER = new com.google.protobuf.AbstractParser<RemoteGrpcPort>() {
      @java.lang.Override
      public RemoteGrpcPort parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RemoteGrpcPort(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RemoteGrpcPort> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RemoteGrpcPort> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.RemoteGrpcPort getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetProcessBundleDescriptorRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.GetProcessBundleDescriptorRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string process_bundle_descriptor_id = 1;</code>
     * @return The processBundleDescriptorId.
     */
    java.lang.String getProcessBundleDescriptorId();
    /**
     * <code>string process_bundle_descriptor_id = 1;</code>
     * @return The bytes for processBundleDescriptorId.
     */
    com.google.protobuf.ByteString
        getProcessBundleDescriptorIdBytes();
  }
  /**
   * <pre>
   * Requests the ProcessBundleDescriptor with the given id.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.GetProcessBundleDescriptorRequest}
   */
  public static final class GetProcessBundleDescriptorRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.GetProcessBundleDescriptorRequest)
      GetProcessBundleDescriptorRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GetProcessBundleDescriptorRequest.newBuilder() to construct.
    private GetProcessBundleDescriptorRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GetProcessBundleDescriptorRequest() {
      processBundleDescriptorId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GetProcessBundleDescriptorRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GetProcessBundleDescriptorRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              processBundleDescriptorId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest.Builder.class);
    }

    public static final int PROCESS_BUNDLE_DESCRIPTOR_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object processBundleDescriptorId_;
    /**
     * <code>string process_bundle_descriptor_id = 1;</code>
     * @return The processBundleDescriptorId.
     */
    @java.lang.Override
    public java.lang.String getProcessBundleDescriptorId() {
      java.lang.Object ref = processBundleDescriptorId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        processBundleDescriptorId_ = s;
        return s;
      }
    }
    /**
     * <code>string process_bundle_descriptor_id = 1;</code>
     * @return The bytes for processBundleDescriptorId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getProcessBundleDescriptorIdBytes() {
      java.lang.Object ref = processBundleDescriptorId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        processBundleDescriptorId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(processBundleDescriptorId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, processBundleDescriptorId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(processBundleDescriptorId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, processBundleDescriptorId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest) obj;

      if (!getProcessBundleDescriptorId()
          .equals(other.getProcessBundleDescriptorId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PROCESS_BUNDLE_DESCRIPTOR_ID_FIELD_NUMBER;
      hash = (53 * hash) + getProcessBundleDescriptorId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Requests the ProcessBundleDescriptor with the given id.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.GetProcessBundleDescriptorRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.GetProcessBundleDescriptorRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        processBundleDescriptorId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest(this);
        result.processBundleDescriptorId_ = processBundleDescriptorId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest.getDefaultInstance()) return this;
        if (!other.getProcessBundleDescriptorId().isEmpty()) {
          processBundleDescriptorId_ = other.processBundleDescriptorId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object processBundleDescriptorId_ = "";
      /**
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @return The processBundleDescriptorId.
       */
      public java.lang.String getProcessBundleDescriptorId() {
        java.lang.Object ref = processBundleDescriptorId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          processBundleDescriptorId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @return The bytes for processBundleDescriptorId.
       */
      public com.google.protobuf.ByteString
          getProcessBundleDescriptorIdBytes() {
        java.lang.Object ref = processBundleDescriptorId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          processBundleDescriptorId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @param value The processBundleDescriptorId to set.
       * @return This builder for chaining.
       */
      public Builder setProcessBundleDescriptorId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        processBundleDescriptorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearProcessBundleDescriptorId() {
        
        processBundleDescriptorId_ = getDefaultInstance().getProcessBundleDescriptorId();
        onChanged();
        return this;
      }
      /**
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @param value The bytes for processBundleDescriptorId to set.
       * @return This builder for chaining.
       */
      public Builder setProcessBundleDescriptorIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        processBundleDescriptorId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.GetProcessBundleDescriptorRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.GetProcessBundleDescriptorRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetProcessBundleDescriptorRequest>
        PARSER = new com.google.protobuf.AbstractParser<GetProcessBundleDescriptorRequest>() {
      @java.lang.Override
      public GetProcessBundleDescriptorRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GetProcessBundleDescriptorRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GetProcessBundleDescriptorRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetProcessBundleDescriptorRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.GetProcessBundleDescriptorRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstructionRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.InstructionRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A unique identifier provided by the runner which represents
     * this requests execution. The InstructionResponse MUST have the matching id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    java.lang.String getInstructionId();
    /**
     * <pre>
     * (Required) A unique identifier provided by the runner which represents
     * this requests execution. The InstructionResponse MUST have the matching id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    com.google.protobuf.ByteString
        getInstructionIdBytes();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
     * @return Whether the processBundle field is set.
     */
    boolean hasProcessBundle();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
     * @return The processBundle.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest getProcessBundle();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequestOrBuilder getProcessBundleOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
     * @return Whether the processBundleProgress field is set.
     */
    boolean hasProcessBundleProgress();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
     * @return The processBundleProgress.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest getProcessBundleProgress();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequestOrBuilder getProcessBundleProgressOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
     * @return Whether the processBundleSplit field is set.
     */
    boolean hasProcessBundleSplit();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
     * @return The processBundleSplit.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest getProcessBundleSplit();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequestOrBuilder getProcessBundleSplitOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
     * @return Whether the finalizeBundle field is set.
     */
    boolean hasFinalizeBundle();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
     * @return The finalizeBundle.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest getFinalizeBundle();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequestOrBuilder getFinalizeBundleOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
     * @return Whether the monitoringInfos field is set.
     */
    boolean hasMonitoringInfos();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
     * @return The monitoringInfos.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest getMonitoringInfos();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequestOrBuilder getMonitoringInfosOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
     * @return Whether the harnessMonitoringInfos field is set.
     */
    boolean hasHarnessMonitoringInfos();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
     * @return The harnessMonitoringInfos.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest getHarnessMonitoringInfos();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequestOrBuilder getHarnessMonitoringInfosOrBuilder();

    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
     * @return Whether the register field is set.
     */
    boolean hasRegister();
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
     * @return The register.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest getRegister();
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequestOrBuilder getRegisterOrBuilder();

    public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest.RequestCase getRequestCase();
  }
  /**
   * <pre>
   * A request sent by a runner which the SDK is asked to fulfill.
   * For any unsupported request type, an error should be returned with a
   * matching instruction id.
   * Stable
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.InstructionRequest}
   */
  public static final class InstructionRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.InstructionRequest)
      InstructionRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstructionRequest.newBuilder() to construct.
    private InstructionRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstructionRequest() {
      instructionId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InstructionRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InstructionRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              instructionId_ = s;
              break;
            }
            case 8002: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.Builder subBuilder = null;
              if (requestCase_ == 1000) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1000;
              break;
            }
            case 8010: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.Builder subBuilder = null;
              if (requestCase_ == 1001) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1001;
              break;
            }
            case 8018: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.Builder subBuilder = null;
              if (requestCase_ == 1002) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1002;
              break;
            }
            case 8026: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.Builder subBuilder = null;
              if (requestCase_ == 1003) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1003;
              break;
            }
            case 8034: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.Builder subBuilder = null;
              if (requestCase_ == 1004) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1004;
              break;
            }
            case 8042: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.Builder subBuilder = null;
              if (requestCase_ == 1005) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1005;
              break;
            }
            case 8050: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.Builder subBuilder = null;
              if (requestCase_ == 1006) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1006;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest.Builder.class);
    }

    private int requestCase_ = 0;
    private java.lang.Object request_;
    public enum RequestCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      PROCESS_BUNDLE(1001),
      PROCESS_BUNDLE_PROGRESS(1002),
      PROCESS_BUNDLE_SPLIT(1003),
      FINALIZE_BUNDLE(1004),
      MONITORING_INFOS(1005),
      HARNESS_MONITORING_INFOS(1006),
      REGISTER(1000),
      REQUEST_NOT_SET(0);
      private final int value;
      private RequestCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RequestCase valueOf(int value) {
        return forNumber(value);
      }

      public static RequestCase forNumber(int value) {
        switch (value) {
          case 1001: return PROCESS_BUNDLE;
          case 1002: return PROCESS_BUNDLE_PROGRESS;
          case 1003: return PROCESS_BUNDLE_SPLIT;
          case 1004: return FINALIZE_BUNDLE;
          case 1005: return MONITORING_INFOS;
          case 1006: return HARNESS_MONITORING_INFOS;
          case 1000: return REGISTER;
          case 0: return REQUEST_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RequestCase
    getRequestCase() {
      return RequestCase.forNumber(
          requestCase_);
    }

    public static final int INSTRUCTION_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object instructionId_;
    /**
     * <pre>
     * (Required) A unique identifier provided by the runner which represents
     * this requests execution. The InstructionResponse MUST have the matching id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    @java.lang.Override
    public java.lang.String getInstructionId() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instructionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A unique identifier provided by the runner which represents
     * this requests execution. The InstructionResponse MUST have the matching id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInstructionIdBytes() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instructionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PROCESS_BUNDLE_FIELD_NUMBER = 1001;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
     * @return Whether the processBundle field is set.
     */
    @java.lang.Override
    public boolean hasProcessBundle() {
      return requestCase_ == 1001;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
     * @return The processBundle.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest getProcessBundle() {
      if (requestCase_ == 1001) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequestOrBuilder getProcessBundleOrBuilder() {
      if (requestCase_ == 1001) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.getDefaultInstance();
    }

    public static final int PROCESS_BUNDLE_PROGRESS_FIELD_NUMBER = 1002;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
     * @return Whether the processBundleProgress field is set.
     */
    @java.lang.Override
    public boolean hasProcessBundleProgress() {
      return requestCase_ == 1002;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
     * @return The processBundleProgress.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest getProcessBundleProgress() {
      if (requestCase_ == 1002) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequestOrBuilder getProcessBundleProgressOrBuilder() {
      if (requestCase_ == 1002) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.getDefaultInstance();
    }

    public static final int PROCESS_BUNDLE_SPLIT_FIELD_NUMBER = 1003;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
     * @return Whether the processBundleSplit field is set.
     */
    @java.lang.Override
    public boolean hasProcessBundleSplit() {
      return requestCase_ == 1003;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
     * @return The processBundleSplit.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest getProcessBundleSplit() {
      if (requestCase_ == 1003) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequestOrBuilder getProcessBundleSplitOrBuilder() {
      if (requestCase_ == 1003) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.getDefaultInstance();
    }

    public static final int FINALIZE_BUNDLE_FIELD_NUMBER = 1004;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
     * @return Whether the finalizeBundle field is set.
     */
    @java.lang.Override
    public boolean hasFinalizeBundle() {
      return requestCase_ == 1004;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
     * @return The finalizeBundle.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest getFinalizeBundle() {
      if (requestCase_ == 1004) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequestOrBuilder getFinalizeBundleOrBuilder() {
      if (requestCase_ == 1004) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.getDefaultInstance();
    }

    public static final int MONITORING_INFOS_FIELD_NUMBER = 1005;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
     * @return Whether the monitoringInfos field is set.
     */
    @java.lang.Override
    public boolean hasMonitoringInfos() {
      return requestCase_ == 1005;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
     * @return The monitoringInfos.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest getMonitoringInfos() {
      if (requestCase_ == 1005) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequestOrBuilder getMonitoringInfosOrBuilder() {
      if (requestCase_ == 1005) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.getDefaultInstance();
    }

    public static final int HARNESS_MONITORING_INFOS_FIELD_NUMBER = 1006;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
     * @return Whether the harnessMonitoringInfos field is set.
     */
    @java.lang.Override
    public boolean hasHarnessMonitoringInfos() {
      return requestCase_ == 1006;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
     * @return The harnessMonitoringInfos.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest getHarnessMonitoringInfos() {
      if (requestCase_ == 1006) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequestOrBuilder getHarnessMonitoringInfosOrBuilder() {
      if (requestCase_ == 1006) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.getDefaultInstance();
    }

    public static final int REGISTER_FIELD_NUMBER = 1000;
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
     * @return Whether the register field is set.
     */
    @java.lang.Override
    public boolean hasRegister() {
      return requestCase_ == 1000;
    }
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
     * @return The register.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest getRegister() {
      if (requestCase_ == 1000) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.getDefaultInstance();
    }
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequestOrBuilder getRegisterOrBuilder() {
      if (requestCase_ == 1000) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instructionId_);
      }
      if (requestCase_ == 1000) {
        output.writeMessage(1000, (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_);
      }
      if (requestCase_ == 1001) {
        output.writeMessage(1001, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_);
      }
      if (requestCase_ == 1002) {
        output.writeMessage(1002, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_);
      }
      if (requestCase_ == 1003) {
        output.writeMessage(1003, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_);
      }
      if (requestCase_ == 1004) {
        output.writeMessage(1004, (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_);
      }
      if (requestCase_ == 1005) {
        output.writeMessage(1005, (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_);
      }
      if (requestCase_ == 1006) {
        output.writeMessage(1006, (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instructionId_);
      }
      if (requestCase_ == 1000) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1000, (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_);
      }
      if (requestCase_ == 1001) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1001, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_);
      }
      if (requestCase_ == 1002) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1002, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_);
      }
      if (requestCase_ == 1003) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1003, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_);
      }
      if (requestCase_ == 1004) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1004, (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_);
      }
      if (requestCase_ == 1005) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1005, (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_);
      }
      if (requestCase_ == 1006) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1006, (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest) obj;

      if (!getInstructionId()
          .equals(other.getInstructionId())) return false;
      if (!getRequestCase().equals(other.getRequestCase())) return false;
      switch (requestCase_) {
        case 1001:
          if (!getProcessBundle()
              .equals(other.getProcessBundle())) return false;
          break;
        case 1002:
          if (!getProcessBundleProgress()
              .equals(other.getProcessBundleProgress())) return false;
          break;
        case 1003:
          if (!getProcessBundleSplit()
              .equals(other.getProcessBundleSplit())) return false;
          break;
        case 1004:
          if (!getFinalizeBundle()
              .equals(other.getFinalizeBundle())) return false;
          break;
        case 1005:
          if (!getMonitoringInfos()
              .equals(other.getMonitoringInfos())) return false;
          break;
        case 1006:
          if (!getHarnessMonitoringInfos()
              .equals(other.getHarnessMonitoringInfos())) return false;
          break;
        case 1000:
          if (!getRegister()
              .equals(other.getRegister())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInstructionId().hashCode();
      switch (requestCase_) {
        case 1001:
          hash = (37 * hash) + PROCESS_BUNDLE_FIELD_NUMBER;
          hash = (53 * hash) + getProcessBundle().hashCode();
          break;
        case 1002:
          hash = (37 * hash) + PROCESS_BUNDLE_PROGRESS_FIELD_NUMBER;
          hash = (53 * hash) + getProcessBundleProgress().hashCode();
          break;
        case 1003:
          hash = (37 * hash) + PROCESS_BUNDLE_SPLIT_FIELD_NUMBER;
          hash = (53 * hash) + getProcessBundleSplit().hashCode();
          break;
        case 1004:
          hash = (37 * hash) + FINALIZE_BUNDLE_FIELD_NUMBER;
          hash = (53 * hash) + getFinalizeBundle().hashCode();
          break;
        case 1005:
          hash = (37 * hash) + MONITORING_INFOS_FIELD_NUMBER;
          hash = (53 * hash) + getMonitoringInfos().hashCode();
          break;
        case 1006:
          hash = (37 * hash) + HARNESS_MONITORING_INFOS_FIELD_NUMBER;
          hash = (53 * hash) + getHarnessMonitoringInfos().hashCode();
          break;
        case 1000:
          hash = (37 * hash) + REGISTER_FIELD_NUMBER;
          hash = (53 * hash) + getRegister().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A request sent by a runner which the SDK is asked to fulfill.
     * For any unsupported request type, an error should be returned with a
     * matching instruction id.
     * Stable
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.InstructionRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.InstructionRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        instructionId_ = "";

        requestCase_ = 0;
        request_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest(this);
        result.instructionId_ = instructionId_;
        if (requestCase_ == 1001) {
          if (processBundleBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = processBundleBuilder_.build();
          }
        }
        if (requestCase_ == 1002) {
          if (processBundleProgressBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = processBundleProgressBuilder_.build();
          }
        }
        if (requestCase_ == 1003) {
          if (processBundleSplitBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = processBundleSplitBuilder_.build();
          }
        }
        if (requestCase_ == 1004) {
          if (finalizeBundleBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = finalizeBundleBuilder_.build();
          }
        }
        if (requestCase_ == 1005) {
          if (monitoringInfosBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = monitoringInfosBuilder_.build();
          }
        }
        if (requestCase_ == 1006) {
          if (harnessMonitoringInfosBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = harnessMonitoringInfosBuilder_.build();
          }
        }
        if (requestCase_ == 1000) {
          if (registerBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = registerBuilder_.build();
          }
        }
        result.requestCase_ = requestCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest.getDefaultInstance()) return this;
        if (!other.getInstructionId().isEmpty()) {
          instructionId_ = other.instructionId_;
          onChanged();
        }
        switch (other.getRequestCase()) {
          case PROCESS_BUNDLE: {
            mergeProcessBundle(other.getProcessBundle());
            break;
          }
          case PROCESS_BUNDLE_PROGRESS: {
            mergeProcessBundleProgress(other.getProcessBundleProgress());
            break;
          }
          case PROCESS_BUNDLE_SPLIT: {
            mergeProcessBundleSplit(other.getProcessBundleSplit());
            break;
          }
          case FINALIZE_BUNDLE: {
            mergeFinalizeBundle(other.getFinalizeBundle());
            break;
          }
          case MONITORING_INFOS: {
            mergeMonitoringInfos(other.getMonitoringInfos());
            break;
          }
          case HARNESS_MONITORING_INFOS: {
            mergeHarnessMonitoringInfos(other.getHarnessMonitoringInfos());
            break;
          }
          case REGISTER: {
            mergeRegister(other.getRegister());
            break;
          }
          case REQUEST_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int requestCase_ = 0;
      private java.lang.Object request_;
      public RequestCase
          getRequestCase() {
        return RequestCase.forNumber(
            requestCase_);
      }

      public Builder clearRequest() {
        requestCase_ = 0;
        request_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object instructionId_ = "";
      /**
       * <pre>
       * (Required) A unique identifier provided by the runner which represents
       * this requests execution. The InstructionResponse MUST have the matching id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The instructionId.
       */
      public java.lang.String getInstructionId() {
        java.lang.Object ref = instructionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instructionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A unique identifier provided by the runner which represents
       * this requests execution. The InstructionResponse MUST have the matching id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The bytes for instructionId.
       */
      public com.google.protobuf.ByteString
          getInstructionIdBytes() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instructionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A unique identifier provided by the runner which represents
       * this requests execution. The InstructionResponse MUST have the matching id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instructionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A unique identifier provided by the runner which represents
       * this requests execution. The InstructionResponse MUST have the matching id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInstructionId() {
        
        instructionId_ = getDefaultInstance().getInstructionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A unique identifier provided by the runner which represents
       * this requests execution. The InstructionResponse MUST have the matching id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The bytes for instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instructionId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequestOrBuilder> processBundleBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
       * @return Whether the processBundle field is set.
       */
      @java.lang.Override
      public boolean hasProcessBundle() {
        return requestCase_ == 1001;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
       * @return The processBundle.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest getProcessBundle() {
        if (processBundleBuilder_ == null) {
          if (requestCase_ == 1001) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1001) {
            return processBundleBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
       */
      public Builder setProcessBundle(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest value) {
        if (processBundleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          processBundleBuilder_.setMessage(value);
        }
        requestCase_ = 1001;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
       */
      public Builder setProcessBundle(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.Builder builderForValue) {
        if (processBundleBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          processBundleBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1001;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
       */
      public Builder mergeProcessBundle(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest value) {
        if (processBundleBuilder_ == null) {
          if (requestCase_ == 1001 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1001) {
            processBundleBuilder_.mergeFrom(value);
          } else {
            processBundleBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1001;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
       */
      public Builder clearProcessBundle() {
        if (processBundleBuilder_ == null) {
          if (requestCase_ == 1001) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1001) {
            requestCase_ = 0;
            request_ = null;
          }
          processBundleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.Builder getProcessBundleBuilder() {
        return getProcessBundleFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequestOrBuilder getProcessBundleOrBuilder() {
        if ((requestCase_ == 1001) && (processBundleBuilder_ != null)) {
          return processBundleBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1001) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest process_bundle = 1001;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequestOrBuilder> 
          getProcessBundleFieldBuilder() {
        if (processBundleBuilder_ == null) {
          if (!(requestCase_ == 1001)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.getDefaultInstance();
          }
          processBundleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1001;
        onChanged();;
        return processBundleBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequestOrBuilder> processBundleProgressBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
       * @return Whether the processBundleProgress field is set.
       */
      @java.lang.Override
      public boolean hasProcessBundleProgress() {
        return requestCase_ == 1002;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
       * @return The processBundleProgress.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest getProcessBundleProgress() {
        if (processBundleProgressBuilder_ == null) {
          if (requestCase_ == 1002) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1002) {
            return processBundleProgressBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
       */
      public Builder setProcessBundleProgress(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest value) {
        if (processBundleProgressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          processBundleProgressBuilder_.setMessage(value);
        }
        requestCase_ = 1002;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
       */
      public Builder setProcessBundleProgress(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.Builder builderForValue) {
        if (processBundleProgressBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          processBundleProgressBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1002;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
       */
      public Builder mergeProcessBundleProgress(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest value) {
        if (processBundleProgressBuilder_ == null) {
          if (requestCase_ == 1002 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1002) {
            processBundleProgressBuilder_.mergeFrom(value);
          } else {
            processBundleProgressBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1002;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
       */
      public Builder clearProcessBundleProgress() {
        if (processBundleProgressBuilder_ == null) {
          if (requestCase_ == 1002) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1002) {
            requestCase_ = 0;
            request_ = null;
          }
          processBundleProgressBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.Builder getProcessBundleProgressBuilder() {
        return getProcessBundleProgressFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequestOrBuilder getProcessBundleProgressOrBuilder() {
        if ((requestCase_ == 1002) && (processBundleProgressBuilder_ != null)) {
          return processBundleProgressBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1002) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest process_bundle_progress = 1002;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequestOrBuilder> 
          getProcessBundleProgressFieldBuilder() {
        if (processBundleProgressBuilder_ == null) {
          if (!(requestCase_ == 1002)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.getDefaultInstance();
          }
          processBundleProgressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1002;
        onChanged();;
        return processBundleProgressBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequestOrBuilder> processBundleSplitBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
       * @return Whether the processBundleSplit field is set.
       */
      @java.lang.Override
      public boolean hasProcessBundleSplit() {
        return requestCase_ == 1003;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
       * @return The processBundleSplit.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest getProcessBundleSplit() {
        if (processBundleSplitBuilder_ == null) {
          if (requestCase_ == 1003) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1003) {
            return processBundleSplitBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
       */
      public Builder setProcessBundleSplit(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest value) {
        if (processBundleSplitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          processBundleSplitBuilder_.setMessage(value);
        }
        requestCase_ = 1003;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
       */
      public Builder setProcessBundleSplit(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.Builder builderForValue) {
        if (processBundleSplitBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          processBundleSplitBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1003;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
       */
      public Builder mergeProcessBundleSplit(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest value) {
        if (processBundleSplitBuilder_ == null) {
          if (requestCase_ == 1003 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1003) {
            processBundleSplitBuilder_.mergeFrom(value);
          } else {
            processBundleSplitBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1003;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
       */
      public Builder clearProcessBundleSplit() {
        if (processBundleSplitBuilder_ == null) {
          if (requestCase_ == 1003) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1003) {
            requestCase_ = 0;
            request_ = null;
          }
          processBundleSplitBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.Builder getProcessBundleSplitBuilder() {
        return getProcessBundleSplitFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequestOrBuilder getProcessBundleSplitOrBuilder() {
        if ((requestCase_ == 1003) && (processBundleSplitBuilder_ != null)) {
          return processBundleSplitBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1003) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest process_bundle_split = 1003;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequestOrBuilder> 
          getProcessBundleSplitFieldBuilder() {
        if (processBundleSplitBuilder_ == null) {
          if (!(requestCase_ == 1003)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.getDefaultInstance();
          }
          processBundleSplitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1003;
        onChanged();;
        return processBundleSplitBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequestOrBuilder> finalizeBundleBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
       * @return Whether the finalizeBundle field is set.
       */
      @java.lang.Override
      public boolean hasFinalizeBundle() {
        return requestCase_ == 1004;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
       * @return The finalizeBundle.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest getFinalizeBundle() {
        if (finalizeBundleBuilder_ == null) {
          if (requestCase_ == 1004) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1004) {
            return finalizeBundleBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
       */
      public Builder setFinalizeBundle(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest value) {
        if (finalizeBundleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          finalizeBundleBuilder_.setMessage(value);
        }
        requestCase_ = 1004;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
       */
      public Builder setFinalizeBundle(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.Builder builderForValue) {
        if (finalizeBundleBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          finalizeBundleBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1004;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
       */
      public Builder mergeFinalizeBundle(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest value) {
        if (finalizeBundleBuilder_ == null) {
          if (requestCase_ == 1004 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1004) {
            finalizeBundleBuilder_.mergeFrom(value);
          } else {
            finalizeBundleBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1004;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
       */
      public Builder clearFinalizeBundle() {
        if (finalizeBundleBuilder_ == null) {
          if (requestCase_ == 1004) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1004) {
            requestCase_ = 0;
            request_ = null;
          }
          finalizeBundleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.Builder getFinalizeBundleBuilder() {
        return getFinalizeBundleFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequestOrBuilder getFinalizeBundleOrBuilder() {
        if ((requestCase_ == 1004) && (finalizeBundleBuilder_ != null)) {
          return finalizeBundleBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1004) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest finalize_bundle = 1004;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequestOrBuilder> 
          getFinalizeBundleFieldBuilder() {
        if (finalizeBundleBuilder_ == null) {
          if (!(requestCase_ == 1004)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.getDefaultInstance();
          }
          finalizeBundleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1004;
        onChanged();;
        return finalizeBundleBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequestOrBuilder> monitoringInfosBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
       * @return Whether the monitoringInfos field is set.
       */
      @java.lang.Override
      public boolean hasMonitoringInfos() {
        return requestCase_ == 1005;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
       * @return The monitoringInfos.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest getMonitoringInfos() {
        if (monitoringInfosBuilder_ == null) {
          if (requestCase_ == 1005) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1005) {
            return monitoringInfosBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
       */
      public Builder setMonitoringInfos(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest value) {
        if (monitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          monitoringInfosBuilder_.setMessage(value);
        }
        requestCase_ = 1005;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
       */
      public Builder setMonitoringInfos(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.Builder builderForValue) {
        if (monitoringInfosBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          monitoringInfosBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1005;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
       */
      public Builder mergeMonitoringInfos(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest value) {
        if (monitoringInfosBuilder_ == null) {
          if (requestCase_ == 1005 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1005) {
            monitoringInfosBuilder_.mergeFrom(value);
          } else {
            monitoringInfosBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1005;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
       */
      public Builder clearMonitoringInfos() {
        if (monitoringInfosBuilder_ == null) {
          if (requestCase_ == 1005) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1005) {
            requestCase_ = 0;
            request_ = null;
          }
          monitoringInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.Builder getMonitoringInfosBuilder() {
        return getMonitoringInfosFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequestOrBuilder getMonitoringInfosOrBuilder() {
        if ((requestCase_ == 1005) && (monitoringInfosBuilder_ != null)) {
          return monitoringInfosBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1005) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest monitoring_infos = 1005;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequestOrBuilder> 
          getMonitoringInfosFieldBuilder() {
        if (monitoringInfosBuilder_ == null) {
          if (!(requestCase_ == 1005)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.getDefaultInstance();
          }
          monitoringInfosBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1005;
        onChanged();;
        return monitoringInfosBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequestOrBuilder> harnessMonitoringInfosBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
       * @return Whether the harnessMonitoringInfos field is set.
       */
      @java.lang.Override
      public boolean hasHarnessMonitoringInfos() {
        return requestCase_ == 1006;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
       * @return The harnessMonitoringInfos.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest getHarnessMonitoringInfos() {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (requestCase_ == 1006) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1006) {
            return harnessMonitoringInfosBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
       */
      public Builder setHarnessMonitoringInfos(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest value) {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          harnessMonitoringInfosBuilder_.setMessage(value);
        }
        requestCase_ = 1006;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
       */
      public Builder setHarnessMonitoringInfos(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.Builder builderForValue) {
        if (harnessMonitoringInfosBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          harnessMonitoringInfosBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1006;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
       */
      public Builder mergeHarnessMonitoringInfos(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest value) {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (requestCase_ == 1006 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1006) {
            harnessMonitoringInfosBuilder_.mergeFrom(value);
          } else {
            harnessMonitoringInfosBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1006;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
       */
      public Builder clearHarnessMonitoringInfos() {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (requestCase_ == 1006) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1006) {
            requestCase_ = 0;
            request_ = null;
          }
          harnessMonitoringInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.Builder getHarnessMonitoringInfosBuilder() {
        return getHarnessMonitoringInfosFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequestOrBuilder getHarnessMonitoringInfosOrBuilder() {
        if ((requestCase_ == 1006) && (harnessMonitoringInfosBuilder_ != null)) {
          return harnessMonitoringInfosBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1006) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest harness_monitoring_infos = 1006;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequestOrBuilder> 
          getHarnessMonitoringInfosFieldBuilder() {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (!(requestCase_ == 1006)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.getDefaultInstance();
          }
          harnessMonitoringInfosBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1006;
        onChanged();;
        return harnessMonitoringInfosBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequestOrBuilder> registerBuilder_;
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
       * @return Whether the register field is set.
       */
      @java.lang.Override
      public boolean hasRegister() {
        return requestCase_ == 1000;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
       * @return The register.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest getRegister() {
        if (registerBuilder_ == null) {
          if (requestCase_ == 1000) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1000) {
            return registerBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
       */
      public Builder setRegister(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest value) {
        if (registerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          registerBuilder_.setMessage(value);
        }
        requestCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
       */
      public Builder setRegister(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.Builder builderForValue) {
        if (registerBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          registerBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
       */
      public Builder mergeRegister(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest value) {
        if (registerBuilder_ == null) {
          if (requestCase_ == 1000 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1000) {
            registerBuilder_.mergeFrom(value);
          } else {
            registerBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
       */
      public Builder clearRegister() {
        if (registerBuilder_ == null) {
          if (requestCase_ == 1000) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1000) {
            requestCase_ = 0;
            request_ = null;
          }
          registerBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.Builder getRegisterBuilder() {
        return getRegisterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequestOrBuilder getRegisterOrBuilder() {
        if ((requestCase_ == 1000) && (registerBuilder_ != null)) {
          return registerBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1000) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterRequest register = 1000;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequestOrBuilder> 
          getRegisterFieldBuilder() {
        if (registerBuilder_ == null) {
          if (!(requestCase_ == 1000)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.getDefaultInstance();
          }
          registerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1000;
        onChanged();;
        return registerBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.InstructionRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.InstructionRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InstructionRequest>
        PARSER = new com.google.protobuf.AbstractParser<InstructionRequest>() {
      @java.lang.Override
      public InstructionRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstructionRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InstructionRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstructionRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstructionResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.InstructionResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A reference provided by the runner which represents a requests
     * execution. The InstructionResponse MUST have the matching id when
     * responding to the runner.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    java.lang.String getInstructionId();
    /**
     * <pre>
     * (Required) A reference provided by the runner which represents a requests
     * execution. The InstructionResponse MUST have the matching id when
     * responding to the runner.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    com.google.protobuf.ByteString
        getInstructionIdBytes();

    /**
     * <pre>
     * If this is specified, then this instruction has failed.
     * A human readable string representing the reason as to why processing has
     * failed.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The error.
     */
    java.lang.String getError();
    /**
     * <pre>
     * If this is specified, then this instruction has failed.
     * A human readable string representing the reason as to why processing has
     * failed.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The bytes for error.
     */
    com.google.protobuf.ByteString
        getErrorBytes();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
     * @return Whether the processBundle field is set.
     */
    boolean hasProcessBundle();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
     * @return The processBundle.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse getProcessBundle();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponseOrBuilder getProcessBundleOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
     * @return Whether the processBundleProgress field is set.
     */
    boolean hasProcessBundleProgress();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
     * @return The processBundleProgress.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse getProcessBundleProgress();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponseOrBuilder getProcessBundleProgressOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
     * @return Whether the processBundleSplit field is set.
     */
    boolean hasProcessBundleSplit();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
     * @return The processBundleSplit.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse getProcessBundleSplit();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponseOrBuilder getProcessBundleSplitOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
     * @return Whether the finalizeBundle field is set.
     */
    boolean hasFinalizeBundle();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
     * @return The finalizeBundle.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse getFinalizeBundle();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponseOrBuilder getFinalizeBundleOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
     * @return Whether the monitoringInfos field is set.
     */
    boolean hasMonitoringInfos();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
     * @return The monitoringInfos.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse getMonitoringInfos();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponseOrBuilder getMonitoringInfosOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
     * @return Whether the harnessMonitoringInfos field is set.
     */
    boolean hasHarnessMonitoringInfos();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
     * @return The harnessMonitoringInfos.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse getHarnessMonitoringInfos();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponseOrBuilder getHarnessMonitoringInfosOrBuilder();

    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
     * @return Whether the register field is set.
     */
    boolean hasRegister();
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
     * @return The register.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse getRegister();
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponseOrBuilder getRegisterOrBuilder();

    public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse.ResponseCase getResponseCase();
  }
  /**
   * <pre>
   * The response for an associated request the SDK had been asked to fulfill.
   * Stable
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.InstructionResponse}
   */
  public static final class InstructionResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.InstructionResponse)
      InstructionResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstructionResponse.newBuilder() to construct.
    private InstructionResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstructionResponse() {
      instructionId_ = "";
      error_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InstructionResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InstructionResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              instructionId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
            case 8002: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.Builder subBuilder = null;
              if (responseCase_ == 1000) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1000;
              break;
            }
            case 8010: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.Builder subBuilder = null;
              if (responseCase_ == 1001) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1001;
              break;
            }
            case 8018: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.Builder subBuilder = null;
              if (responseCase_ == 1002) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1002;
              break;
            }
            case 8026: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.Builder subBuilder = null;
              if (responseCase_ == 1003) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1003;
              break;
            }
            case 8034: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.Builder subBuilder = null;
              if (responseCase_ == 1004) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1004;
              break;
            }
            case 8042: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.Builder subBuilder = null;
              if (responseCase_ == 1005) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1005;
              break;
            }
            case 8050: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.Builder subBuilder = null;
              if (responseCase_ == 1006) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1006;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse.Builder.class);
    }

    private int responseCase_ = 0;
    private java.lang.Object response_;
    public enum ResponseCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      PROCESS_BUNDLE(1001),
      PROCESS_BUNDLE_PROGRESS(1002),
      PROCESS_BUNDLE_SPLIT(1003),
      FINALIZE_BUNDLE(1004),
      MONITORING_INFOS(1005),
      HARNESS_MONITORING_INFOS(1006),
      REGISTER(1000),
      RESPONSE_NOT_SET(0);
      private final int value;
      private ResponseCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ResponseCase valueOf(int value) {
        return forNumber(value);
      }

      public static ResponseCase forNumber(int value) {
        switch (value) {
          case 1001: return PROCESS_BUNDLE;
          case 1002: return PROCESS_BUNDLE_PROGRESS;
          case 1003: return PROCESS_BUNDLE_SPLIT;
          case 1004: return FINALIZE_BUNDLE;
          case 1005: return MONITORING_INFOS;
          case 1006: return HARNESS_MONITORING_INFOS;
          case 1000: return REGISTER;
          case 0: return RESPONSE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ResponseCase
    getResponseCase() {
      return ResponseCase.forNumber(
          responseCase_);
    }

    public static final int INSTRUCTION_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object instructionId_;
    /**
     * <pre>
     * (Required) A reference provided by the runner which represents a requests
     * execution. The InstructionResponse MUST have the matching id when
     * responding to the runner.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    @java.lang.Override
    public java.lang.String getInstructionId() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instructionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A reference provided by the runner which represents a requests
     * execution. The InstructionResponse MUST have the matching id when
     * responding to the runner.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInstructionIdBytes() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instructionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * If this is specified, then this instruction has failed.
     * A human readable string representing the reason as to why processing has
     * failed.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The error.
     */
    @java.lang.Override
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * If this is specified, then this instruction has failed.
     * A human readable string representing the reason as to why processing has
     * failed.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The bytes for error.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PROCESS_BUNDLE_FIELD_NUMBER = 1001;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
     * @return Whether the processBundle field is set.
     */
    @java.lang.Override
    public boolean hasProcessBundle() {
      return responseCase_ == 1001;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
     * @return The processBundle.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse getProcessBundle() {
      if (responseCase_ == 1001) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponseOrBuilder getProcessBundleOrBuilder() {
      if (responseCase_ == 1001) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.getDefaultInstance();
    }

    public static final int PROCESS_BUNDLE_PROGRESS_FIELD_NUMBER = 1002;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
     * @return Whether the processBundleProgress field is set.
     */
    @java.lang.Override
    public boolean hasProcessBundleProgress() {
      return responseCase_ == 1002;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
     * @return The processBundleProgress.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse getProcessBundleProgress() {
      if (responseCase_ == 1002) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponseOrBuilder getProcessBundleProgressOrBuilder() {
      if (responseCase_ == 1002) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.getDefaultInstance();
    }

    public static final int PROCESS_BUNDLE_SPLIT_FIELD_NUMBER = 1003;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
     * @return Whether the processBundleSplit field is set.
     */
    @java.lang.Override
    public boolean hasProcessBundleSplit() {
      return responseCase_ == 1003;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
     * @return The processBundleSplit.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse getProcessBundleSplit() {
      if (responseCase_ == 1003) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponseOrBuilder getProcessBundleSplitOrBuilder() {
      if (responseCase_ == 1003) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.getDefaultInstance();
    }

    public static final int FINALIZE_BUNDLE_FIELD_NUMBER = 1004;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
     * @return Whether the finalizeBundle field is set.
     */
    @java.lang.Override
    public boolean hasFinalizeBundle() {
      return responseCase_ == 1004;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
     * @return The finalizeBundle.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse getFinalizeBundle() {
      if (responseCase_ == 1004) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponseOrBuilder getFinalizeBundleOrBuilder() {
      if (responseCase_ == 1004) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.getDefaultInstance();
    }

    public static final int MONITORING_INFOS_FIELD_NUMBER = 1005;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
     * @return Whether the monitoringInfos field is set.
     */
    @java.lang.Override
    public boolean hasMonitoringInfos() {
      return responseCase_ == 1005;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
     * @return The monitoringInfos.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse getMonitoringInfos() {
      if (responseCase_ == 1005) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponseOrBuilder getMonitoringInfosOrBuilder() {
      if (responseCase_ == 1005) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.getDefaultInstance();
    }

    public static final int HARNESS_MONITORING_INFOS_FIELD_NUMBER = 1006;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
     * @return Whether the harnessMonitoringInfos field is set.
     */
    @java.lang.Override
    public boolean hasHarnessMonitoringInfos() {
      return responseCase_ == 1006;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
     * @return The harnessMonitoringInfos.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse getHarnessMonitoringInfos() {
      if (responseCase_ == 1006) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponseOrBuilder getHarnessMonitoringInfosOrBuilder() {
      if (responseCase_ == 1006) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.getDefaultInstance();
    }

    public static final int REGISTER_FIELD_NUMBER = 1000;
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
     * @return Whether the register field is set.
     */
    @java.lang.Override
    public boolean hasRegister() {
      return responseCase_ == 1000;
    }
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
     * @return The register.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse getRegister() {
      if (responseCase_ == 1000) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.getDefaultInstance();
    }
    /**
     * <pre>
     * DEPRECATED
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponseOrBuilder getRegisterOrBuilder() {
      if (responseCase_ == 1000) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instructionId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, error_);
      }
      if (responseCase_ == 1000) {
        output.writeMessage(1000, (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_);
      }
      if (responseCase_ == 1001) {
        output.writeMessage(1001, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_);
      }
      if (responseCase_ == 1002) {
        output.writeMessage(1002, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_);
      }
      if (responseCase_ == 1003) {
        output.writeMessage(1003, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_);
      }
      if (responseCase_ == 1004) {
        output.writeMessage(1004, (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_);
      }
      if (responseCase_ == 1005) {
        output.writeMessage(1005, (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_);
      }
      if (responseCase_ == 1006) {
        output.writeMessage(1006, (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instructionId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, error_);
      }
      if (responseCase_ == 1000) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1000, (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_);
      }
      if (responseCase_ == 1001) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1001, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_);
      }
      if (responseCase_ == 1002) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1002, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_);
      }
      if (responseCase_ == 1003) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1003, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_);
      }
      if (responseCase_ == 1004) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1004, (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_);
      }
      if (responseCase_ == 1005) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1005, (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_);
      }
      if (responseCase_ == 1006) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1006, (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse) obj;

      if (!getInstructionId()
          .equals(other.getInstructionId())) return false;
      if (!getError()
          .equals(other.getError())) return false;
      if (!getResponseCase().equals(other.getResponseCase())) return false;
      switch (responseCase_) {
        case 1001:
          if (!getProcessBundle()
              .equals(other.getProcessBundle())) return false;
          break;
        case 1002:
          if (!getProcessBundleProgress()
              .equals(other.getProcessBundleProgress())) return false;
          break;
        case 1003:
          if (!getProcessBundleSplit()
              .equals(other.getProcessBundleSplit())) return false;
          break;
        case 1004:
          if (!getFinalizeBundle()
              .equals(other.getFinalizeBundle())) return false;
          break;
        case 1005:
          if (!getMonitoringInfos()
              .equals(other.getMonitoringInfos())) return false;
          break;
        case 1006:
          if (!getHarnessMonitoringInfos()
              .equals(other.getHarnessMonitoringInfos())) return false;
          break;
        case 1000:
          if (!getRegister()
              .equals(other.getRegister())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInstructionId().hashCode();
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      switch (responseCase_) {
        case 1001:
          hash = (37 * hash) + PROCESS_BUNDLE_FIELD_NUMBER;
          hash = (53 * hash) + getProcessBundle().hashCode();
          break;
        case 1002:
          hash = (37 * hash) + PROCESS_BUNDLE_PROGRESS_FIELD_NUMBER;
          hash = (53 * hash) + getProcessBundleProgress().hashCode();
          break;
        case 1003:
          hash = (37 * hash) + PROCESS_BUNDLE_SPLIT_FIELD_NUMBER;
          hash = (53 * hash) + getProcessBundleSplit().hashCode();
          break;
        case 1004:
          hash = (37 * hash) + FINALIZE_BUNDLE_FIELD_NUMBER;
          hash = (53 * hash) + getFinalizeBundle().hashCode();
          break;
        case 1005:
          hash = (37 * hash) + MONITORING_INFOS_FIELD_NUMBER;
          hash = (53 * hash) + getMonitoringInfos().hashCode();
          break;
        case 1006:
          hash = (37 * hash) + HARNESS_MONITORING_INFOS_FIELD_NUMBER;
          hash = (53 * hash) + getHarnessMonitoringInfos().hashCode();
          break;
        case 1000:
          hash = (37 * hash) + REGISTER_FIELD_NUMBER;
          hash = (53 * hash) + getRegister().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The response for an associated request the SDK had been asked to fulfill.
     * Stable
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.InstructionResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.InstructionResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        instructionId_ = "";

        error_ = "";

        responseCase_ = 0;
        response_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse(this);
        result.instructionId_ = instructionId_;
        result.error_ = error_;
        if (responseCase_ == 1001) {
          if (processBundleBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = processBundleBuilder_.build();
          }
        }
        if (responseCase_ == 1002) {
          if (processBundleProgressBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = processBundleProgressBuilder_.build();
          }
        }
        if (responseCase_ == 1003) {
          if (processBundleSplitBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = processBundleSplitBuilder_.build();
          }
        }
        if (responseCase_ == 1004) {
          if (finalizeBundleBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = finalizeBundleBuilder_.build();
          }
        }
        if (responseCase_ == 1005) {
          if (monitoringInfosBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = monitoringInfosBuilder_.build();
          }
        }
        if (responseCase_ == 1006) {
          if (harnessMonitoringInfosBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = harnessMonitoringInfosBuilder_.build();
          }
        }
        if (responseCase_ == 1000) {
          if (registerBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = registerBuilder_.build();
          }
        }
        result.responseCase_ = responseCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse.getDefaultInstance()) return this;
        if (!other.getInstructionId().isEmpty()) {
          instructionId_ = other.instructionId_;
          onChanged();
        }
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        switch (other.getResponseCase()) {
          case PROCESS_BUNDLE: {
            mergeProcessBundle(other.getProcessBundle());
            break;
          }
          case PROCESS_BUNDLE_PROGRESS: {
            mergeProcessBundleProgress(other.getProcessBundleProgress());
            break;
          }
          case PROCESS_BUNDLE_SPLIT: {
            mergeProcessBundleSplit(other.getProcessBundleSplit());
            break;
          }
          case FINALIZE_BUNDLE: {
            mergeFinalizeBundle(other.getFinalizeBundle());
            break;
          }
          case MONITORING_INFOS: {
            mergeMonitoringInfos(other.getMonitoringInfos());
            break;
          }
          case HARNESS_MONITORING_INFOS: {
            mergeHarnessMonitoringInfos(other.getHarnessMonitoringInfos());
            break;
          }
          case REGISTER: {
            mergeRegister(other.getRegister());
            break;
          }
          case RESPONSE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int responseCase_ = 0;
      private java.lang.Object response_;
      public ResponseCase
          getResponseCase() {
        return ResponseCase.forNumber(
            responseCase_);
      }

      public Builder clearResponse() {
        responseCase_ = 0;
        response_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object instructionId_ = "";
      /**
       * <pre>
       * (Required) A reference provided by the runner which represents a requests
       * execution. The InstructionResponse MUST have the matching id when
       * responding to the runner.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The instructionId.
       */
      public java.lang.String getInstructionId() {
        java.lang.Object ref = instructionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instructionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference provided by the runner which represents a requests
       * execution. The InstructionResponse MUST have the matching id when
       * responding to the runner.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The bytes for instructionId.
       */
      public com.google.protobuf.ByteString
          getInstructionIdBytes() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instructionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference provided by the runner which represents a requests
       * execution. The InstructionResponse MUST have the matching id when
       * responding to the runner.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instructionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference provided by the runner which represents a requests
       * execution. The InstructionResponse MUST have the matching id when
       * responding to the runner.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInstructionId() {
        
        instructionId_ = getDefaultInstance().getInstructionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference provided by the runner which represents a requests
       * execution. The InstructionResponse MUST have the matching id when
       * responding to the runner.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The bytes for instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instructionId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * If this is specified, then this instruction has failed.
       * A human readable string representing the reason as to why processing has
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return The error.
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If this is specified, then this instruction has failed.
       * A human readable string representing the reason as to why processing has
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return The bytes for error.
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If this is specified, then this instruction has failed.
       * A human readable string representing the reason as to why processing has
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this is specified, then this instruction has failed.
       * A human readable string representing the reason as to why processing has
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this is specified, then this instruction has failed.
       * A human readable string representing the reason as to why processing has
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @param value The bytes for error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponseOrBuilder> processBundleBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
       * @return Whether the processBundle field is set.
       */
      @java.lang.Override
      public boolean hasProcessBundle() {
        return responseCase_ == 1001;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
       * @return The processBundle.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse getProcessBundle() {
        if (processBundleBuilder_ == null) {
          if (responseCase_ == 1001) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1001) {
            return processBundleBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
       */
      public Builder setProcessBundle(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse value) {
        if (processBundleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          processBundleBuilder_.setMessage(value);
        }
        responseCase_ = 1001;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
       */
      public Builder setProcessBundle(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.Builder builderForValue) {
        if (processBundleBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          processBundleBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1001;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
       */
      public Builder mergeProcessBundle(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse value) {
        if (processBundleBuilder_ == null) {
          if (responseCase_ == 1001 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1001) {
            processBundleBuilder_.mergeFrom(value);
          } else {
            processBundleBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1001;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
       */
      public Builder clearProcessBundle() {
        if (processBundleBuilder_ == null) {
          if (responseCase_ == 1001) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1001) {
            responseCase_ = 0;
            response_ = null;
          }
          processBundleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.Builder getProcessBundleBuilder() {
        return getProcessBundleFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponseOrBuilder getProcessBundleOrBuilder() {
        if ((responseCase_ == 1001) && (processBundleBuilder_ != null)) {
          return processBundleBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1001) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleResponse process_bundle = 1001;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponseOrBuilder> 
          getProcessBundleFieldBuilder() {
        if (processBundleBuilder_ == null) {
          if (!(responseCase_ == 1001)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.getDefaultInstance();
          }
          processBundleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1001;
        onChanged();;
        return processBundleBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponseOrBuilder> processBundleProgressBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
       * @return Whether the processBundleProgress field is set.
       */
      @java.lang.Override
      public boolean hasProcessBundleProgress() {
        return responseCase_ == 1002;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
       * @return The processBundleProgress.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse getProcessBundleProgress() {
        if (processBundleProgressBuilder_ == null) {
          if (responseCase_ == 1002) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1002) {
            return processBundleProgressBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
       */
      public Builder setProcessBundleProgress(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse value) {
        if (processBundleProgressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          processBundleProgressBuilder_.setMessage(value);
        }
        responseCase_ = 1002;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
       */
      public Builder setProcessBundleProgress(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.Builder builderForValue) {
        if (processBundleProgressBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          processBundleProgressBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1002;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
       */
      public Builder mergeProcessBundleProgress(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse value) {
        if (processBundleProgressBuilder_ == null) {
          if (responseCase_ == 1002 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1002) {
            processBundleProgressBuilder_.mergeFrom(value);
          } else {
            processBundleProgressBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1002;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
       */
      public Builder clearProcessBundleProgress() {
        if (processBundleProgressBuilder_ == null) {
          if (responseCase_ == 1002) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1002) {
            responseCase_ = 0;
            response_ = null;
          }
          processBundleProgressBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.Builder getProcessBundleProgressBuilder() {
        return getProcessBundleProgressFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponseOrBuilder getProcessBundleProgressOrBuilder() {
        if ((responseCase_ == 1002) && (processBundleProgressBuilder_ != null)) {
          return processBundleProgressBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1002) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse process_bundle_progress = 1002;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponseOrBuilder> 
          getProcessBundleProgressFieldBuilder() {
        if (processBundleProgressBuilder_ == null) {
          if (!(responseCase_ == 1002)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.getDefaultInstance();
          }
          processBundleProgressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1002;
        onChanged();;
        return processBundleProgressBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponseOrBuilder> processBundleSplitBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
       * @return Whether the processBundleSplit field is set.
       */
      @java.lang.Override
      public boolean hasProcessBundleSplit() {
        return responseCase_ == 1003;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
       * @return The processBundleSplit.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse getProcessBundleSplit() {
        if (processBundleSplitBuilder_ == null) {
          if (responseCase_ == 1003) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1003) {
            return processBundleSplitBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
       */
      public Builder setProcessBundleSplit(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse value) {
        if (processBundleSplitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          processBundleSplitBuilder_.setMessage(value);
        }
        responseCase_ = 1003;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
       */
      public Builder setProcessBundleSplit(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.Builder builderForValue) {
        if (processBundleSplitBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          processBundleSplitBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1003;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
       */
      public Builder mergeProcessBundleSplit(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse value) {
        if (processBundleSplitBuilder_ == null) {
          if (responseCase_ == 1003 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1003) {
            processBundleSplitBuilder_.mergeFrom(value);
          } else {
            processBundleSplitBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1003;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
       */
      public Builder clearProcessBundleSplit() {
        if (processBundleSplitBuilder_ == null) {
          if (responseCase_ == 1003) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1003) {
            responseCase_ = 0;
            response_ = null;
          }
          processBundleSplitBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.Builder getProcessBundleSplitBuilder() {
        return getProcessBundleSplitFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponseOrBuilder getProcessBundleSplitOrBuilder() {
        if ((responseCase_ == 1003) && (processBundleSplitBuilder_ != null)) {
          return processBundleSplitBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1003) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse process_bundle_split = 1003;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponseOrBuilder> 
          getProcessBundleSplitFieldBuilder() {
        if (processBundleSplitBuilder_ == null) {
          if (!(responseCase_ == 1003)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.getDefaultInstance();
          }
          processBundleSplitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1003;
        onChanged();;
        return processBundleSplitBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponseOrBuilder> finalizeBundleBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
       * @return Whether the finalizeBundle field is set.
       */
      @java.lang.Override
      public boolean hasFinalizeBundle() {
        return responseCase_ == 1004;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
       * @return The finalizeBundle.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse getFinalizeBundle() {
        if (finalizeBundleBuilder_ == null) {
          if (responseCase_ == 1004) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1004) {
            return finalizeBundleBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
       */
      public Builder setFinalizeBundle(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse value) {
        if (finalizeBundleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          finalizeBundleBuilder_.setMessage(value);
        }
        responseCase_ = 1004;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
       */
      public Builder setFinalizeBundle(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.Builder builderForValue) {
        if (finalizeBundleBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          finalizeBundleBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1004;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
       */
      public Builder mergeFinalizeBundle(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse value) {
        if (finalizeBundleBuilder_ == null) {
          if (responseCase_ == 1004 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1004) {
            finalizeBundleBuilder_.mergeFrom(value);
          } else {
            finalizeBundleBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1004;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
       */
      public Builder clearFinalizeBundle() {
        if (finalizeBundleBuilder_ == null) {
          if (responseCase_ == 1004) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1004) {
            responseCase_ = 0;
            response_ = null;
          }
          finalizeBundleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.Builder getFinalizeBundleBuilder() {
        return getFinalizeBundleFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponseOrBuilder getFinalizeBundleOrBuilder() {
        if ((responseCase_ == 1004) && (finalizeBundleBuilder_ != null)) {
          return finalizeBundleBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1004) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse finalize_bundle = 1004;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponseOrBuilder> 
          getFinalizeBundleFieldBuilder() {
        if (finalizeBundleBuilder_ == null) {
          if (!(responseCase_ == 1004)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.getDefaultInstance();
          }
          finalizeBundleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1004;
        onChanged();;
        return finalizeBundleBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponseOrBuilder> monitoringInfosBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
       * @return Whether the monitoringInfos field is set.
       */
      @java.lang.Override
      public boolean hasMonitoringInfos() {
        return responseCase_ == 1005;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
       * @return The monitoringInfos.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse getMonitoringInfos() {
        if (monitoringInfosBuilder_ == null) {
          if (responseCase_ == 1005) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1005) {
            return monitoringInfosBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
       */
      public Builder setMonitoringInfos(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse value) {
        if (monitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          monitoringInfosBuilder_.setMessage(value);
        }
        responseCase_ = 1005;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
       */
      public Builder setMonitoringInfos(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.Builder builderForValue) {
        if (monitoringInfosBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          monitoringInfosBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1005;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
       */
      public Builder mergeMonitoringInfos(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse value) {
        if (monitoringInfosBuilder_ == null) {
          if (responseCase_ == 1005 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1005) {
            monitoringInfosBuilder_.mergeFrom(value);
          } else {
            monitoringInfosBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1005;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
       */
      public Builder clearMonitoringInfos() {
        if (monitoringInfosBuilder_ == null) {
          if (responseCase_ == 1005) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1005) {
            responseCase_ = 0;
            response_ = null;
          }
          monitoringInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.Builder getMonitoringInfosBuilder() {
        return getMonitoringInfosFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponseOrBuilder getMonitoringInfosOrBuilder() {
        if ((responseCase_ == 1005) && (monitoringInfosBuilder_ != null)) {
          return monitoringInfosBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1005) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse monitoring_infos = 1005;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponseOrBuilder> 
          getMonitoringInfosFieldBuilder() {
        if (monitoringInfosBuilder_ == null) {
          if (!(responseCase_ == 1005)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.getDefaultInstance();
          }
          monitoringInfosBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1005;
        onChanged();;
        return monitoringInfosBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponseOrBuilder> harnessMonitoringInfosBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
       * @return Whether the harnessMonitoringInfos field is set.
       */
      @java.lang.Override
      public boolean hasHarnessMonitoringInfos() {
        return responseCase_ == 1006;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
       * @return The harnessMonitoringInfos.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse getHarnessMonitoringInfos() {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (responseCase_ == 1006) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1006) {
            return harnessMonitoringInfosBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
       */
      public Builder setHarnessMonitoringInfos(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse value) {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          harnessMonitoringInfosBuilder_.setMessage(value);
        }
        responseCase_ = 1006;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
       */
      public Builder setHarnessMonitoringInfos(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.Builder builderForValue) {
        if (harnessMonitoringInfosBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          harnessMonitoringInfosBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1006;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
       */
      public Builder mergeHarnessMonitoringInfos(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse value) {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (responseCase_ == 1006 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1006) {
            harnessMonitoringInfosBuilder_.mergeFrom(value);
          } else {
            harnessMonitoringInfosBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1006;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
       */
      public Builder clearHarnessMonitoringInfos() {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (responseCase_ == 1006) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1006) {
            responseCase_ = 0;
            response_ = null;
          }
          harnessMonitoringInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.Builder getHarnessMonitoringInfosBuilder() {
        return getHarnessMonitoringInfosFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponseOrBuilder getHarnessMonitoringInfosOrBuilder() {
        if ((responseCase_ == 1006) && (harnessMonitoringInfosBuilder_ != null)) {
          return harnessMonitoringInfosBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1006) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse harness_monitoring_infos = 1006;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponseOrBuilder> 
          getHarnessMonitoringInfosFieldBuilder() {
        if (harnessMonitoringInfosBuilder_ == null) {
          if (!(responseCase_ == 1006)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.getDefaultInstance();
          }
          harnessMonitoringInfosBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1006;
        onChanged();;
        return harnessMonitoringInfosBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponseOrBuilder> registerBuilder_;
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
       * @return Whether the register field is set.
       */
      @java.lang.Override
      public boolean hasRegister() {
        return responseCase_ == 1000;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
       * @return The register.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse getRegister() {
        if (registerBuilder_ == null) {
          if (responseCase_ == 1000) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1000) {
            return registerBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
       */
      public Builder setRegister(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse value) {
        if (registerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          registerBuilder_.setMessage(value);
        }
        responseCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
       */
      public Builder setRegister(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.Builder builderForValue) {
        if (registerBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          registerBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
       */
      public Builder mergeRegister(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse value) {
        if (registerBuilder_ == null) {
          if (responseCase_ == 1000 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1000) {
            registerBuilder_.mergeFrom(value);
          } else {
            registerBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
       */
      public Builder clearRegister() {
        if (registerBuilder_ == null) {
          if (responseCase_ == 1000) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1000) {
            responseCase_ = 0;
            response_ = null;
          }
          registerBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.Builder getRegisterBuilder() {
        return getRegisterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponseOrBuilder getRegisterOrBuilder() {
        if ((responseCase_ == 1000) && (registerBuilder_ != null)) {
          return registerBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1000) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * DEPRECATED
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.RegisterResponse register = 1000;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponseOrBuilder> 
          getRegisterFieldBuilder() {
        if (registerBuilder_ == null) {
          if (!(responseCase_ == 1000)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.getDefaultInstance();
          }
          registerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1000;
        onChanged();;
        return registerBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.InstructionResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.InstructionResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InstructionResponse>
        PARSER = new com.google.protobuf.AbstractParser<InstructionResponse>() {
      @java.lang.Override
      public InstructionResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstructionResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InstructionResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstructionResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.InstructionResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HarnessMonitoringInfosRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * A request to provide full MonitoringInfo associated with the entire SDK
   * harness process, not specific to a bundle.
   * An SDK can report metrics using an identifier that only contains the
   * associated payload. A runner who wants to receive the full metrics
   * information can request all the monitoring metadata via a
   * MonitoringInfosMetadataRequest providing a list of ids as necessary.
   * The SDK is allowed to reuse the identifiers
   * for the lifetime of the associated control connection as long
   * as the MonitoringInfo could be reconstructed fully by overwriting its
   * payload field with the bytes specified here.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest}
   */
  public static final class HarnessMonitoringInfosRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest)
      HarnessMonitoringInfosRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HarnessMonitoringInfosRequest.newBuilder() to construct.
    private HarnessMonitoringInfosRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HarnessMonitoringInfosRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HarnessMonitoringInfosRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HarnessMonitoringInfosRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A request to provide full MonitoringInfo associated with the entire SDK
     * harness process, not specific to a bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HarnessMonitoringInfosRequest>
        PARSER = new com.google.protobuf.AbstractParser<HarnessMonitoringInfosRequest>() {
      @java.lang.Override
      public HarnessMonitoringInfosRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HarnessMonitoringInfosRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HarnessMonitoringInfosRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HarnessMonitoringInfosRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HarnessMonitoringInfosResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping containing
     * Metrics associated with the SDK harness, not a specific bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
     */
    int getMonitoringDataCount();
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping containing
     * Metrics associated with the SDK harness, not a specific bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
     */
    boolean containsMonitoringData(
        java.lang.String key);
    /**
     * Use {@link #getMonitoringDataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMonitoringData();
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping containing
     * Metrics associated with the SDK harness, not a specific bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMonitoringDataMap();
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping containing
     * Metrics associated with the SDK harness, not a specific bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
     */

    /* nullable */
com.google.protobuf.ByteString getMonitoringDataOrDefault(
        java.lang.String key,
        /* nullable */
com.google.protobuf.ByteString defaultValue);
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping containing
     * Metrics associated with the SDK harness, not a specific bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
     */

    com.google.protobuf.ByteString getMonitoringDataOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse}
   */
  public static final class HarnessMonitoringInfosResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse)
      HarnessMonitoringInfosResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HarnessMonitoringInfosResponse.newBuilder() to construct.
    private HarnessMonitoringInfosResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HarnessMonitoringInfosResponse() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HarnessMonitoringInfosResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HarnessMonitoringInfosResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                monitoringData_ = com.google.protobuf.MapField.newMapField(
                    MonitoringDataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ByteString>
              monitoringData__ = input.readMessage(
                  MonitoringDataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              monitoringData_.getMutableMap().put(
                  monitoringData__.getKey(), monitoringData__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMonitoringData();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.Builder.class);
    }

    public static final int MONITORING_DATA_FIELD_NUMBER = 1;
    private static final class MonitoringDataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_MonitoringDataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapField<
        java.lang.String, com.google.protobuf.ByteString> monitoringData_;
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
    internalGetMonitoringData() {
      if (monitoringData_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MonitoringDataDefaultEntryHolder.defaultEntry);
      }
      return monitoringData_;
    }

    public int getMonitoringDataCount() {
      return internalGetMonitoringData().getMap().size();
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping containing
     * Metrics associated with the SDK harness, not a specific bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
     */

    @java.lang.Override
    public boolean containsMonitoringData(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetMonitoringData().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMonitoringDataMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringData() {
      return getMonitoringDataMap();
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping containing
     * Metrics associated with the SDK harness, not a specific bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringDataMap() {
      return internalGetMonitoringData().getMap();
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping containing
     * Metrics associated with the SDK harness, not a specific bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMonitoringDataOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetMonitoringData().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping containing
     * Metrics associated with the SDK harness, not a specific bundle.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMonitoringDataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetMonitoringData().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMonitoringData(),
          MonitoringDataDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, com.google.protobuf.ByteString> entry
           : internalGetMonitoringData().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ByteString>
        monitoringData__ = MonitoringDataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, monitoringData__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) obj;

      if (!internalGetMonitoringData().equals(
          other.internalGetMonitoringData())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetMonitoringData().getMap().isEmpty()) {
        hash = (37 * hash) + MONITORING_DATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMonitoringData().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMonitoringData();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableMonitoringData();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableMonitoringData().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse(this);
        int from_bitField0_ = bitField0_;
        result.monitoringData_ = internalGetMonitoringData();
        result.monitoringData_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse.getDefaultInstance()) return this;
        internalGetMutableMonitoringData().mergeFrom(
            other.internalGetMonitoringData());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, com.google.protobuf.ByteString> monitoringData_;
      private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
      internalGetMonitoringData() {
        if (monitoringData_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MonitoringDataDefaultEntryHolder.defaultEntry);
        }
        return monitoringData_;
      }
      private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
      internalGetMutableMonitoringData() {
        onChanged();;
        if (monitoringData_ == null) {
          monitoringData_ = com.google.protobuf.MapField.newMapField(
              MonitoringDataDefaultEntryHolder.defaultEntry);
        }
        if (!monitoringData_.isMutable()) {
          monitoringData_ = monitoringData_.copy();
        }
        return monitoringData_;
      }

      public int getMonitoringDataCount() {
        return internalGetMonitoringData().getMap().size();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping containing
       * Metrics associated with the SDK harness, not a specific bundle.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
       */

      @java.lang.Override
      public boolean containsMonitoringData(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetMonitoringData().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMonitoringDataMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringData() {
        return getMonitoringDataMap();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping containing
       * Metrics associated with the SDK harness, not a specific bundle.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringDataMap() {
        return internalGetMonitoringData().getMap();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping containing
       * Metrics associated with the SDK harness, not a specific bundle.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMonitoringDataOrDefault(
          java.lang.String key,
          com.google.protobuf.ByteString defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            internalGetMonitoringData().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping containing
       * Metrics associated with the SDK harness, not a specific bundle.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMonitoringDataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            internalGetMonitoringData().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMonitoringData() {
        internalGetMutableMonitoringData().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping containing
       * Metrics associated with the SDK harness, not a specific bundle.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
       */

      public Builder removeMonitoringData(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableMonitoringData().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString>
      getMutableMonitoringData() {
        return internalGetMutableMonitoringData().getMutableMap();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping containing
       * Metrics associated with the SDK harness, not a specific bundle.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
       */
      public Builder putMonitoringData(
          java.lang.String key,
          com.google.protobuf.ByteString value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableMonitoringData().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping containing
       * Metrics associated with the SDK harness, not a specific bundle.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 1;</code>
       */

      public Builder putAllMonitoringData(
          java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
        internalGetMutableMonitoringData().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.HarnessMonitoringInfosResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HarnessMonitoringInfosResponse>
        PARSER = new com.google.protobuf.AbstractParser<HarnessMonitoringInfosResponse>() {
      @java.lang.Override
      public HarnessMonitoringInfosResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HarnessMonitoringInfosResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HarnessMonitoringInfosResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HarnessMonitoringInfosResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.HarnessMonitoringInfosResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RegisterRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.RegisterRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor> 
        getProcessBundleDescriptorList();
    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor getProcessBundleDescriptor(int index);
    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    int getProcessBundleDescriptorCount();
    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder> 
        getProcessBundleDescriptorOrBuilderList();
    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder getProcessBundleDescriptorOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A list of objects which can be referred to by the runner in
   * future requests.
   * Stable
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.RegisterRequest}
   */
  public static final class RegisterRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.RegisterRequest)
      RegisterRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RegisterRequest.newBuilder() to construct.
    private RegisterRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RegisterRequest() {
      processBundleDescriptor_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RegisterRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RegisterRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                processBundleDescriptor_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor>();
                mutable_bitField0_ |= 0x00000001;
              }
              processBundleDescriptor_.add(
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          processBundleDescriptor_ = java.util.Collections.unmodifiableList(processBundleDescriptor_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.Builder.class);
    }

    public static final int PROCESS_BUNDLE_DESCRIPTOR_FIELD_NUMBER = 1;
    private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor> processBundleDescriptor_;
    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor> getProcessBundleDescriptorList() {
      return processBundleDescriptor_;
    }
    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder> 
        getProcessBundleDescriptorOrBuilderList() {
      return processBundleDescriptor_;
    }
    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    @java.lang.Override
    public int getProcessBundleDescriptorCount() {
      return processBundleDescriptor_.size();
    }
    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor getProcessBundleDescriptor(int index) {
      return processBundleDescriptor_.get(index);
    }
    /**
     * <pre>
     * (Optional) The set of descriptors used to process bundles.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder getProcessBundleDescriptorOrBuilder(
        int index) {
      return processBundleDescriptor_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < processBundleDescriptor_.size(); i++) {
        output.writeMessage(1, processBundleDescriptor_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < processBundleDescriptor_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, processBundleDescriptor_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) obj;

      if (!getProcessBundleDescriptorList()
          .equals(other.getProcessBundleDescriptorList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getProcessBundleDescriptorCount() > 0) {
        hash = (37 * hash) + PROCESS_BUNDLE_DESCRIPTOR_FIELD_NUMBER;
        hash = (53 * hash) + getProcessBundleDescriptorList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A list of objects which can be referred to by the runner in
     * future requests.
     * Stable
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.RegisterRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.RegisterRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getProcessBundleDescriptorFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (processBundleDescriptorBuilder_ == null) {
          processBundleDescriptor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          processBundleDescriptorBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest(this);
        int from_bitField0_ = bitField0_;
        if (processBundleDescriptorBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            processBundleDescriptor_ = java.util.Collections.unmodifiableList(processBundleDescriptor_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.processBundleDescriptor_ = processBundleDescriptor_;
        } else {
          result.processBundleDescriptor_ = processBundleDescriptorBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest.getDefaultInstance()) return this;
        if (processBundleDescriptorBuilder_ == null) {
          if (!other.processBundleDescriptor_.isEmpty()) {
            if (processBundleDescriptor_.isEmpty()) {
              processBundleDescriptor_ = other.processBundleDescriptor_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureProcessBundleDescriptorIsMutable();
              processBundleDescriptor_.addAll(other.processBundleDescriptor_);
            }
            onChanged();
          }
        } else {
          if (!other.processBundleDescriptor_.isEmpty()) {
            if (processBundleDescriptorBuilder_.isEmpty()) {
              processBundleDescriptorBuilder_.dispose();
              processBundleDescriptorBuilder_ = null;
              processBundleDescriptor_ = other.processBundleDescriptor_;
              bitField0_ = (bitField0_ & ~0x00000001);
              processBundleDescriptorBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getProcessBundleDescriptorFieldBuilder() : null;
            } else {
              processBundleDescriptorBuilder_.addAllMessages(other.processBundleDescriptor_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor> processBundleDescriptor_ =
        java.util.Collections.emptyList();
      private void ensureProcessBundleDescriptorIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          processBundleDescriptor_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor>(processBundleDescriptor_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder> processBundleDescriptorBuilder_;

      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor> getProcessBundleDescriptorList() {
        if (processBundleDescriptorBuilder_ == null) {
          return java.util.Collections.unmodifiableList(processBundleDescriptor_);
        } else {
          return processBundleDescriptorBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public int getProcessBundleDescriptorCount() {
        if (processBundleDescriptorBuilder_ == null) {
          return processBundleDescriptor_.size();
        } else {
          return processBundleDescriptorBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor getProcessBundleDescriptor(int index) {
        if (processBundleDescriptorBuilder_ == null) {
          return processBundleDescriptor_.get(index);
        } else {
          return processBundleDescriptorBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public Builder setProcessBundleDescriptor(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor value) {
        if (processBundleDescriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProcessBundleDescriptorIsMutable();
          processBundleDescriptor_.set(index, value);
          onChanged();
        } else {
          processBundleDescriptorBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public Builder setProcessBundleDescriptor(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder builderForValue) {
        if (processBundleDescriptorBuilder_ == null) {
          ensureProcessBundleDescriptorIsMutable();
          processBundleDescriptor_.set(index, builderForValue.build());
          onChanged();
        } else {
          processBundleDescriptorBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public Builder addProcessBundleDescriptor(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor value) {
        if (processBundleDescriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProcessBundleDescriptorIsMutable();
          processBundleDescriptor_.add(value);
          onChanged();
        } else {
          processBundleDescriptorBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public Builder addProcessBundleDescriptor(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor value) {
        if (processBundleDescriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProcessBundleDescriptorIsMutable();
          processBundleDescriptor_.add(index, value);
          onChanged();
        } else {
          processBundleDescriptorBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public Builder addProcessBundleDescriptor(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder builderForValue) {
        if (processBundleDescriptorBuilder_ == null) {
          ensureProcessBundleDescriptorIsMutable();
          processBundleDescriptor_.add(builderForValue.build());
          onChanged();
        } else {
          processBundleDescriptorBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public Builder addProcessBundleDescriptor(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder builderForValue) {
        if (processBundleDescriptorBuilder_ == null) {
          ensureProcessBundleDescriptorIsMutable();
          processBundleDescriptor_.add(index, builderForValue.build());
          onChanged();
        } else {
          processBundleDescriptorBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public Builder addAllProcessBundleDescriptor(
          java.lang.Iterable<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor> values) {
        if (processBundleDescriptorBuilder_ == null) {
          ensureProcessBundleDescriptorIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, processBundleDescriptor_);
          onChanged();
        } else {
          processBundleDescriptorBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public Builder clearProcessBundleDescriptor() {
        if (processBundleDescriptorBuilder_ == null) {
          processBundleDescriptor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          processBundleDescriptorBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public Builder removeProcessBundleDescriptor(int index) {
        if (processBundleDescriptorBuilder_ == null) {
          ensureProcessBundleDescriptorIsMutable();
          processBundleDescriptor_.remove(index);
          onChanged();
        } else {
          processBundleDescriptorBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder getProcessBundleDescriptorBuilder(
          int index) {
        return getProcessBundleDescriptorFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder getProcessBundleDescriptorOrBuilder(
          int index) {
        if (processBundleDescriptorBuilder_ == null) {
          return processBundleDescriptor_.get(index);  } else {
          return processBundleDescriptorBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder> 
           getProcessBundleDescriptorOrBuilderList() {
        if (processBundleDescriptorBuilder_ != null) {
          return processBundleDescriptorBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(processBundleDescriptor_);
        }
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder addProcessBundleDescriptorBuilder() {
        return getProcessBundleDescriptorFieldBuilder().addBuilder(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder addProcessBundleDescriptorBuilder(
          int index) {
        return getProcessBundleDescriptorFieldBuilder().addBuilder(
            index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) The set of descriptors used to process bundles.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor process_bundle_descriptor = 1;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder> 
           getProcessBundleDescriptorBuilderList() {
        return getProcessBundleDescriptorFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder> 
          getProcessBundleDescriptorFieldBuilder() {
        if (processBundleDescriptorBuilder_ == null) {
          processBundleDescriptorBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder>(
                  processBundleDescriptor_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          processBundleDescriptor_ = null;
        }
        return processBundleDescriptorBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.RegisterRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.RegisterRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RegisterRequest>
        PARSER = new com.google.protobuf.AbstractParser<RegisterRequest>() {
      @java.lang.Override
      public RegisterRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegisterRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RegisterRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RegisterRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RegisterResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.RegisterResponse)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * Stable
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.RegisterResponse}
   */
  public static final class RegisterResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.RegisterResponse)
      RegisterResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RegisterResponse.newBuilder() to construct.
    private RegisterResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RegisterResponse() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RegisterResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RegisterResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Stable
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.RegisterResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.RegisterResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.RegisterResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.RegisterResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RegisterResponse>
        PARSER = new com.google.protobuf.AbstractParser<RegisterResponse>() {
      @java.lang.Override
      public RegisterResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegisterResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RegisterResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RegisterResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.RegisterResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProcessBundleDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A pipeline level unique id which can be used as a reference to
     * refer to this.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * (Required) A pipeline level unique id which can be used as a reference to
     * refer to this.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PTransform.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
     */
    int getTransformsCount();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PTransform.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
     */
    boolean containsTransforms(
        java.lang.String key);
    /**
     * Use {@link #getTransformsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform>
    getTransforms();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PTransform.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
     */
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform>
    getTransformsMap();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PTransform.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
     */

    /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransformsOrDefault(
        java.lang.String key,
        /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.PTransform defaultValue);
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PTransform.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
     */

    org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransformsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PCollection.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
     */
    int getPcollectionsCount();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PCollection.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
     */
    boolean containsPcollections(
        java.lang.String key);
    /**
     * Use {@link #getPcollectionsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection>
    getPcollections();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PCollection.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
     */
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection>
    getPcollectionsMap();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PCollection.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
     */

    /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.PCollection getPcollectionsOrDefault(
        java.lang.String key,
        /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.PCollection defaultValue);
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PCollection.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
     */

    org.apache.beam.model.pipeline.v1.RunnerApi.PCollection getPcollectionsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to WindowingStrategy.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
     */
    int getWindowingStrategiesCount();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to WindowingStrategy.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
     */
    boolean containsWindowingStrategies(
        java.lang.String key);
    /**
     * Use {@link #getWindowingStrategiesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy>
    getWindowingStrategies();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to WindowingStrategy.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
     */
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy>
    getWindowingStrategiesMap();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to WindowingStrategy.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
     */

    /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy getWindowingStrategiesOrDefault(
        java.lang.String key,
        /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy defaultValue);
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to WindowingStrategy.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
     */

    org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy getWindowingStrategiesOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Coder.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
     */
    int getCodersCount();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Coder.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
     */
    boolean containsCoders(
        java.lang.String key);
    /**
     * Use {@link #getCodersMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder>
    getCoders();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Coder.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
     */
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder>
    getCodersMap();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Coder.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
     */

    /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.Coder getCodersOrDefault(
        java.lang.String key,
        /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.Coder defaultValue);
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Coder.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
     */

    org.apache.beam.model.pipeline.v1.RunnerApi.Coder getCodersOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Environment.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
     */
    int getEnvironmentsCount();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Environment.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
     */
    boolean containsEnvironments(
        java.lang.String key);
    /**
     * Use {@link #getEnvironmentsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment>
    getEnvironments();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Environment.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
     */
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment>
    getEnvironmentsMap();
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Environment.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
     */

    /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.Environment getEnvironmentsOrDefault(
        java.lang.String key,
        /* nullable */
org.apache.beam.model.pipeline.v1.RunnerApi.Environment defaultValue);
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Environment.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
     */

    org.apache.beam.model.pipeline.v1.RunnerApi.Environment getEnvironmentsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * A descriptor describing the end point to use for State API
     * calls. Required if the Runner intends to send remote references over the
     * data plane or if any of the transforms rely on user state or side inputs.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
     * @return Whether the stateApiServiceDescriptor field is set.
     */
    boolean hasStateApiServiceDescriptor();
    /**
     * <pre>
     * A descriptor describing the end point to use for State API
     * calls. Required if the Runner intends to send remote references over the
     * data plane or if any of the transforms rely on user state or side inputs.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
     * @return The stateApiServiceDescriptor.
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getStateApiServiceDescriptor();
    /**
     * <pre>
     * A descriptor describing the end point to use for State API
     * calls. Required if the Runner intends to send remote references over the
     * data plane or if any of the transforms rely on user state or side inputs.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getStateApiServiceDescriptorOrBuilder();

    /**
     * <pre>
     * A descriptor describing the end point to use for Data API for user timers.
     * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
     * @return Whether the timerApiServiceDescriptor field is set.
     */
    boolean hasTimerApiServiceDescriptor();
    /**
     * <pre>
     * A descriptor describing the end point to use for Data API for user timers.
     * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
     * @return The timerApiServiceDescriptor.
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getTimerApiServiceDescriptor();
    /**
     * <pre>
     * A descriptor describing the end point to use for Data API for user timers.
     * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getTimerApiServiceDescriptorOrBuilder();
  }
  /**
   * <pre>
   * Definitions that should be used to construct the bundle processing graph.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor}
   */
  public static final class ProcessBundleDescriptor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor)
      ProcessBundleDescriptorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessBundleDescriptor.newBuilder() to construct.
    private ProcessBundleDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessBundleDescriptor() {
      id_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProcessBundleDescriptor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProcessBundleDescriptor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                transforms_ = com.google.protobuf.MapField.newMapField(
                    TransformsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform>
              transforms__ = input.readMessage(
                  TransformsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              transforms_.getMutableMap().put(
                  transforms__.getKey(), transforms__.getValue());
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                pcollections_ = com.google.protobuf.MapField.newMapField(
                    PcollectionsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection>
              pcollections__ = input.readMessage(
                  PcollectionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              pcollections_.getMutableMap().put(
                  pcollections__.getKey(), pcollections__.getValue());
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                windowingStrategies_ = com.google.protobuf.MapField.newMapField(
                    WindowingStrategiesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy>
              windowingStrategies__ = input.readMessage(
                  WindowingStrategiesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              windowingStrategies_.getMutableMap().put(
                  windowingStrategies__.getKey(), windowingStrategies__.getValue());
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                coders_ = com.google.protobuf.MapField.newMapField(
                    CodersDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000008;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder>
              coders__ = input.readMessage(
                  CodersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              coders_.getMutableMap().put(
                  coders__.getKey(), coders__.getValue());
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000010) != 0)) {
                environments_ = com.google.protobuf.MapField.newMapField(
                    EnvironmentsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000010;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment>
              environments__ = input.readMessage(
                  EnvironmentsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              environments_.getMutableMap().put(
                  environments__.getKey(), environments__.getValue());
              break;
            }
            case 58: {
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder subBuilder = null;
              if (stateApiServiceDescriptor_ != null) {
                subBuilder = stateApiServiceDescriptor_.toBuilder();
              }
              stateApiServiceDescriptor_ = input.readMessage(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stateApiServiceDescriptor_);
                stateApiServiceDescriptor_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder subBuilder = null;
              if (timerApiServiceDescriptor_ != null) {
                subBuilder = timerApiServiceDescriptor_.toBuilder();
              }
              timerApiServiceDescriptor_ = input.readMessage(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timerApiServiceDescriptor_);
                timerApiServiceDescriptor_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetTransforms();
        case 3:
          return internalGetPcollections();
        case 4:
          return internalGetWindowingStrategies();
        case 5:
          return internalGetCoders();
        case 6:
          return internalGetEnvironments();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * (Required) A pipeline level unique id which can be used as a reference to
     * refer to this.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A pipeline level unique id which can be used as a reference to
     * refer to this.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRANSFORMS_FIELD_NUMBER = 2;
    private static final class TransformsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_TransformsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> transforms_;
    private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform>
    internalGetTransforms() {
      if (transforms_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TransformsDefaultEntryHolder.defaultEntry);
      }
      return transforms_;
    }

    public int getTransformsCount() {
      return internalGetTransforms().getMap().size();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PTransform.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
     */

    @java.lang.Override
    public boolean containsTransforms(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetTransforms().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTransformsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> getTransforms() {
      return getTransformsMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PTransform.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> getTransformsMap() {
      return internalGetTransforms().getMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PTransform.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransformsOrDefault(
        java.lang.String key,
        org.apache.beam.model.pipeline.v1.RunnerApi.PTransform defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> map =
          internalGetTransforms().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PTransform.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransformsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> map =
          internalGetTransforms().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int PCOLLECTIONS_FIELD_NUMBER = 3;
    private static final class PcollectionsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_PcollectionsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.apache.beam.model.pipeline.v1.RunnerApi.PCollection.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> pcollections_;
    private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection>
    internalGetPcollections() {
      if (pcollections_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            PcollectionsDefaultEntryHolder.defaultEntry);
      }
      return pcollections_;
    }

    public int getPcollectionsCount() {
      return internalGetPcollections().getMap().size();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PCollection.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
     */

    @java.lang.Override
    public boolean containsPcollections(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetPcollections().getMap().containsKey(key);
    }
    /**
     * Use {@link #getPcollectionsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> getPcollections() {
      return getPcollectionsMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PCollection.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> getPcollectionsMap() {
      return internalGetPcollections().getMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PCollection.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.PCollection getPcollectionsOrDefault(
        java.lang.String key,
        org.apache.beam.model.pipeline.v1.RunnerApi.PCollection defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> map =
          internalGetPcollections().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to PCollection.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.PCollection getPcollectionsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> map =
          internalGetPcollections().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int WINDOWING_STRATEGIES_FIELD_NUMBER = 4;
    private static final class WindowingStrategiesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_WindowingStrategiesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> windowingStrategies_;
    private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy>
    internalGetWindowingStrategies() {
      if (windowingStrategies_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            WindowingStrategiesDefaultEntryHolder.defaultEntry);
      }
      return windowingStrategies_;
    }

    public int getWindowingStrategiesCount() {
      return internalGetWindowingStrategies().getMap().size();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to WindowingStrategy.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
     */

    @java.lang.Override
    public boolean containsWindowingStrategies(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetWindowingStrategies().getMap().containsKey(key);
    }
    /**
     * Use {@link #getWindowingStrategiesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> getWindowingStrategies() {
      return getWindowingStrategiesMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to WindowingStrategy.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> getWindowingStrategiesMap() {
      return internalGetWindowingStrategies().getMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to WindowingStrategy.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy getWindowingStrategiesOrDefault(
        java.lang.String key,
        org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> map =
          internalGetWindowingStrategies().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to WindowingStrategy.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy getWindowingStrategiesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> map =
          internalGetWindowingStrategies().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int CODERS_FIELD_NUMBER = 5;
    private static final class CodersDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_CodersEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.apache.beam.model.pipeline.v1.RunnerApi.Coder.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> coders_;
    private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder>
    internalGetCoders() {
      if (coders_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            CodersDefaultEntryHolder.defaultEntry);
      }
      return coders_;
    }

    public int getCodersCount() {
      return internalGetCoders().getMap().size();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Coder.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
     */

    @java.lang.Override
    public boolean containsCoders(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetCoders().getMap().containsKey(key);
    }
    /**
     * Use {@link #getCodersMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> getCoders() {
      return getCodersMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Coder.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> getCodersMap() {
      return internalGetCoders().getMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Coder.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.Coder getCodersOrDefault(
        java.lang.String key,
        org.apache.beam.model.pipeline.v1.RunnerApi.Coder defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> map =
          internalGetCoders().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Coder.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.Coder getCodersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> map =
          internalGetCoders().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int ENVIRONMENTS_FIELD_NUMBER = 6;
    private static final class EnvironmentsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_EnvironmentsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.apache.beam.model.pipeline.v1.RunnerApi.Environment.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> environments_;
    private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment>
    internalGetEnvironments() {
      if (environments_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            EnvironmentsDefaultEntryHolder.defaultEntry);
      }
      return environments_;
    }

    public int getEnvironmentsCount() {
      return internalGetEnvironments().getMap().size();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Environment.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
     */

    @java.lang.Override
    public boolean containsEnvironments(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetEnvironments().getMap().containsKey(key);
    }
    /**
     * Use {@link #getEnvironmentsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> getEnvironments() {
      return getEnvironmentsMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Environment.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> getEnvironmentsMap() {
      return internalGetEnvironments().getMap();
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Environment.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.Environment getEnvironmentsOrDefault(
        java.lang.String key,
        org.apache.beam.model.pipeline.v1.RunnerApi.Environment defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> map =
          internalGetEnvironments().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Required) A map from pipeline-scoped id to Environment.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.RunnerApi.Environment getEnvironmentsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> map =
          internalGetEnvironments().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STATE_API_SERVICE_DESCRIPTOR_FIELD_NUMBER = 7;
    private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor stateApiServiceDescriptor_;
    /**
     * <pre>
     * A descriptor describing the end point to use for State API
     * calls. Required if the Runner intends to send remote references over the
     * data plane or if any of the transforms rely on user state or side inputs.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
     * @return Whether the stateApiServiceDescriptor field is set.
     */
    @java.lang.Override
    public boolean hasStateApiServiceDescriptor() {
      return stateApiServiceDescriptor_ != null;
    }
    /**
     * <pre>
     * A descriptor describing the end point to use for State API
     * calls. Required if the Runner intends to send remote references over the
     * data plane or if any of the transforms rely on user state or side inputs.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
     * @return The stateApiServiceDescriptor.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getStateApiServiceDescriptor() {
      return stateApiServiceDescriptor_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : stateApiServiceDescriptor_;
    }
    /**
     * <pre>
     * A descriptor describing the end point to use for State API
     * calls. Required if the Runner intends to send remote references over the
     * data plane or if any of the transforms rely on user state or side inputs.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getStateApiServiceDescriptorOrBuilder() {
      return getStateApiServiceDescriptor();
    }

    public static final int TIMER_API_SERVICE_DESCRIPTOR_FIELD_NUMBER = 8;
    private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor timerApiServiceDescriptor_;
    /**
     * <pre>
     * A descriptor describing the end point to use for Data API for user timers.
     * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
     * @return Whether the timerApiServiceDescriptor field is set.
     */
    @java.lang.Override
    public boolean hasTimerApiServiceDescriptor() {
      return timerApiServiceDescriptor_ != null;
    }
    /**
     * <pre>
     * A descriptor describing the end point to use for Data API for user timers.
     * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
     * @return The timerApiServiceDescriptor.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getTimerApiServiceDescriptor() {
      return timerApiServiceDescriptor_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : timerApiServiceDescriptor_;
    }
    /**
     * <pre>
     * A descriptor describing the end point to use for Data API for user timers.
     * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getTimerApiServiceDescriptorOrBuilder() {
      return getTimerApiServiceDescriptor();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetTransforms(),
          TransformsDefaultEntryHolder.defaultEntry,
          2);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetPcollections(),
          PcollectionsDefaultEntryHolder.defaultEntry,
          3);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetWindowingStrategies(),
          WindowingStrategiesDefaultEntryHolder.defaultEntry,
          4);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetCoders(),
          CodersDefaultEntryHolder.defaultEntry,
          5);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetEnvironments(),
          EnvironmentsDefaultEntryHolder.defaultEntry,
          6);
      if (stateApiServiceDescriptor_ != null) {
        output.writeMessage(7, getStateApiServiceDescriptor());
      }
      if (timerApiServiceDescriptor_ != null) {
        output.writeMessage(8, getTimerApiServiceDescriptor());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      for (java.util.Map.Entry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> entry
           : internalGetTransforms().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform>
        transforms__ = TransformsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, transforms__);
      }
      for (java.util.Map.Entry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> entry
           : internalGetPcollections().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection>
        pcollections__ = PcollectionsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, pcollections__);
      }
      for (java.util.Map.Entry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> entry
           : internalGetWindowingStrategies().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy>
        windowingStrategies__ = WindowingStrategiesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, windowingStrategies__);
      }
      for (java.util.Map.Entry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> entry
           : internalGetCoders().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder>
        coders__ = CodersDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, coders__);
      }
      for (java.util.Map.Entry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> entry
           : internalGetEnvironments().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment>
        environments__ = EnvironmentsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, environments__);
      }
      if (stateApiServiceDescriptor_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getStateApiServiceDescriptor());
      }
      if (timerApiServiceDescriptor_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getTimerApiServiceDescriptor());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor) obj;

      if (!getId()
          .equals(other.getId())) return false;
      if (!internalGetTransforms().equals(
          other.internalGetTransforms())) return false;
      if (!internalGetPcollections().equals(
          other.internalGetPcollections())) return false;
      if (!internalGetWindowingStrategies().equals(
          other.internalGetWindowingStrategies())) return false;
      if (!internalGetCoders().equals(
          other.internalGetCoders())) return false;
      if (!internalGetEnvironments().equals(
          other.internalGetEnvironments())) return false;
      if (hasStateApiServiceDescriptor() != other.hasStateApiServiceDescriptor()) return false;
      if (hasStateApiServiceDescriptor()) {
        if (!getStateApiServiceDescriptor()
            .equals(other.getStateApiServiceDescriptor())) return false;
      }
      if (hasTimerApiServiceDescriptor() != other.hasTimerApiServiceDescriptor()) return false;
      if (hasTimerApiServiceDescriptor()) {
        if (!getTimerApiServiceDescriptor()
            .equals(other.getTimerApiServiceDescriptor())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      if (!internalGetTransforms().getMap().isEmpty()) {
        hash = (37 * hash) + TRANSFORMS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetTransforms().hashCode();
      }
      if (!internalGetPcollections().getMap().isEmpty()) {
        hash = (37 * hash) + PCOLLECTIONS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetPcollections().hashCode();
      }
      if (!internalGetWindowingStrategies().getMap().isEmpty()) {
        hash = (37 * hash) + WINDOWING_STRATEGIES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetWindowingStrategies().hashCode();
      }
      if (!internalGetCoders().getMap().isEmpty()) {
        hash = (37 * hash) + CODERS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetCoders().hashCode();
      }
      if (!internalGetEnvironments().getMap().isEmpty()) {
        hash = (37 * hash) + ENVIRONMENTS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetEnvironments().hashCode();
      }
      if (hasStateApiServiceDescriptor()) {
        hash = (37 * hash) + STATE_API_SERVICE_DESCRIPTOR_FIELD_NUMBER;
        hash = (53 * hash) + getStateApiServiceDescriptor().hashCode();
      }
      if (hasTimerApiServiceDescriptor()) {
        hash = (37 * hash) + TIMER_API_SERVICE_DESCRIPTOR_FIELD_NUMBER;
        hash = (53 * hash) + getTimerApiServiceDescriptor().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Definitions that should be used to construct the bundle processing graph.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetTransforms();
          case 3:
            return internalGetPcollections();
          case 4:
            return internalGetWindowingStrategies();
          case 5:
            return internalGetCoders();
          case 6:
            return internalGetEnvironments();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableTransforms();
          case 3:
            return internalGetMutablePcollections();
          case 4:
            return internalGetMutableWindowingStrategies();
          case 5:
            return internalGetMutableCoders();
          case 6:
            return internalGetMutableEnvironments();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = "";

        internalGetMutableTransforms().clear();
        internalGetMutablePcollections().clear();
        internalGetMutableWindowingStrategies().clear();
        internalGetMutableCoders().clear();
        internalGetMutableEnvironments().clear();
        if (stateApiServiceDescriptorBuilder_ == null) {
          stateApiServiceDescriptor_ = null;
        } else {
          stateApiServiceDescriptor_ = null;
          stateApiServiceDescriptorBuilder_ = null;
        }
        if (timerApiServiceDescriptorBuilder_ == null) {
          timerApiServiceDescriptor_ = null;
        } else {
          timerApiServiceDescriptor_ = null;
          timerApiServiceDescriptorBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor(this);
        int from_bitField0_ = bitField0_;
        result.id_ = id_;
        result.transforms_ = internalGetTransforms();
        result.transforms_.makeImmutable();
        result.pcollections_ = internalGetPcollections();
        result.pcollections_.makeImmutable();
        result.windowingStrategies_ = internalGetWindowingStrategies();
        result.windowingStrategies_.makeImmutable();
        result.coders_ = internalGetCoders();
        result.coders_.makeImmutable();
        result.environments_ = internalGetEnvironments();
        result.environments_.makeImmutable();
        if (stateApiServiceDescriptorBuilder_ == null) {
          result.stateApiServiceDescriptor_ = stateApiServiceDescriptor_;
        } else {
          result.stateApiServiceDescriptor_ = stateApiServiceDescriptorBuilder_.build();
        }
        if (timerApiServiceDescriptorBuilder_ == null) {
          result.timerApiServiceDescriptor_ = timerApiServiceDescriptor_;
        } else {
          result.timerApiServiceDescriptor_ = timerApiServiceDescriptorBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor.getDefaultInstance()) return this;
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        internalGetMutableTransforms().mergeFrom(
            other.internalGetTransforms());
        internalGetMutablePcollections().mergeFrom(
            other.internalGetPcollections());
        internalGetMutableWindowingStrategies().mergeFrom(
            other.internalGetWindowingStrategies());
        internalGetMutableCoders().mergeFrom(
            other.internalGetCoders());
        internalGetMutableEnvironments().mergeFrom(
            other.internalGetEnvironments());
        if (other.hasStateApiServiceDescriptor()) {
          mergeStateApiServiceDescriptor(other.getStateApiServiceDescriptor());
        }
        if (other.hasTimerApiServiceDescriptor()) {
          mergeTimerApiServiceDescriptor(other.getTimerApiServiceDescriptor());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * (Required) A pipeline level unique id which can be used as a reference to
       * refer to this.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A pipeline level unique id which can be used as a reference to
       * refer to this.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A pipeline level unique id which can be used as a reference to
       * refer to this.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A pipeline level unique id which can be used as a reference to
       * refer to this.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A pipeline level unique id which can be used as a reference to
       * refer to this.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> transforms_;
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform>
      internalGetTransforms() {
        if (transforms_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              TransformsDefaultEntryHolder.defaultEntry);
        }
        return transforms_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform>
      internalGetMutableTransforms() {
        onChanged();;
        if (transforms_ == null) {
          transforms_ = com.google.protobuf.MapField.newMapField(
              TransformsDefaultEntryHolder.defaultEntry);
        }
        if (!transforms_.isMutable()) {
          transforms_ = transforms_.copy();
        }
        return transforms_;
      }

      public int getTransformsCount() {
        return internalGetTransforms().getMap().size();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PTransform.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
       */

      @java.lang.Override
      public boolean containsTransforms(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetTransforms().getMap().containsKey(key);
      }
      /**
       * Use {@link #getTransformsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> getTransforms() {
        return getTransformsMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PTransform.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> getTransformsMap() {
        return internalGetTransforms().getMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PTransform.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransformsOrDefault(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.PTransform defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> map =
            internalGetTransforms().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PTransform.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransformsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> map =
            internalGetTransforms().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearTransforms() {
        internalGetMutableTransforms().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PTransform.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
       */

      public Builder removeTransforms(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableTransforms().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform>
      getMutableTransforms() {
        return internalGetMutableTransforms().getMutableMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PTransform.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
       */
      public Builder putTransforms(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.PTransform value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableTransforms().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PTransform.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PTransform&gt; transforms = 2;</code>
       */

      public Builder putAllTransforms(
          java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform> values) {
        internalGetMutableTransforms().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> pcollections_;
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection>
      internalGetPcollections() {
        if (pcollections_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              PcollectionsDefaultEntryHolder.defaultEntry);
        }
        return pcollections_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection>
      internalGetMutablePcollections() {
        onChanged();;
        if (pcollections_ == null) {
          pcollections_ = com.google.protobuf.MapField.newMapField(
              PcollectionsDefaultEntryHolder.defaultEntry);
        }
        if (!pcollections_.isMutable()) {
          pcollections_ = pcollections_.copy();
        }
        return pcollections_;
      }

      public int getPcollectionsCount() {
        return internalGetPcollections().getMap().size();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PCollection.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
       */

      @java.lang.Override
      public boolean containsPcollections(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetPcollections().getMap().containsKey(key);
      }
      /**
       * Use {@link #getPcollectionsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> getPcollections() {
        return getPcollectionsMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PCollection.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> getPcollectionsMap() {
        return internalGetPcollections().getMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PCollection.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.PCollection getPcollectionsOrDefault(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.PCollection defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> map =
            internalGetPcollections().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PCollection.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.PCollection getPcollectionsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> map =
            internalGetPcollections().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearPcollections() {
        internalGetMutablePcollections().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PCollection.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
       */

      public Builder removePcollections(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutablePcollections().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection>
      getMutablePcollections() {
        return internalGetMutablePcollections().getMutableMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PCollection.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
       */
      public Builder putPcollections(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.PCollection value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutablePcollections().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to PCollection.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.PCollection&gt; pcollections = 3;</code>
       */

      public Builder putAllPcollections(
          java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.PCollection> values) {
        internalGetMutablePcollections().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> windowingStrategies_;
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy>
      internalGetWindowingStrategies() {
        if (windowingStrategies_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              WindowingStrategiesDefaultEntryHolder.defaultEntry);
        }
        return windowingStrategies_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy>
      internalGetMutableWindowingStrategies() {
        onChanged();;
        if (windowingStrategies_ == null) {
          windowingStrategies_ = com.google.protobuf.MapField.newMapField(
              WindowingStrategiesDefaultEntryHolder.defaultEntry);
        }
        if (!windowingStrategies_.isMutable()) {
          windowingStrategies_ = windowingStrategies_.copy();
        }
        return windowingStrategies_;
      }

      public int getWindowingStrategiesCount() {
        return internalGetWindowingStrategies().getMap().size();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to WindowingStrategy.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
       */

      @java.lang.Override
      public boolean containsWindowingStrategies(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetWindowingStrategies().getMap().containsKey(key);
      }
      /**
       * Use {@link #getWindowingStrategiesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> getWindowingStrategies() {
        return getWindowingStrategiesMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to WindowingStrategy.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> getWindowingStrategiesMap() {
        return internalGetWindowingStrategies().getMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to WindowingStrategy.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy getWindowingStrategiesOrDefault(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> map =
            internalGetWindowingStrategies().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to WindowingStrategy.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy getWindowingStrategiesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> map =
            internalGetWindowingStrategies().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearWindowingStrategies() {
        internalGetMutableWindowingStrategies().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to WindowingStrategy.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
       */

      public Builder removeWindowingStrategies(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableWindowingStrategies().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy>
      getMutableWindowingStrategies() {
        return internalGetMutableWindowingStrategies().getMutableMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to WindowingStrategy.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
       */
      public Builder putWindowingStrategies(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableWindowingStrategies().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to WindowingStrategy.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.WindowingStrategy&gt; windowing_strategies = 4;</code>
       */

      public Builder putAllWindowingStrategies(
          java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.WindowingStrategy> values) {
        internalGetMutableWindowingStrategies().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> coders_;
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder>
      internalGetCoders() {
        if (coders_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              CodersDefaultEntryHolder.defaultEntry);
        }
        return coders_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder>
      internalGetMutableCoders() {
        onChanged();;
        if (coders_ == null) {
          coders_ = com.google.protobuf.MapField.newMapField(
              CodersDefaultEntryHolder.defaultEntry);
        }
        if (!coders_.isMutable()) {
          coders_ = coders_.copy();
        }
        return coders_;
      }

      public int getCodersCount() {
        return internalGetCoders().getMap().size();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Coder.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
       */

      @java.lang.Override
      public boolean containsCoders(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetCoders().getMap().containsKey(key);
      }
      /**
       * Use {@link #getCodersMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> getCoders() {
        return getCodersMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Coder.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> getCodersMap() {
        return internalGetCoders().getMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Coder.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.Coder getCodersOrDefault(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.Coder defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> map =
            internalGetCoders().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Coder.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.Coder getCodersOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> map =
            internalGetCoders().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearCoders() {
        internalGetMutableCoders().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Coder.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
       */

      public Builder removeCoders(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableCoders().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder>
      getMutableCoders() {
        return internalGetMutableCoders().getMutableMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Coder.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
       */
      public Builder putCoders(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.Coder value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableCoders().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Coder.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Coder&gt; coders = 5;</code>
       */

      public Builder putAllCoders(
          java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Coder> values) {
        internalGetMutableCoders().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> environments_;
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment>
      internalGetEnvironments() {
        if (environments_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              EnvironmentsDefaultEntryHolder.defaultEntry);
        }
        return environments_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment>
      internalGetMutableEnvironments() {
        onChanged();;
        if (environments_ == null) {
          environments_ = com.google.protobuf.MapField.newMapField(
              EnvironmentsDefaultEntryHolder.defaultEntry);
        }
        if (!environments_.isMutable()) {
          environments_ = environments_.copy();
        }
        return environments_;
      }

      public int getEnvironmentsCount() {
        return internalGetEnvironments().getMap().size();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Environment.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
       */

      @java.lang.Override
      public boolean containsEnvironments(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetEnvironments().getMap().containsKey(key);
      }
      /**
       * Use {@link #getEnvironmentsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> getEnvironments() {
        return getEnvironmentsMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Environment.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> getEnvironmentsMap() {
        return internalGetEnvironments().getMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Environment.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.Environment getEnvironmentsOrDefault(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.Environment defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> map =
            internalGetEnvironments().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Environment.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.RunnerApi.Environment getEnvironmentsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> map =
            internalGetEnvironments().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearEnvironments() {
        internalGetMutableEnvironments().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Environment.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
       */

      public Builder removeEnvironments(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableEnvironments().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment>
      getMutableEnvironments() {
        return internalGetMutableEnvironments().getMutableMap();
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Environment.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
       */
      public Builder putEnvironments(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.RunnerApi.Environment value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableEnvironments().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * (Required) A map from pipeline-scoped id to Environment.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.Environment&gt; environments = 6;</code>
       */

      public Builder putAllEnvironments(
          java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.RunnerApi.Environment> values) {
        internalGetMutableEnvironments().getMutableMap()
            .putAll(values);
        return this;
      }

      private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor stateApiServiceDescriptor_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> stateApiServiceDescriptorBuilder_;
      /**
       * <pre>
       * A descriptor describing the end point to use for State API
       * calls. Required if the Runner intends to send remote references over the
       * data plane or if any of the transforms rely on user state or side inputs.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
       * @return Whether the stateApiServiceDescriptor field is set.
       */
      public boolean hasStateApiServiceDescriptor() {
        return stateApiServiceDescriptorBuilder_ != null || stateApiServiceDescriptor_ != null;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for State API
       * calls. Required if the Runner intends to send remote references over the
       * data plane or if any of the transforms rely on user state or side inputs.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
       * @return The stateApiServiceDescriptor.
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getStateApiServiceDescriptor() {
        if (stateApiServiceDescriptorBuilder_ == null) {
          return stateApiServiceDescriptor_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : stateApiServiceDescriptor_;
        } else {
          return stateApiServiceDescriptorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for State API
       * calls. Required if the Runner intends to send remote references over the
       * data plane or if any of the transforms rely on user state or side inputs.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
       */
      public Builder setStateApiServiceDescriptor(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (stateApiServiceDescriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stateApiServiceDescriptor_ = value;
          onChanged();
        } else {
          stateApiServiceDescriptorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for State API
       * calls. Required if the Runner intends to send remote references over the
       * data plane or if any of the transforms rely on user state or side inputs.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
       */
      public Builder setStateApiServiceDescriptor(
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder builderForValue) {
        if (stateApiServiceDescriptorBuilder_ == null) {
          stateApiServiceDescriptor_ = builderForValue.build();
          onChanged();
        } else {
          stateApiServiceDescriptorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for State API
       * calls. Required if the Runner intends to send remote references over the
       * data plane or if any of the transforms rely on user state or side inputs.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
       */
      public Builder mergeStateApiServiceDescriptor(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (stateApiServiceDescriptorBuilder_ == null) {
          if (stateApiServiceDescriptor_ != null) {
            stateApiServiceDescriptor_ =
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.newBuilder(stateApiServiceDescriptor_).mergeFrom(value).buildPartial();
          } else {
            stateApiServiceDescriptor_ = value;
          }
          onChanged();
        } else {
          stateApiServiceDescriptorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for State API
       * calls. Required if the Runner intends to send remote references over the
       * data plane or if any of the transforms rely on user state or side inputs.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
       */
      public Builder clearStateApiServiceDescriptor() {
        if (stateApiServiceDescriptorBuilder_ == null) {
          stateApiServiceDescriptor_ = null;
          onChanged();
        } else {
          stateApiServiceDescriptor_ = null;
          stateApiServiceDescriptorBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for State API
       * calls. Required if the Runner intends to send remote references over the
       * data plane or if any of the transforms rely on user state or side inputs.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder getStateApiServiceDescriptorBuilder() {
        
        onChanged();
        return getStateApiServiceDescriptorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for State API
       * calls. Required if the Runner intends to send remote references over the
       * data plane or if any of the transforms rely on user state or side inputs.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getStateApiServiceDescriptorOrBuilder() {
        if (stateApiServiceDescriptorBuilder_ != null) {
          return stateApiServiceDescriptorBuilder_.getMessageOrBuilder();
        } else {
          return stateApiServiceDescriptor_ == null ?
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : stateApiServiceDescriptor_;
        }
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for State API
       * calls. Required if the Runner intends to send remote references over the
       * data plane or if any of the transforms rely on user state or side inputs.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor state_api_service_descriptor = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> 
          getStateApiServiceDescriptorFieldBuilder() {
        if (stateApiServiceDescriptorBuilder_ == null) {
          stateApiServiceDescriptorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder>(
                  getStateApiServiceDescriptor(),
                  getParentForChildren(),
                  isClean());
          stateApiServiceDescriptor_ = null;
        }
        return stateApiServiceDescriptorBuilder_;
      }

      private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor timerApiServiceDescriptor_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> timerApiServiceDescriptorBuilder_;
      /**
       * <pre>
       * A descriptor describing the end point to use for Data API for user timers.
       * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
       * @return Whether the timerApiServiceDescriptor field is set.
       */
      public boolean hasTimerApiServiceDescriptor() {
        return timerApiServiceDescriptorBuilder_ != null || timerApiServiceDescriptor_ != null;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for Data API for user timers.
       * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
       * @return The timerApiServiceDescriptor.
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getTimerApiServiceDescriptor() {
        if (timerApiServiceDescriptorBuilder_ == null) {
          return timerApiServiceDescriptor_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : timerApiServiceDescriptor_;
        } else {
          return timerApiServiceDescriptorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for Data API for user timers.
       * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
       */
      public Builder setTimerApiServiceDescriptor(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (timerApiServiceDescriptorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timerApiServiceDescriptor_ = value;
          onChanged();
        } else {
          timerApiServiceDescriptorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for Data API for user timers.
       * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
       */
      public Builder setTimerApiServiceDescriptor(
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder builderForValue) {
        if (timerApiServiceDescriptorBuilder_ == null) {
          timerApiServiceDescriptor_ = builderForValue.build();
          onChanged();
        } else {
          timerApiServiceDescriptorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for Data API for user timers.
       * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
       */
      public Builder mergeTimerApiServiceDescriptor(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (timerApiServiceDescriptorBuilder_ == null) {
          if (timerApiServiceDescriptor_ != null) {
            timerApiServiceDescriptor_ =
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.newBuilder(timerApiServiceDescriptor_).mergeFrom(value).buildPartial();
          } else {
            timerApiServiceDescriptor_ = value;
          }
          onChanged();
        } else {
          timerApiServiceDescriptorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for Data API for user timers.
       * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
       */
      public Builder clearTimerApiServiceDescriptor() {
        if (timerApiServiceDescriptorBuilder_ == null) {
          timerApiServiceDescriptor_ = null;
          onChanged();
        } else {
          timerApiServiceDescriptor_ = null;
          timerApiServiceDescriptorBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for Data API for user timers.
       * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder getTimerApiServiceDescriptorBuilder() {
        
        onChanged();
        return getTimerApiServiceDescriptorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for Data API for user timers.
       * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getTimerApiServiceDescriptorOrBuilder() {
        if (timerApiServiceDescriptorBuilder_ != null) {
          return timerApiServiceDescriptorBuilder_.getMessageOrBuilder();
        } else {
          return timerApiServiceDescriptor_ == null ?
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : timerApiServiceDescriptor_;
        }
      }
      /**
       * <pre>
       * A descriptor describing the end point to use for Data API for user timers.
       * Required if the ProcessBundleDescriptor contains any transforms that have user timers.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor timer_api_service_descriptor = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> 
          getTimerApiServiceDescriptorFieldBuilder() {
        if (timerApiServiceDescriptorBuilder_ == null) {
          timerApiServiceDescriptorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder>(
                  getTimerApiServiceDescriptor(),
                  getParentForChildren(),
                  isClean());
          timerApiServiceDescriptor_ = null;
        }
        return timerApiServiceDescriptorBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProcessBundleDescriptor>
        PARSER = new com.google.protobuf.AbstractParser<ProcessBundleDescriptor>() {
      @java.lang.Override
      public ProcessBundleDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProcessBundleDescriptor(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProcessBundleDescriptor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessBundleDescriptor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleDescriptor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BundleApplicationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.BundleApplication)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The transform to which to pass the element
     * </pre>
     *
     * <code>string transform_id = 1;</code>
     * @return The transformId.
     */
    java.lang.String getTransformId();
    /**
     * <pre>
     * (Required) The transform to which to pass the element
     * </pre>
     *
     * <code>string transform_id = 1;</code>
     * @return The bytes for transformId.
     */
    com.google.protobuf.ByteString
        getTransformIdBytes();

    /**
     * <pre>
     * (Required) Name of the transform's input to which to pass the element.
     * </pre>
     *
     * <code>string input_id = 2;</code>
     * @return The inputId.
     */
    java.lang.String getInputId();
    /**
     * <pre>
     * (Required) Name of the transform's input to which to pass the element.
     * </pre>
     *
     * <code>string input_id = 2;</code>
     * @return The bytes for inputId.
     */
    com.google.protobuf.ByteString
        getInputIdBytes();

    /**
     * <pre>
     * (Required) The encoded element to pass to the transform.
     * </pre>
     *
     * <code>bytes element = 3;</code>
     * @return The element.
     */
    com.google.protobuf.ByteString getElement();

    /**
     * <pre>
     * The map is keyed by the local output name of the PTransform. Each
     * value represents a lower bound on the timestamps of elements that
     * are produced by this PTransform into each of its output PCollections
     * when invoked with this application.
     * If there is no watermark reported from RestrictionTracker, the runner will
     * use MIN_TIMESTAMP by default.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
     */
    int getOutputWatermarksCount();
    /**
     * <pre>
     * The map is keyed by the local output name of the PTransform. Each
     * value represents a lower bound on the timestamps of elements that
     * are produced by this PTransform into each of its output PCollections
     * when invoked with this application.
     * If there is no watermark reported from RestrictionTracker, the runner will
     * use MIN_TIMESTAMP by default.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
     */
    boolean containsOutputWatermarks(
        java.lang.String key);
    /**
     * Use {@link #getOutputWatermarksMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.Timestamp>
    getOutputWatermarks();
    /**
     * <pre>
     * The map is keyed by the local output name of the PTransform. Each
     * value represents a lower bound on the timestamps of elements that
     * are produced by this PTransform into each of its output PCollections
     * when invoked with this application.
     * If there is no watermark reported from RestrictionTracker, the runner will
     * use MIN_TIMESTAMP by default.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.Timestamp>
    getOutputWatermarksMap();
    /**
     * <pre>
     * The map is keyed by the local output name of the PTransform. Each
     * value represents a lower bound on the timestamps of elements that
     * are produced by this PTransform into each of its output PCollections
     * when invoked with this application.
     * If there is no watermark reported from RestrictionTracker, the runner will
     * use MIN_TIMESTAMP by default.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
     */

    /* nullable */
com.google.protobuf.Timestamp getOutputWatermarksOrDefault(
        java.lang.String key,
        /* nullable */
com.google.protobuf.Timestamp defaultValue);
    /**
     * <pre>
     * The map is keyed by the local output name of the PTransform. Each
     * value represents a lower bound on the timestamps of elements that
     * are produced by this PTransform into each of its output PCollections
     * when invoked with this application.
     * If there is no watermark reported from RestrictionTracker, the runner will
     * use MIN_TIMESTAMP by default.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
     */

    com.google.protobuf.Timestamp getOutputWatermarksOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Whether this application potentially produces an unbounded
     * amount of data. Note that this should only be set to BOUNDED if and
     * only if the application is known to produce a finite amount of output.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.IsBounded.Enum is_bounded = 5;</code>
     * @return The enum numeric value on the wire for isBounded.
     */
    int getIsBoundedValue();
    /**
     * <pre>
     * Whether this application potentially produces an unbounded
     * amount of data. Note that this should only be set to BOUNDED if and
     * only if the application is known to produce a finite amount of output.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.IsBounded.Enum is_bounded = 5;</code>
     * @return The isBounded.
     */
    org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum getIsBounded();
  }
  /**
   * <pre>
   * One of the applications specifying the scope of work for a bundle.
   * See
   * https://docs.google.com/document/d/1tUDb45sStdR8u7-jBkGdw3OGFK7aa2-V7eo86zYSE_4/edit#heading=h.9g3g5weg2u9
   * for further details.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.BundleApplication}
   */
  public static final class BundleApplication extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.BundleApplication)
      BundleApplicationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BundleApplication.newBuilder() to construct.
    private BundleApplication(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BundleApplication() {
      transformId_ = "";
      inputId_ = "";
      element_ = com.google.protobuf.ByteString.EMPTY;
      isBounded_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BundleApplication();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BundleApplication(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              transformId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              inputId_ = s;
              break;
            }
            case 26: {

              element_ = input.readBytes();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                outputWatermarks_ = com.google.protobuf.MapField.newMapField(
                    OutputWatermarksDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.Timestamp>
              outputWatermarks__ = input.readMessage(
                  OutputWatermarksDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              outputWatermarks_.getMutableMap().put(
                  outputWatermarks__.getKey(), outputWatermarks__.getValue());
              break;
            }
            case 40: {
              int rawValue = input.readEnum();

              isBounded_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetOutputWatermarks();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder.class);
    }

    public static final int TRANSFORM_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object transformId_;
    /**
     * <pre>
     * (Required) The transform to which to pass the element
     * </pre>
     *
     * <code>string transform_id = 1;</code>
     * @return The transformId.
     */
    @java.lang.Override
    public java.lang.String getTransformId() {
      java.lang.Object ref = transformId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transformId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) The transform to which to pass the element
     * </pre>
     *
     * <code>string transform_id = 1;</code>
     * @return The bytes for transformId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTransformIdBytes() {
      java.lang.Object ref = transformId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transformId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INPUT_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object inputId_;
    /**
     * <pre>
     * (Required) Name of the transform's input to which to pass the element.
     * </pre>
     *
     * <code>string input_id = 2;</code>
     * @return The inputId.
     */
    @java.lang.Override
    public java.lang.String getInputId() {
      java.lang.Object ref = inputId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        inputId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) Name of the transform's input to which to pass the element.
     * </pre>
     *
     * <code>string input_id = 2;</code>
     * @return The bytes for inputId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInputIdBytes() {
      java.lang.Object ref = inputId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        inputId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ELEMENT_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString element_;
    /**
     * <pre>
     * (Required) The encoded element to pass to the transform.
     * </pre>
     *
     * <code>bytes element = 3;</code>
     * @return The element.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getElement() {
      return element_;
    }

    public static final int OUTPUT_WATERMARKS_FIELD_NUMBER = 4;
    private static final class OutputWatermarksDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, com.google.protobuf.Timestamp> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, com.google.protobuf.Timestamp>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_OutputWatermarksEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.protobuf.Timestamp.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, com.google.protobuf.Timestamp> outputWatermarks_;
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Timestamp>
    internalGetOutputWatermarks() {
      if (outputWatermarks_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OutputWatermarksDefaultEntryHolder.defaultEntry);
      }
      return outputWatermarks_;
    }

    public int getOutputWatermarksCount() {
      return internalGetOutputWatermarks().getMap().size();
    }
    /**
     * <pre>
     * The map is keyed by the local output name of the PTransform. Each
     * value represents a lower bound on the timestamps of elements that
     * are produced by this PTransform into each of its output PCollections
     * when invoked with this application.
     * If there is no watermark reported from RestrictionTracker, the runner will
     * use MIN_TIMESTAMP by default.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
     */

    @java.lang.Override
    public boolean containsOutputWatermarks(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetOutputWatermarks().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOutputWatermarksMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.Timestamp> getOutputWatermarks() {
      return getOutputWatermarksMap();
    }
    /**
     * <pre>
     * The map is keyed by the local output name of the PTransform. Each
     * value represents a lower bound on the timestamps of elements that
     * are produced by this PTransform into each of its output PCollections
     * when invoked with this application.
     * If there is no watermark reported from RestrictionTracker, the runner will
     * use MIN_TIMESTAMP by default.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.Timestamp> getOutputWatermarksMap() {
      return internalGetOutputWatermarks().getMap();
    }
    /**
     * <pre>
     * The map is keyed by the local output name of the PTransform. Each
     * value represents a lower bound on the timestamps of elements that
     * are produced by this PTransform into each of its output PCollections
     * when invoked with this application.
     * If there is no watermark reported from RestrictionTracker, the runner will
     * use MIN_TIMESTAMP by default.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
     */
    @java.lang.Override

    public com.google.protobuf.Timestamp getOutputWatermarksOrDefault(
        java.lang.String key,
        com.google.protobuf.Timestamp defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.Timestamp> map =
          internalGetOutputWatermarks().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The map is keyed by the local output name of the PTransform. Each
     * value represents a lower bound on the timestamps of elements that
     * are produced by this PTransform into each of its output PCollections
     * when invoked with this application.
     * If there is no watermark reported from RestrictionTracker, the runner will
     * use MIN_TIMESTAMP by default.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
     */
    @java.lang.Override

    public com.google.protobuf.Timestamp getOutputWatermarksOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.Timestamp> map =
          internalGetOutputWatermarks().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int IS_BOUNDED_FIELD_NUMBER = 5;
    private int isBounded_;
    /**
     * <pre>
     * Whether this application potentially produces an unbounded
     * amount of data. Note that this should only be set to BOUNDED if and
     * only if the application is known to produce a finite amount of output.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.IsBounded.Enum is_bounded = 5;</code>
     * @return The enum numeric value on the wire for isBounded.
     */
    @java.lang.Override public int getIsBoundedValue() {
      return isBounded_;
    }
    /**
     * <pre>
     * Whether this application potentially produces an unbounded
     * amount of data. Note that this should only be set to BOUNDED if and
     * only if the application is known to produce a finite amount of output.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.IsBounded.Enum is_bounded = 5;</code>
     * @return The isBounded.
     */
    @java.lang.Override public org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum getIsBounded() {
      @SuppressWarnings("deprecation")
      org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum result = org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum.valueOf(isBounded_);
      return result == null ? org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transformId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(inputId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, inputId_);
      }
      if (!element_.isEmpty()) {
        output.writeBytes(3, element_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetOutputWatermarks(),
          OutputWatermarksDefaultEntryHolder.defaultEntry,
          4);
      if (isBounded_ != org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum.UNSPECIFIED.getNumber()) {
        output.writeEnum(5, isBounded_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transformId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(inputId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, inputId_);
      }
      if (!element_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, element_);
      }
      for (java.util.Map.Entry<java.lang.String, com.google.protobuf.Timestamp> entry
           : internalGetOutputWatermarks().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.Timestamp>
        outputWatermarks__ = OutputWatermarksDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, outputWatermarks__);
      }
      if (isBounded_ != org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum.UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, isBounded_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication) obj;

      if (!getTransformId()
          .equals(other.getTransformId())) return false;
      if (!getInputId()
          .equals(other.getInputId())) return false;
      if (!getElement()
          .equals(other.getElement())) return false;
      if (!internalGetOutputWatermarks().equals(
          other.internalGetOutputWatermarks())) return false;
      if (isBounded_ != other.isBounded_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTransformId().hashCode();
      hash = (37 * hash) + INPUT_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInputId().hashCode();
      hash = (37 * hash) + ELEMENT_FIELD_NUMBER;
      hash = (53 * hash) + getElement().hashCode();
      if (!internalGetOutputWatermarks().getMap().isEmpty()) {
        hash = (37 * hash) + OUTPUT_WATERMARKS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetOutputWatermarks().hashCode();
      }
      hash = (37 * hash) + IS_BOUNDED_FIELD_NUMBER;
      hash = (53 * hash) + isBounded_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * One of the applications specifying the scope of work for a bundle.
     * See
     * https://docs.google.com/document/d/1tUDb45sStdR8u7-jBkGdw3OGFK7aa2-V7eo86zYSE_4/edit#heading=h.9g3g5weg2u9
     * for further details.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.BundleApplication}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.BundleApplication)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetOutputWatermarks();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetMutableOutputWatermarks();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        transformId_ = "";

        inputId_ = "";

        element_ = com.google.protobuf.ByteString.EMPTY;

        internalGetMutableOutputWatermarks().clear();
        isBounded_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication(this);
        int from_bitField0_ = bitField0_;
        result.transformId_ = transformId_;
        result.inputId_ = inputId_;
        result.element_ = element_;
        result.outputWatermarks_ = internalGetOutputWatermarks();
        result.outputWatermarks_.makeImmutable();
        result.isBounded_ = isBounded_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.getDefaultInstance()) return this;
        if (!other.getTransformId().isEmpty()) {
          transformId_ = other.transformId_;
          onChanged();
        }
        if (!other.getInputId().isEmpty()) {
          inputId_ = other.inputId_;
          onChanged();
        }
        if (other.getElement() != com.google.protobuf.ByteString.EMPTY) {
          setElement(other.getElement());
        }
        internalGetMutableOutputWatermarks().mergeFrom(
            other.internalGetOutputWatermarks());
        if (other.isBounded_ != 0) {
          setIsBoundedValue(other.getIsBoundedValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object transformId_ = "";
      /**
       * <pre>
       * (Required) The transform to which to pass the element
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) The transform to which to pass the element
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) The transform to which to pass the element
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @param value The transformId to set.
       * @return This builder for chaining.
       */
      public Builder setTransformId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        transformId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The transform to which to pass the element
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransformId() {
        
        transformId_ = getDefaultInstance().getTransformId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The transform to which to pass the element
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @param value The bytes for transformId to set.
       * @return This builder for chaining.
       */
      public Builder setTransformIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        transformId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object inputId_ = "";
      /**
       * <pre>
       * (Required) Name of the transform's input to which to pass the element.
       * </pre>
       *
       * <code>string input_id = 2;</code>
       * @return The inputId.
       */
      public java.lang.String getInputId() {
        java.lang.Object ref = inputId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          inputId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) Name of the transform's input to which to pass the element.
       * </pre>
       *
       * <code>string input_id = 2;</code>
       * @return The bytes for inputId.
       */
      public com.google.protobuf.ByteString
          getInputIdBytes() {
        java.lang.Object ref = inputId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          inputId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) Name of the transform's input to which to pass the element.
       * </pre>
       *
       * <code>string input_id = 2;</code>
       * @param value The inputId to set.
       * @return This builder for chaining.
       */
      public Builder setInputId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        inputId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Name of the transform's input to which to pass the element.
       * </pre>
       *
       * <code>string input_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearInputId() {
        
        inputId_ = getDefaultInstance().getInputId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Name of the transform's input to which to pass the element.
       * </pre>
       *
       * <code>string input_id = 2;</code>
       * @param value The bytes for inputId to set.
       * @return This builder for chaining.
       */
      public Builder setInputIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        inputId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString element_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * (Required) The encoded element to pass to the transform.
       * </pre>
       *
       * <code>bytes element = 3;</code>
       * @return The element.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getElement() {
        return element_;
      }
      /**
       * <pre>
       * (Required) The encoded element to pass to the transform.
       * </pre>
       *
       * <code>bytes element = 3;</code>
       * @param value The element to set.
       * @return This builder for chaining.
       */
      public Builder setElement(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        element_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The encoded element to pass to the transform.
       * </pre>
       *
       * <code>bytes element = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearElement() {
        
        element_ = getDefaultInstance().getElement();
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, com.google.protobuf.Timestamp> outputWatermarks_;
      private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Timestamp>
      internalGetOutputWatermarks() {
        if (outputWatermarks_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              OutputWatermarksDefaultEntryHolder.defaultEntry);
        }
        return outputWatermarks_;
      }
      private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Timestamp>
      internalGetMutableOutputWatermarks() {
        onChanged();;
        if (outputWatermarks_ == null) {
          outputWatermarks_ = com.google.protobuf.MapField.newMapField(
              OutputWatermarksDefaultEntryHolder.defaultEntry);
        }
        if (!outputWatermarks_.isMutable()) {
          outputWatermarks_ = outputWatermarks_.copy();
        }
        return outputWatermarks_;
      }

      public int getOutputWatermarksCount() {
        return internalGetOutputWatermarks().getMap().size();
      }
      /**
       * <pre>
       * The map is keyed by the local output name of the PTransform. Each
       * value represents a lower bound on the timestamps of elements that
       * are produced by this PTransform into each of its output PCollections
       * when invoked with this application.
       * If there is no watermark reported from RestrictionTracker, the runner will
       * use MIN_TIMESTAMP by default.
       * </pre>
       *
       * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
       */

      @java.lang.Override
      public boolean containsOutputWatermarks(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetOutputWatermarks().getMap().containsKey(key);
      }
      /**
       * Use {@link #getOutputWatermarksMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.Timestamp> getOutputWatermarks() {
        return getOutputWatermarksMap();
      }
      /**
       * <pre>
       * The map is keyed by the local output name of the PTransform. Each
       * value represents a lower bound on the timestamps of elements that
       * are produced by this PTransform into each of its output PCollections
       * when invoked with this application.
       * If there is no watermark reported from RestrictionTracker, the runner will
       * use MIN_TIMESTAMP by default.
       * </pre>
       *
       * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, com.google.protobuf.Timestamp> getOutputWatermarksMap() {
        return internalGetOutputWatermarks().getMap();
      }
      /**
       * <pre>
       * The map is keyed by the local output name of the PTransform. Each
       * value represents a lower bound on the timestamps of elements that
       * are produced by this PTransform into each of its output PCollections
       * when invoked with this application.
       * If there is no watermark reported from RestrictionTracker, the runner will
       * use MIN_TIMESTAMP by default.
       * </pre>
       *
       * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
       */
      @java.lang.Override

      public com.google.protobuf.Timestamp getOutputWatermarksOrDefault(
          java.lang.String key,
          com.google.protobuf.Timestamp defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.protobuf.Timestamp> map =
            internalGetOutputWatermarks().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * The map is keyed by the local output name of the PTransform. Each
       * value represents a lower bound on the timestamps of elements that
       * are produced by this PTransform into each of its output PCollections
       * when invoked with this application.
       * If there is no watermark reported from RestrictionTracker, the runner will
       * use MIN_TIMESTAMP by default.
       * </pre>
       *
       * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
       */
      @java.lang.Override

      public com.google.protobuf.Timestamp getOutputWatermarksOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.protobuf.Timestamp> map =
            internalGetOutputWatermarks().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearOutputWatermarks() {
        internalGetMutableOutputWatermarks().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * The map is keyed by the local output name of the PTransform. Each
       * value represents a lower bound on the timestamps of elements that
       * are produced by this PTransform into each of its output PCollections
       * when invoked with this application.
       * If there is no watermark reported from RestrictionTracker, the runner will
       * use MIN_TIMESTAMP by default.
       * </pre>
       *
       * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
       */

      public Builder removeOutputWatermarks(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableOutputWatermarks().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.Timestamp>
      getMutableOutputWatermarks() {
        return internalGetMutableOutputWatermarks().getMutableMap();
      }
      /**
       * <pre>
       * The map is keyed by the local output name of the PTransform. Each
       * value represents a lower bound on the timestamps of elements that
       * are produced by this PTransform into each of its output PCollections
       * when invoked with this application.
       * If there is no watermark reported from RestrictionTracker, the runner will
       * use MIN_TIMESTAMP by default.
       * </pre>
       *
       * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
       */
      public Builder putOutputWatermarks(
          java.lang.String key,
          com.google.protobuf.Timestamp value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableOutputWatermarks().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * The map is keyed by the local output name of the PTransform. Each
       * value represents a lower bound on the timestamps of elements that
       * are produced by this PTransform into each of its output PCollections
       * when invoked with this application.
       * If there is no watermark reported from RestrictionTracker, the runner will
       * use MIN_TIMESTAMP by default.
       * </pre>
       *
       * <code>map&lt;string, .google.protobuf.Timestamp&gt; output_watermarks = 4;</code>
       */

      public Builder putAllOutputWatermarks(
          java.util.Map<java.lang.String, com.google.protobuf.Timestamp> values) {
        internalGetMutableOutputWatermarks().getMutableMap()
            .putAll(values);
        return this;
      }

      private int isBounded_ = 0;
      /**
       * <pre>
       * Whether this application potentially produces an unbounded
       * amount of data. Note that this should only be set to BOUNDED if and
       * only if the application is known to produce a finite amount of output.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.IsBounded.Enum is_bounded = 5;</code>
       * @return The enum numeric value on the wire for isBounded.
       */
      @java.lang.Override public int getIsBoundedValue() {
        return isBounded_;
      }
      /**
       * <pre>
       * Whether this application potentially produces an unbounded
       * amount of data. Note that this should only be set to BOUNDED if and
       * only if the application is known to produce a finite amount of output.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.IsBounded.Enum is_bounded = 5;</code>
       * @param value The enum numeric value on the wire for isBounded to set.
       * @return This builder for chaining.
       */
      public Builder setIsBoundedValue(int value) {
        
        isBounded_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether this application potentially produces an unbounded
       * amount of data. Note that this should only be set to BOUNDED if and
       * only if the application is known to produce a finite amount of output.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.IsBounded.Enum is_bounded = 5;</code>
       * @return The isBounded.
       */
      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum getIsBounded() {
        @SuppressWarnings("deprecation")
        org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum result = org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum.valueOf(isBounded_);
        return result == null ? org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Whether this application potentially produces an unbounded
       * amount of data. Note that this should only be set to BOUNDED if and
       * only if the application is known to produce a finite amount of output.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.IsBounded.Enum is_bounded = 5;</code>
       * @param value The isBounded to set.
       * @return This builder for chaining.
       */
      public Builder setIsBounded(org.apache.beam.model.pipeline.v1.RunnerApi.IsBounded.Enum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        isBounded_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether this application potentially produces an unbounded
       * amount of data. Note that this should only be set to BOUNDED if and
       * only if the application is known to produce a finite amount of output.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.IsBounded.Enum is_bounded = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsBounded() {
        
        isBounded_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.BundleApplication)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.BundleApplication)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BundleApplication>
        PARSER = new com.google.protobuf.AbstractParser<BundleApplication>() {
      @java.lang.Override
      public BundleApplication parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BundleApplication(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BundleApplication> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BundleApplication> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DelayedBundleApplicationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.DelayedBundleApplication)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The application that should be scheduled.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
     * @return Whether the application field is set.
     */
    boolean hasApplication();
    /**
     * <pre>
     * (Required) The application that should be scheduled.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
     * @return The application.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication getApplication();
    /**
     * <pre>
     * (Required) The application that should be scheduled.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder getApplicationOrBuilder();

    /**
     * <pre>
     * Recommended time delay at which the application should be scheduled to
     * execute by the runner. Time delay that equals 0 may be scheduled to execute
     * immediately. The unit of time delay should be microsecond.
     * </pre>
     *
     * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
     * @return Whether the requestedTimeDelay field is set.
     */
    boolean hasRequestedTimeDelay();
    /**
     * <pre>
     * Recommended time delay at which the application should be scheduled to
     * execute by the runner. Time delay that equals 0 may be scheduled to execute
     * immediately. The unit of time delay should be microsecond.
     * </pre>
     *
     * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
     * @return The requestedTimeDelay.
     */
    com.google.protobuf.Duration getRequestedTimeDelay();
    /**
     * <pre>
     * Recommended time delay at which the application should be scheduled to
     * execute by the runner. Time delay that equals 0 may be scheduled to execute
     * immediately. The unit of time delay should be microsecond.
     * </pre>
     *
     * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
     */
    com.google.protobuf.DurationOrBuilder getRequestedTimeDelayOrBuilder();
  }
  /**
   * <pre>
   * An Application should be scheduled for execution after a delay.
   * Either an absolute timestamp or a relative timestamp can represent a
   * scheduled execution time.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.DelayedBundleApplication}
   */
  public static final class DelayedBundleApplication extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.DelayedBundleApplication)
      DelayedBundleApplicationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DelayedBundleApplication.newBuilder() to construct.
    private DelayedBundleApplication(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DelayedBundleApplication() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DelayedBundleApplication();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DelayedBundleApplication(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder subBuilder = null;
              if (application_ != null) {
                subBuilder = application_.toBuilder();
              }
              application_ = input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(application_);
                application_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.Duration.Builder subBuilder = null;
              if (requestedTimeDelay_ != null) {
                subBuilder = requestedTimeDelay_.toBuilder();
              }
              requestedTimeDelay_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(requestedTimeDelay_);
                requestedTimeDelay_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder.class);
    }

    public static final int APPLICATION_FIELD_NUMBER = 1;
    private org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication application_;
    /**
     * <pre>
     * (Required) The application that should be scheduled.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
     * @return Whether the application field is set.
     */
    @java.lang.Override
    public boolean hasApplication() {
      return application_ != null;
    }
    /**
     * <pre>
     * (Required) The application that should be scheduled.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
     * @return The application.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication getApplication() {
      return application_ == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.getDefaultInstance() : application_;
    }
    /**
     * <pre>
     * (Required) The application that should be scheduled.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder getApplicationOrBuilder() {
      return getApplication();
    }

    public static final int REQUESTED_TIME_DELAY_FIELD_NUMBER = 2;
    private com.google.protobuf.Duration requestedTimeDelay_;
    /**
     * <pre>
     * Recommended time delay at which the application should be scheduled to
     * execute by the runner. Time delay that equals 0 may be scheduled to execute
     * immediately. The unit of time delay should be microsecond.
     * </pre>
     *
     * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
     * @return Whether the requestedTimeDelay field is set.
     */
    @java.lang.Override
    public boolean hasRequestedTimeDelay() {
      return requestedTimeDelay_ != null;
    }
    /**
     * <pre>
     * Recommended time delay at which the application should be scheduled to
     * execute by the runner. Time delay that equals 0 may be scheduled to execute
     * immediately. The unit of time delay should be microsecond.
     * </pre>
     *
     * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
     * @return The requestedTimeDelay.
     */
    @java.lang.Override
    public com.google.protobuf.Duration getRequestedTimeDelay() {
      return requestedTimeDelay_ == null ? com.google.protobuf.Duration.getDefaultInstance() : requestedTimeDelay_;
    }
    /**
     * <pre>
     * Recommended time delay at which the application should be scheduled to
     * execute by the runner. Time delay that equals 0 may be scheduled to execute
     * immediately. The unit of time delay should be microsecond.
     * </pre>
     *
     * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DurationOrBuilder getRequestedTimeDelayOrBuilder() {
      return getRequestedTimeDelay();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (application_ != null) {
        output.writeMessage(1, getApplication());
      }
      if (requestedTimeDelay_ != null) {
        output.writeMessage(2, getRequestedTimeDelay());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (application_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getApplication());
      }
      if (requestedTimeDelay_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getRequestedTimeDelay());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication) obj;

      if (hasApplication() != other.hasApplication()) return false;
      if (hasApplication()) {
        if (!getApplication()
            .equals(other.getApplication())) return false;
      }
      if (hasRequestedTimeDelay() != other.hasRequestedTimeDelay()) return false;
      if (hasRequestedTimeDelay()) {
        if (!getRequestedTimeDelay()
            .equals(other.getRequestedTimeDelay())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasApplication()) {
        hash = (37 * hash) + APPLICATION_FIELD_NUMBER;
        hash = (53 * hash) + getApplication().hashCode();
      }
      if (hasRequestedTimeDelay()) {
        hash = (37 * hash) + REQUESTED_TIME_DELAY_FIELD_NUMBER;
        hash = (53 * hash) + getRequestedTimeDelay().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An Application should be scheduled for execution after a delay.
     * Either an absolute timestamp or a relative timestamp can represent a
     * scheduled execution time.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.DelayedBundleApplication}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.DelayedBundleApplication)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (applicationBuilder_ == null) {
          application_ = null;
        } else {
          application_ = null;
          applicationBuilder_ = null;
        }
        if (requestedTimeDelayBuilder_ == null) {
          requestedTimeDelay_ = null;
        } else {
          requestedTimeDelay_ = null;
          requestedTimeDelayBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication(this);
        if (applicationBuilder_ == null) {
          result.application_ = application_;
        } else {
          result.application_ = applicationBuilder_.build();
        }
        if (requestedTimeDelayBuilder_ == null) {
          result.requestedTimeDelay_ = requestedTimeDelay_;
        } else {
          result.requestedTimeDelay_ = requestedTimeDelayBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.getDefaultInstance()) return this;
        if (other.hasApplication()) {
          mergeApplication(other.getApplication());
        }
        if (other.hasRequestedTimeDelay()) {
          mergeRequestedTimeDelay(other.getRequestedTimeDelay());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication application_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder> applicationBuilder_;
      /**
       * <pre>
       * (Required) The application that should be scheduled.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
       * @return Whether the application field is set.
       */
      public boolean hasApplication() {
        return applicationBuilder_ != null || application_ != null;
      }
      /**
       * <pre>
       * (Required) The application that should be scheduled.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
       * @return The application.
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication getApplication() {
        if (applicationBuilder_ == null) {
          return application_ == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.getDefaultInstance() : application_;
        } else {
          return applicationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The application that should be scheduled.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
       */
      public Builder setApplication(org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication value) {
        if (applicationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          application_ = value;
          onChanged();
        } else {
          applicationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The application that should be scheduled.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
       */
      public Builder setApplication(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder builderForValue) {
        if (applicationBuilder_ == null) {
          application_ = builderForValue.build();
          onChanged();
        } else {
          applicationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The application that should be scheduled.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
       */
      public Builder mergeApplication(org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication value) {
        if (applicationBuilder_ == null) {
          if (application_ != null) {
            application_ =
              org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.newBuilder(application_).mergeFrom(value).buildPartial();
          } else {
            application_ = value;
          }
          onChanged();
        } else {
          applicationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The application that should be scheduled.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
       */
      public Builder clearApplication() {
        if (applicationBuilder_ == null) {
          application_ = null;
          onChanged();
        } else {
          application_ = null;
          applicationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The application that should be scheduled.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder getApplicationBuilder() {
        
        onChanged();
        return getApplicationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The application that should be scheduled.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder getApplicationOrBuilder() {
        if (applicationBuilder_ != null) {
          return applicationBuilder_.getMessageOrBuilder();
        } else {
          return application_ == null ?
              org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.getDefaultInstance() : application_;
        }
      }
      /**
       * <pre>
       * (Required) The application that should be scheduled.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.BundleApplication application = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder> 
          getApplicationFieldBuilder() {
        if (applicationBuilder_ == null) {
          applicationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder>(
                  getApplication(),
                  getParentForChildren(),
                  isClean());
          application_ = null;
        }
        return applicationBuilder_;
      }

      private com.google.protobuf.Duration requestedTimeDelay_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> requestedTimeDelayBuilder_;
      /**
       * <pre>
       * Recommended time delay at which the application should be scheduled to
       * execute by the runner. Time delay that equals 0 may be scheduled to execute
       * immediately. The unit of time delay should be microsecond.
       * </pre>
       *
       * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
       * @return Whether the requestedTimeDelay field is set.
       */
      public boolean hasRequestedTimeDelay() {
        return requestedTimeDelayBuilder_ != null || requestedTimeDelay_ != null;
      }
      /**
       * <pre>
       * Recommended time delay at which the application should be scheduled to
       * execute by the runner. Time delay that equals 0 may be scheduled to execute
       * immediately. The unit of time delay should be microsecond.
       * </pre>
       *
       * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
       * @return The requestedTimeDelay.
       */
      public com.google.protobuf.Duration getRequestedTimeDelay() {
        if (requestedTimeDelayBuilder_ == null) {
          return requestedTimeDelay_ == null ? com.google.protobuf.Duration.getDefaultInstance() : requestedTimeDelay_;
        } else {
          return requestedTimeDelayBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Recommended time delay at which the application should be scheduled to
       * execute by the runner. Time delay that equals 0 may be scheduled to execute
       * immediately. The unit of time delay should be microsecond.
       * </pre>
       *
       * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
       */
      public Builder setRequestedTimeDelay(com.google.protobuf.Duration value) {
        if (requestedTimeDelayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestedTimeDelay_ = value;
          onChanged();
        } else {
          requestedTimeDelayBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Recommended time delay at which the application should be scheduled to
       * execute by the runner. Time delay that equals 0 may be scheduled to execute
       * immediately. The unit of time delay should be microsecond.
       * </pre>
       *
       * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
       */
      public Builder setRequestedTimeDelay(
          com.google.protobuf.Duration.Builder builderForValue) {
        if (requestedTimeDelayBuilder_ == null) {
          requestedTimeDelay_ = builderForValue.build();
          onChanged();
        } else {
          requestedTimeDelayBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Recommended time delay at which the application should be scheduled to
       * execute by the runner. Time delay that equals 0 may be scheduled to execute
       * immediately. The unit of time delay should be microsecond.
       * </pre>
       *
       * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
       */
      public Builder mergeRequestedTimeDelay(com.google.protobuf.Duration value) {
        if (requestedTimeDelayBuilder_ == null) {
          if (requestedTimeDelay_ != null) {
            requestedTimeDelay_ =
              com.google.protobuf.Duration.newBuilder(requestedTimeDelay_).mergeFrom(value).buildPartial();
          } else {
            requestedTimeDelay_ = value;
          }
          onChanged();
        } else {
          requestedTimeDelayBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Recommended time delay at which the application should be scheduled to
       * execute by the runner. Time delay that equals 0 may be scheduled to execute
       * immediately. The unit of time delay should be microsecond.
       * </pre>
       *
       * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
       */
      public Builder clearRequestedTimeDelay() {
        if (requestedTimeDelayBuilder_ == null) {
          requestedTimeDelay_ = null;
          onChanged();
        } else {
          requestedTimeDelay_ = null;
          requestedTimeDelayBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Recommended time delay at which the application should be scheduled to
       * execute by the runner. Time delay that equals 0 may be scheduled to execute
       * immediately. The unit of time delay should be microsecond.
       * </pre>
       *
       * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
       */
      public com.google.protobuf.Duration.Builder getRequestedTimeDelayBuilder() {
        
        onChanged();
        return getRequestedTimeDelayFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Recommended time delay at which the application should be scheduled to
       * execute by the runner. Time delay that equals 0 may be scheduled to execute
       * immediately. The unit of time delay should be microsecond.
       * </pre>
       *
       * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
       */
      public com.google.protobuf.DurationOrBuilder getRequestedTimeDelayOrBuilder() {
        if (requestedTimeDelayBuilder_ != null) {
          return requestedTimeDelayBuilder_.getMessageOrBuilder();
        } else {
          return requestedTimeDelay_ == null ?
              com.google.protobuf.Duration.getDefaultInstance() : requestedTimeDelay_;
        }
      }
      /**
       * <pre>
       * Recommended time delay at which the application should be scheduled to
       * execute by the runner. Time delay that equals 0 may be scheduled to execute
       * immediately. The unit of time delay should be microsecond.
       * </pre>
       *
       * <code>.google.protobuf.Duration requested_time_delay = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
          getRequestedTimeDelayFieldBuilder() {
        if (requestedTimeDelayBuilder_ == null) {
          requestedTimeDelayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                  getRequestedTimeDelay(),
                  getParentForChildren(),
                  isClean());
          requestedTimeDelay_ = null;
        }
        return requestedTimeDelayBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.DelayedBundleApplication)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.DelayedBundleApplication)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DelayedBundleApplication>
        PARSER = new com.google.protobuf.AbstractParser<DelayedBundleApplication>() {
      @java.lang.Override
      public DelayedBundleApplication parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DelayedBundleApplication(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DelayedBundleApplication> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DelayedBundleApplication> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProcessBundleRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A reference to the process bundle descriptor that must be
     * instantiated and executed by the SDK harness.
     * </pre>
     *
     * <code>string process_bundle_descriptor_id = 1;</code>
     * @return The processBundleDescriptorId.
     */
    java.lang.String getProcessBundleDescriptorId();
    /**
     * <pre>
     * (Required) A reference to the process bundle descriptor that must be
     * instantiated and executed by the SDK harness.
     * </pre>
     *
     * <code>string process_bundle_descriptor_id = 1;</code>
     * @return The bytes for processBundleDescriptorId.
     */
    com.google.protobuf.ByteString
        getProcessBundleDescriptorIdBytes();

    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken> 
        getCacheTokensList();
    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken getCacheTokens(int index);
    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    int getCacheTokensCount();
    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder> 
        getCacheTokensOrBuilderList();
    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder getCacheTokensOrBuilder(
        int index);

    /**
     * <pre>
     * (Optional) Elements to be processed with the bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleRequest.
     * This embedding is to achieve better efficiency for bundles that contain
     * only small amounts of data and are cheap to be processed on the SDK harness
     * side. This field can be set only if the SDK declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more
     * at https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
     * @return Whether the elements field is set.
     */
    boolean hasElements();
    /**
     * <pre>
     * (Optional) Elements to be processed with the bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleRequest.
     * This embedding is to achieve better efficiency for bundles that contain
     * only small amounts of data and are cheap to be processed on the SDK harness
     * side. This field can be set only if the SDK declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more
     * at https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
     * @return The elements.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements getElements();
    /**
     * <pre>
     * (Optional) Elements to be processed with the bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleRequest.
     * This embedding is to achieve better efficiency for bundles that contain
     * only small amounts of data and are cheap to be processed on the SDK harness
     * side. This field can be set only if the SDK declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more
     * at https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder getElementsOrBuilder();
  }
  /**
   * <pre>
   * A request to process a given bundle.
   * Stable
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleRequest}
   */
  public static final class ProcessBundleRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest)
      ProcessBundleRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessBundleRequest.newBuilder() to construct.
    private ProcessBundleRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessBundleRequest() {
      processBundleDescriptorId_ = "";
      cacheTokens_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProcessBundleRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProcessBundleRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              processBundleDescriptorId_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                cacheTokens_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken>();
                mutable_bitField0_ |= 0x00000001;
              }
              cacheTokens_.add(
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.parser(), extensionRegistry));
              break;
            }
            case 26: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder subBuilder = null;
              if (elements_ != null) {
                subBuilder = elements_.toBuilder();
              }
              elements_ = input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(elements_);
                elements_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          cacheTokens_ = java.util.Collections.unmodifiableList(cacheTokens_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.Builder.class);
    }

    public interface CacheTokenOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
       * @return Whether the userState field is set.
       */
      boolean hasUserState();
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
       * @return The userState.
       */
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState getUserState();
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
       */
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserStateOrBuilder getUserStateOrBuilder();

      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
       * @return Whether the sideInput field is set.
       */
      boolean hasSideInput();
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
       * @return The sideInput.
       */
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput getSideInput();
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
       */
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInputOrBuilder getSideInputOrBuilder();

      /**
       * <pre>
       * An opaque token used with the StateKey to create a globally unique
       * identifier.
       * </pre>
       *
       * <code>bytes token = 10;</code>
       * @return The token.
       */
      com.google.protobuf.ByteString getToken();

      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.TypeCase getTypeCase();
    }
    /**
     * <pre>
     * Contains the cache token and also defines the scope of what the token applies to.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken}
     */
    public static final class CacheToken extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken)
        CacheTokenOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use CacheToken.newBuilder() to construct.
      private CacheToken(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private CacheToken() {
        token_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new CacheToken();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private CacheToken(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.Builder subBuilder = null;
                if (typeCase_ == 1) {
                  subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_).toBuilder();
                }
                type_ =
                    input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_);
                  type_ = subBuilder.buildPartial();
                }
                typeCase_ = 1;
                break;
              }
              case 18: {
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.Builder subBuilder = null;
                if (typeCase_ == 2) {
                  subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_).toBuilder();
                }
                type_ =
                    input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_);
                  type_ = subBuilder.buildPartial();
                }
                typeCase_ = 2;
                break;
              }
              case 82: {

                token_ = input.readBytes();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder.class);
      }

      public interface UserStateOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState)
          com.google.protobuf.MessageOrBuilder {
      }
      /**
       * <pre>
       * A flag to indicate a cache token is valid for all user state.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState}
       */
      public static final class UserState extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState)
          UserStateOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use UserState.newBuilder() to construct.
        private UserState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private UserState() {
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new UserState();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private UserState(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.Builder.class);
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState)) {
            return super.equals(obj);
          }
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) obj;

          if (!unknownFields.equals(other.unknownFields)) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * A flag to indicate a cache token is valid for all user state.
         * </pre>
         *
         * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState)
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserStateOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.Builder.class);
          }

          // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_descriptor;
          }

          @java.lang.Override
          public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState getDefaultInstanceForType() {
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance();
          }

          @java.lang.Override
          public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState build() {
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState buildPartial() {
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState(this);
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) {
              return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState other) {
            if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance()) return this;
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState)
        }

        // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState)
        private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState();
        }

        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<UserState>
            PARSER = new com.google.protobuf.AbstractParser<UserState>() {
          @java.lang.Override
          public UserState parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new UserState(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<UserState> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<UserState> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public interface SideInputOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The transformId.
         */
        java.lang.String getTransformId();
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The bytes for transformId.
         */
        com.google.protobuf.ByteString
            getTransformIdBytes();

        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The sideInputId.
         */
        java.lang.String getSideInputId();
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The bytes for sideInputId.
         */
        com.google.protobuf.ByteString
            getSideInputIdBytes();
      }
      /**
       * <pre>
       * A flag to indicate a cache token is valid for a side input.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput}
       */
      public static final class SideInput extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput)
          SideInputOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use SideInput.newBuilder() to construct.
        private SideInput(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private SideInput() {
          transformId_ = "";
          sideInputId_ = "";
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new SideInput();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private SideInput(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();

                  transformId_ = s;
                  break;
                }
                case 18: {
                  java.lang.String s = input.readStringRequireUtf8();

                  sideInputId_ = s;
                  break;
                }
                default: {
                  if (!parseUnknownField(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.Builder.class);
        }

        public static final int TRANSFORM_ID_FIELD_NUMBER = 1;
        private volatile java.lang.Object transformId_;
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The transformId.
         */
        @java.lang.Override
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The bytes for transformId.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int SIDE_INPUT_ID_FIELD_NUMBER = 2;
        private volatile java.lang.Object sideInputId_;
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The sideInputId.
         */
        @java.lang.Override
        public java.lang.String getSideInputId() {
          java.lang.Object ref = sideInputId_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sideInputId_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The bytes for sideInputId.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getSideInputIdBytes() {
          java.lang.Object ref = sideInputId_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sideInputId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transformId_);
          }
          if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sideInputId_)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sideInputId_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transformId_);
          }
          if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sideInputId_)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sideInputId_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput)) {
            return super.equals(obj);
          }
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) obj;

          if (!getTransformId()
              .equals(other.getTransformId())) return false;
          if (!getSideInputId()
              .equals(other.getSideInputId())) return false;
          if (!unknownFields.equals(other.unknownFields)) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
          hash = (53 * hash) + getTransformId().hashCode();
          hash = (37 * hash) + SIDE_INPUT_ID_FIELD_NUMBER;
          hash = (53 * hash) + getSideInputId().hashCode();
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * A flag to indicate a cache token is valid for a side input.
         * </pre>
         *
         * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput)
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInputOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.Builder.class);
          }

          // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            transformId_ = "";

            sideInputId_ = "";

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_descriptor;
          }

          @java.lang.Override
          public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput getDefaultInstanceForType() {
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.getDefaultInstance();
          }

          @java.lang.Override
          public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput build() {
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput buildPartial() {
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput(this);
            result.transformId_ = transformId_;
            result.sideInputId_ = sideInputId_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) {
              return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput other) {
            if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.getDefaultInstance()) return this;
            if (!other.getTransformId().isEmpty()) {
              transformId_ = other.transformId_;
              onChanged();
            }
            if (!other.getSideInputId().isEmpty()) {
              sideInputId_ = other.sideInputId_;
              onChanged();
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private java.lang.Object transformId_ = "";
          /**
           * <pre>
           * (Required) The id of the PTransform containing a side input.
           * </pre>
           *
           * <code>string transform_id = 1;</code>
           * @return The transformId.
           */
          public java.lang.String getTransformId() {
            java.lang.Object ref = transformId_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              transformId_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * (Required) The id of the PTransform containing a side input.
           * </pre>
           *
           * <code>string transform_id = 1;</code>
           * @return The bytes for transformId.
           */
          public com.google.protobuf.ByteString
              getTransformIdBytes() {
            java.lang.Object ref = transformId_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              transformId_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * (Required) The id of the PTransform containing a side input.
           * </pre>
           *
           * <code>string transform_id = 1;</code>
           * @param value The transformId to set.
           * @return This builder for chaining.
           */
          public Builder setTransformId(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            transformId_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * (Required) The id of the PTransform containing a side input.
           * </pre>
           *
           * <code>string transform_id = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearTransformId() {
            
            transformId_ = getDefaultInstance().getTransformId();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * (Required) The id of the PTransform containing a side input.
           * </pre>
           *
           * <code>string transform_id = 1;</code>
           * @param value The bytes for transformId to set.
           * @return This builder for chaining.
           */
          public Builder setTransformIdBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            transformId_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object sideInputId_ = "";
          /**
           * <pre>
           * (Required) The id of the side input.
           * </pre>
           *
           * <code>string side_input_id = 2;</code>
           * @return The sideInputId.
           */
          public java.lang.String getSideInputId() {
            java.lang.Object ref = sideInputId_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              sideInputId_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * (Required) The id of the side input.
           * </pre>
           *
           * <code>string side_input_id = 2;</code>
           * @return The bytes for sideInputId.
           */
          public com.google.protobuf.ByteString
              getSideInputIdBytes() {
            java.lang.Object ref = sideInputId_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              sideInputId_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * (Required) The id of the side input.
           * </pre>
           *
           * <code>string side_input_id = 2;</code>
           * @param value The sideInputId to set.
           * @return This builder for chaining.
           */
          public Builder setSideInputId(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            sideInputId_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * (Required) The id of the side input.
           * </pre>
           *
           * <code>string side_input_id = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearSideInputId() {
            
            sideInputId_ = getDefaultInstance().getSideInputId();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * (Required) The id of the side input.
           * </pre>
           *
           * <code>string side_input_id = 2;</code>
           * @param value The bytes for sideInputId to set.
           * @return This builder for chaining.
           */
          public Builder setSideInputIdBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            sideInputId_ = value;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput)
        }

        // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput)
        private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput();
        }

        public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<SideInput>
            PARSER = new com.google.protobuf.AbstractParser<SideInput>() {
          @java.lang.Override
          public SideInput parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new SideInput(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<SideInput> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<SideInput> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int typeCase_ = 0;
      private java.lang.Object type_;
      public enum TypeCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        USER_STATE(1),
        SIDE_INPUT(2),
        TYPE_NOT_SET(0);
        private final int value;
        private TypeCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TypeCase valueOf(int value) {
          return forNumber(value);
        }

        public static TypeCase forNumber(int value) {
          switch (value) {
            case 1: return USER_STATE;
            case 2: return SIDE_INPUT;
            case 0: return TYPE_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public TypeCase
      getTypeCase() {
        return TypeCase.forNumber(
            typeCase_);
      }

      public static final int USER_STATE_FIELD_NUMBER = 1;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
       * @return Whether the userState field is set.
       */
      @java.lang.Override
      public boolean hasUserState() {
        return typeCase_ == 1;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
       * @return The userState.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState getUserState() {
        if (typeCase_ == 1) {
           return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_;
        }
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserStateOrBuilder getUserStateOrBuilder() {
        if (typeCase_ == 1) {
           return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_;
        }
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance();
      }

      public static final int SIDE_INPUT_FIELD_NUMBER = 2;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
       * @return Whether the sideInput field is set.
       */
      @java.lang.Override
      public boolean hasSideInput() {
        return typeCase_ == 2;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
       * @return The sideInput.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput getSideInput() {
        if (typeCase_ == 2) {
           return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_;
        }
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.getDefaultInstance();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInputOrBuilder getSideInputOrBuilder() {
        if (typeCase_ == 2) {
           return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_;
        }
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.getDefaultInstance();
      }

      public static final int TOKEN_FIELD_NUMBER = 10;
      private com.google.protobuf.ByteString token_;
      /**
       * <pre>
       * An opaque token used with the StateKey to create a globally unique
       * identifier.
       * </pre>
       *
       * <code>bytes token = 10;</code>
       * @return The token.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getToken() {
        return token_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (typeCase_ == 1) {
          output.writeMessage(1, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_);
        }
        if (typeCase_ == 2) {
          output.writeMessage(2, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_);
        }
        if (!token_.isEmpty()) {
          output.writeBytes(10, token_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (typeCase_ == 1) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_);
        }
        if (typeCase_ == 2) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_);
        }
        if (!token_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(10, token_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken) obj;

        if (!getToken()
            .equals(other.getToken())) return false;
        if (!getTypeCase().equals(other.getTypeCase())) return false;
        switch (typeCase_) {
          case 1:
            if (!getUserState()
                .equals(other.getUserState())) return false;
            break;
          case 2:
            if (!getSideInput()
                .equals(other.getSideInput())) return false;
            break;
          case 0:
          default:
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TOKEN_FIELD_NUMBER;
        hash = (53 * hash) + getToken().hashCode();
        switch (typeCase_) {
          case 1:
            hash = (37 * hash) + USER_STATE_FIELD_NUMBER;
            hash = (53 * hash) + getUserState().hashCode();
            break;
          case 2:
            hash = (37 * hash) + SIDE_INPUT_FIELD_NUMBER;
            hash = (53 * hash) + getSideInput().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Contains the cache token and also defines the scope of what the token applies to.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          token_ = com.google.protobuf.ByteString.EMPTY;

          typeCase_ = 0;
          type_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken(this);
          if (typeCase_ == 1) {
            if (userStateBuilder_ == null) {
              result.type_ = type_;
            } else {
              result.type_ = userStateBuilder_.build();
            }
          }
          if (typeCase_ == 2) {
            if (sideInputBuilder_ == null) {
              result.type_ = type_;
            } else {
              result.type_ = sideInputBuilder_.build();
            }
          }
          result.token_ = token_;
          result.typeCase_ = typeCase_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.getDefaultInstance()) return this;
          if (other.getToken() != com.google.protobuf.ByteString.EMPTY) {
            setToken(other.getToken());
          }
          switch (other.getTypeCase()) {
            case USER_STATE: {
              mergeUserState(other.getUserState());
              break;
            }
            case SIDE_INPUT: {
              mergeSideInput(other.getSideInput());
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int typeCase_ = 0;
        private java.lang.Object type_;
        public TypeCase
            getTypeCase() {
          return TypeCase.forNumber(
              typeCase_);
        }

        public Builder clearType() {
          typeCase_ = 0;
          type_ = null;
          onChanged();
          return this;
        }


        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserStateOrBuilder> userStateBuilder_;
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
         * @return Whether the userState field is set.
         */
        @java.lang.Override
        public boolean hasUserState() {
          return typeCase_ == 1;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
         * @return The userState.
         */
        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState getUserState() {
          if (userStateBuilder_ == null) {
            if (typeCase_ == 1) {
              return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_;
            }
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance();
          } else {
            if (typeCase_ == 1) {
              return userStateBuilder_.getMessage();
            }
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
         */
        public Builder setUserState(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState value) {
          if (userStateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            type_ = value;
            onChanged();
          } else {
            userStateBuilder_.setMessage(value);
          }
          typeCase_ = 1;
          return this;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
         */
        public Builder setUserState(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.Builder builderForValue) {
          if (userStateBuilder_ == null) {
            type_ = builderForValue.build();
            onChanged();
          } else {
            userStateBuilder_.setMessage(builderForValue.build());
          }
          typeCase_ = 1;
          return this;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
         */
        public Builder mergeUserState(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState value) {
          if (userStateBuilder_ == null) {
            if (typeCase_ == 1 &&
                type_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance()) {
              type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_)
                  .mergeFrom(value).buildPartial();
            } else {
              type_ = value;
            }
            onChanged();
          } else {
            if (typeCase_ == 1) {
              userStateBuilder_.mergeFrom(value);
            } else {
              userStateBuilder_.setMessage(value);
            }
          }
          typeCase_ = 1;
          return this;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
         */
        public Builder clearUserState() {
          if (userStateBuilder_ == null) {
            if (typeCase_ == 1) {
              typeCase_ = 0;
              type_ = null;
              onChanged();
            }
          } else {
            if (typeCase_ == 1) {
              typeCase_ = 0;
              type_ = null;
            }
            userStateBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
         */
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.Builder getUserStateBuilder() {
          return getUserStateFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
         */
        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserStateOrBuilder getUserStateOrBuilder() {
          if ((typeCase_ == 1) && (userStateBuilder_ != null)) {
            return userStateBuilder_.getMessageOrBuilder();
          } else {
            if (typeCase_ == 1) {
              return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_;
            }
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.UserState user_state = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserStateOrBuilder> 
            getUserStateFieldBuilder() {
          if (userStateBuilder_ == null) {
            if (!(typeCase_ == 1)) {
              type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance();
            }
            userStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserStateOrBuilder>(
                    (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.UserState) type_,
                    getParentForChildren(),
                    isClean());
            type_ = null;
          }
          typeCase_ = 1;
          onChanged();;
          return userStateBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInputOrBuilder> sideInputBuilder_;
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
         * @return Whether the sideInput field is set.
         */
        @java.lang.Override
        public boolean hasSideInput() {
          return typeCase_ == 2;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
         * @return The sideInput.
         */
        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput getSideInput() {
          if (sideInputBuilder_ == null) {
            if (typeCase_ == 2) {
              return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_;
            }
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.getDefaultInstance();
          } else {
            if (typeCase_ == 2) {
              return sideInputBuilder_.getMessage();
            }
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
         */
        public Builder setSideInput(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput value) {
          if (sideInputBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            type_ = value;
            onChanged();
          } else {
            sideInputBuilder_.setMessage(value);
          }
          typeCase_ = 2;
          return this;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
         */
        public Builder setSideInput(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.Builder builderForValue) {
          if (sideInputBuilder_ == null) {
            type_ = builderForValue.build();
            onChanged();
          } else {
            sideInputBuilder_.setMessage(builderForValue.build());
          }
          typeCase_ = 2;
          return this;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
         */
        public Builder mergeSideInput(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput value) {
          if (sideInputBuilder_ == null) {
            if (typeCase_ == 2 &&
                type_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.getDefaultInstance()) {
              type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_)
                  .mergeFrom(value).buildPartial();
            } else {
              type_ = value;
            }
            onChanged();
          } else {
            if (typeCase_ == 2) {
              sideInputBuilder_.mergeFrom(value);
            } else {
              sideInputBuilder_.setMessage(value);
            }
          }
          typeCase_ = 2;
          return this;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
         */
        public Builder clearSideInput() {
          if (sideInputBuilder_ == null) {
            if (typeCase_ == 2) {
              typeCase_ = 0;
              type_ = null;
              onChanged();
            }
          } else {
            if (typeCase_ == 2) {
              typeCase_ = 0;
              type_ = null;
            }
            sideInputBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
         */
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.Builder getSideInputBuilder() {
          return getSideInputFieldBuilder().getBuilder();
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
         */
        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInputOrBuilder getSideInputOrBuilder() {
          if ((typeCase_ == 2) && (sideInputBuilder_ != null)) {
            return sideInputBuilder_.getMessageOrBuilder();
          } else {
            if (typeCase_ == 2) {
              return (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_;
            }
            return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.getDefaultInstance();
          }
        }
        /**
         * <code>.org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken.SideInput side_input = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInputOrBuilder> 
            getSideInputFieldBuilder() {
          if (sideInputBuilder_ == null) {
            if (!(typeCase_ == 2)) {
              type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.getDefaultInstance();
            }
            sideInputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInputOrBuilder>(
                    (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.SideInput) type_,
                    getParentForChildren(),
                    isClean());
            type_ = null;
          }
          typeCase_ = 2;
          onChanged();;
          return sideInputBuilder_;
        }

        private com.google.protobuf.ByteString token_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * An opaque token used with the StateKey to create a globally unique
         * identifier.
         * </pre>
         *
         * <code>bytes token = 10;</code>
         * @return The token.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getToken() {
          return token_;
        }
        /**
         * <pre>
         * An opaque token used with the StateKey to create a globally unique
         * identifier.
         * </pre>
         *
         * <code>bytes token = 10;</code>
         * @param value The token to set.
         * @return This builder for chaining.
         */
        public Builder setToken(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          token_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * An opaque token used with the StateKey to create a globally unique
         * identifier.
         * </pre>
         *
         * <code>bytes token = 10;</code>
         * @return This builder for chaining.
         */
        public Builder clearToken() {
          
          token_ = getDefaultInstance().getToken();
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<CacheToken>
          PARSER = new com.google.protobuf.AbstractParser<CacheToken>() {
        @java.lang.Override
        public CacheToken parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new CacheToken(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<CacheToken> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<CacheToken> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int PROCESS_BUNDLE_DESCRIPTOR_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object processBundleDescriptorId_;
    /**
     * <pre>
     * (Required) A reference to the process bundle descriptor that must be
     * instantiated and executed by the SDK harness.
     * </pre>
     *
     * <code>string process_bundle_descriptor_id = 1;</code>
     * @return The processBundleDescriptorId.
     */
    @java.lang.Override
    public java.lang.String getProcessBundleDescriptorId() {
      java.lang.Object ref = processBundleDescriptorId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        processBundleDescriptorId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A reference to the process bundle descriptor that must be
     * instantiated and executed by the SDK harness.
     * </pre>
     *
     * <code>string process_bundle_descriptor_id = 1;</code>
     * @return The bytes for processBundleDescriptorId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getProcessBundleDescriptorIdBytes() {
      java.lang.Object ref = processBundleDescriptorId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        processBundleDescriptorId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CACHE_TOKENS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken> cacheTokens_;
    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken> getCacheTokensList() {
      return cacheTokens_;
    }
    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder> 
        getCacheTokensOrBuilderList() {
      return cacheTokens_;
    }
    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    @java.lang.Override
    public int getCacheTokensCount() {
      return cacheTokens_.size();
    }
    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken getCacheTokens(int index) {
      return cacheTokens_.get(index);
    }
    /**
     * <pre>
     * (Optional) A list of cache tokens that can be used by an SDK to reuse
     * cached data returned by the State API across multiple bundles.
     * Note that SDKs that can efficiently consume this field should declare
     * the beam:protocol:state_caching:v1 capability enabling runners to reduce
     * the amount of memory used.
     * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
     * for additional details on how to use the cache token with the State API
     * to cache data across bundle boundaries.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder getCacheTokensOrBuilder(
        int index) {
      return cacheTokens_.get(index);
    }

    public static final int ELEMENTS_FIELD_NUMBER = 3;
    private org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements elements_;
    /**
     * <pre>
     * (Optional) Elements to be processed with the bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleRequest.
     * This embedding is to achieve better efficiency for bundles that contain
     * only small amounts of data and are cheap to be processed on the SDK harness
     * side. This field can be set only if the SDK declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more
     * at https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
     * @return Whether the elements field is set.
     */
    @java.lang.Override
    public boolean hasElements() {
      return elements_ != null;
    }
    /**
     * <pre>
     * (Optional) Elements to be processed with the bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleRequest.
     * This embedding is to achieve better efficiency for bundles that contain
     * only small amounts of data and are cheap to be processed on the SDK harness
     * side. This field can be set only if the SDK declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more
     * at https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
     * @return The elements.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements getElements() {
      return elements_ == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.getDefaultInstance() : elements_;
    }
    /**
     * <pre>
     * (Optional) Elements to be processed with the bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleRequest.
     * This embedding is to achieve better efficiency for bundles that contain
     * only small amounts of data and are cheap to be processed on the SDK harness
     * side. This field can be set only if the SDK declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more
     * at https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder getElementsOrBuilder() {
      return getElements();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(processBundleDescriptorId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, processBundleDescriptorId_);
      }
      for (int i = 0; i < cacheTokens_.size(); i++) {
        output.writeMessage(2, cacheTokens_.get(i));
      }
      if (elements_ != null) {
        output.writeMessage(3, getElements());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(processBundleDescriptorId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, processBundleDescriptorId_);
      }
      for (int i = 0; i < cacheTokens_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cacheTokens_.get(i));
      }
      if (elements_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getElements());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) obj;

      if (!getProcessBundleDescriptorId()
          .equals(other.getProcessBundleDescriptorId())) return false;
      if (!getCacheTokensList()
          .equals(other.getCacheTokensList())) return false;
      if (hasElements() != other.hasElements()) return false;
      if (hasElements()) {
        if (!getElements()
            .equals(other.getElements())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PROCESS_BUNDLE_DESCRIPTOR_ID_FIELD_NUMBER;
      hash = (53 * hash) + getProcessBundleDescriptorId().hashCode();
      if (getCacheTokensCount() > 0) {
        hash = (37 * hash) + CACHE_TOKENS_FIELD_NUMBER;
        hash = (53 * hash) + getCacheTokensList().hashCode();
      }
      if (hasElements()) {
        hash = (37 * hash) + ELEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getElements().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A request to process a given bundle.
     * Stable
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCacheTokensFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        processBundleDescriptorId_ = "";

        if (cacheTokensBuilder_ == null) {
          cacheTokens_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cacheTokensBuilder_.clear();
        }
        if (elementsBuilder_ == null) {
          elements_ = null;
        } else {
          elements_ = null;
          elementsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest(this);
        int from_bitField0_ = bitField0_;
        result.processBundleDescriptorId_ = processBundleDescriptorId_;
        if (cacheTokensBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            cacheTokens_ = java.util.Collections.unmodifiableList(cacheTokens_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cacheTokens_ = cacheTokens_;
        } else {
          result.cacheTokens_ = cacheTokensBuilder_.build();
        }
        if (elementsBuilder_ == null) {
          result.elements_ = elements_;
        } else {
          result.elements_ = elementsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.getDefaultInstance()) return this;
        if (!other.getProcessBundleDescriptorId().isEmpty()) {
          processBundleDescriptorId_ = other.processBundleDescriptorId_;
          onChanged();
        }
        if (cacheTokensBuilder_ == null) {
          if (!other.cacheTokens_.isEmpty()) {
            if (cacheTokens_.isEmpty()) {
              cacheTokens_ = other.cacheTokens_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCacheTokensIsMutable();
              cacheTokens_.addAll(other.cacheTokens_);
            }
            onChanged();
          }
        } else {
          if (!other.cacheTokens_.isEmpty()) {
            if (cacheTokensBuilder_.isEmpty()) {
              cacheTokensBuilder_.dispose();
              cacheTokensBuilder_ = null;
              cacheTokens_ = other.cacheTokens_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cacheTokensBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCacheTokensFieldBuilder() : null;
            } else {
              cacheTokensBuilder_.addAllMessages(other.cacheTokens_);
            }
          }
        }
        if (other.hasElements()) {
          mergeElements(other.getElements());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object processBundleDescriptorId_ = "";
      /**
       * <pre>
       * (Required) A reference to the process bundle descriptor that must be
       * instantiated and executed by the SDK harness.
       * </pre>
       *
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @return The processBundleDescriptorId.
       */
      public java.lang.String getProcessBundleDescriptorId() {
        java.lang.Object ref = processBundleDescriptorId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          processBundleDescriptorId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference to the process bundle descriptor that must be
       * instantiated and executed by the SDK harness.
       * </pre>
       *
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @return The bytes for processBundleDescriptorId.
       */
      public com.google.protobuf.ByteString
          getProcessBundleDescriptorIdBytes() {
        java.lang.Object ref = processBundleDescriptorId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          processBundleDescriptorId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference to the process bundle descriptor that must be
       * instantiated and executed by the SDK harness.
       * </pre>
       *
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @param value The processBundleDescriptorId to set.
       * @return This builder for chaining.
       */
      public Builder setProcessBundleDescriptorId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        processBundleDescriptorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference to the process bundle descriptor that must be
       * instantiated and executed by the SDK harness.
       * </pre>
       *
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearProcessBundleDescriptorId() {
        
        processBundleDescriptorId_ = getDefaultInstance().getProcessBundleDescriptorId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference to the process bundle descriptor that must be
       * instantiated and executed by the SDK harness.
       * </pre>
       *
       * <code>string process_bundle_descriptor_id = 1;</code>
       * @param value The bytes for processBundleDescriptorId to set.
       * @return This builder for chaining.
       */
      public Builder setProcessBundleDescriptorIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        processBundleDescriptorId_ = value;
        onChanged();
        return this;
      }

      private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken> cacheTokens_ =
        java.util.Collections.emptyList();
      private void ensureCacheTokensIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          cacheTokens_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken>(cacheTokens_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder> cacheTokensBuilder_;

      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken> getCacheTokensList() {
        if (cacheTokensBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cacheTokens_);
        } else {
          return cacheTokensBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public int getCacheTokensCount() {
        if (cacheTokensBuilder_ == null) {
          return cacheTokens_.size();
        } else {
          return cacheTokensBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken getCacheTokens(int index) {
        if (cacheTokensBuilder_ == null) {
          return cacheTokens_.get(index);
        } else {
          return cacheTokensBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public Builder setCacheTokens(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken value) {
        if (cacheTokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCacheTokensIsMutable();
          cacheTokens_.set(index, value);
          onChanged();
        } else {
          cacheTokensBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public Builder setCacheTokens(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder builderForValue) {
        if (cacheTokensBuilder_ == null) {
          ensureCacheTokensIsMutable();
          cacheTokens_.set(index, builderForValue.build());
          onChanged();
        } else {
          cacheTokensBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public Builder addCacheTokens(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken value) {
        if (cacheTokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCacheTokensIsMutable();
          cacheTokens_.add(value);
          onChanged();
        } else {
          cacheTokensBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public Builder addCacheTokens(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken value) {
        if (cacheTokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCacheTokensIsMutable();
          cacheTokens_.add(index, value);
          onChanged();
        } else {
          cacheTokensBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public Builder addCacheTokens(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder builderForValue) {
        if (cacheTokensBuilder_ == null) {
          ensureCacheTokensIsMutable();
          cacheTokens_.add(builderForValue.build());
          onChanged();
        } else {
          cacheTokensBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public Builder addCacheTokens(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder builderForValue) {
        if (cacheTokensBuilder_ == null) {
          ensureCacheTokensIsMutable();
          cacheTokens_.add(index, builderForValue.build());
          onChanged();
        } else {
          cacheTokensBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public Builder addAllCacheTokens(
          java.lang.Iterable<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken> values) {
        if (cacheTokensBuilder_ == null) {
          ensureCacheTokensIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cacheTokens_);
          onChanged();
        } else {
          cacheTokensBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public Builder clearCacheTokens() {
        if (cacheTokensBuilder_ == null) {
          cacheTokens_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cacheTokensBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public Builder removeCacheTokens(int index) {
        if (cacheTokensBuilder_ == null) {
          ensureCacheTokensIsMutable();
          cacheTokens_.remove(index);
          onChanged();
        } else {
          cacheTokensBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder getCacheTokensBuilder(
          int index) {
        return getCacheTokensFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder getCacheTokensOrBuilder(
          int index) {
        if (cacheTokensBuilder_ == null) {
          return cacheTokens_.get(index);  } else {
          return cacheTokensBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder> 
           getCacheTokensOrBuilderList() {
        if (cacheTokensBuilder_ != null) {
          return cacheTokensBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cacheTokens_);
        }
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder addCacheTokensBuilder() {
        return getCacheTokensFieldBuilder().addBuilder(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder addCacheTokensBuilder(
          int index) {
        return getCacheTokensFieldBuilder().addBuilder(
            index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) A list of cache tokens that can be used by an SDK to reuse
       * cached data returned by the State API across multiple bundles.
       * Note that SDKs that can efficiently consume this field should declare
       * the beam:protocol:state_caching:v1 capability enabling runners to reduce
       * the amount of memory used.
       * See https://s.apache.org/beam-fn-state-api-and-bundle-processing#heading=h.7ghoih5aig5m
       * for additional details on how to use the cache token with the State API
       * to cache data across bundle boundaries.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleRequest.CacheToken cache_tokens = 2;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder> 
           getCacheTokensBuilderList() {
        return getCacheTokensFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder> 
          getCacheTokensFieldBuilder() {
        if (cacheTokensBuilder_ == null) {
          cacheTokensBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheToken.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest.CacheTokenOrBuilder>(
                  cacheTokens_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          cacheTokens_ = null;
        }
        return cacheTokensBuilder_;
      }

      private org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements elements_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder> elementsBuilder_;
      /**
       * <pre>
       * (Optional) Elements to be processed with the bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleRequest.
       * This embedding is to achieve better efficiency for bundles that contain
       * only small amounts of data and are cheap to be processed on the SDK harness
       * side. This field can be set only if the SDK declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more
       * at https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
       * @return Whether the elements field is set.
       */
      public boolean hasElements() {
        return elementsBuilder_ != null || elements_ != null;
      }
      /**
       * <pre>
       * (Optional) Elements to be processed with the bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleRequest.
       * This embedding is to achieve better efficiency for bundles that contain
       * only small amounts of data and are cheap to be processed on the SDK harness
       * side. This field can be set only if the SDK declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more
       * at https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
       * @return The elements.
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements getElements() {
        if (elementsBuilder_ == null) {
          return elements_ == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.getDefaultInstance() : elements_;
        } else {
          return elementsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Optional) Elements to be processed with the bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleRequest.
       * This embedding is to achieve better efficiency for bundles that contain
       * only small amounts of data and are cheap to be processed on the SDK harness
       * side. This field can be set only if the SDK declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more
       * at https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
       */
      public Builder setElements(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements value) {
        if (elementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          elements_ = value;
          onChanged();
        } else {
          elementsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Elements to be processed with the bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleRequest.
       * This embedding is to achieve better efficiency for bundles that contain
       * only small amounts of data and are cheap to be processed on the SDK harness
       * side. This field can be set only if the SDK declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more
       * at https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
       */
      public Builder setElements(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder builderForValue) {
        if (elementsBuilder_ == null) {
          elements_ = builderForValue.build();
          onChanged();
        } else {
          elementsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Elements to be processed with the bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleRequest.
       * This embedding is to achieve better efficiency for bundles that contain
       * only small amounts of data and are cheap to be processed on the SDK harness
       * side. This field can be set only if the SDK declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more
       * at https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
       */
      public Builder mergeElements(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements value) {
        if (elementsBuilder_ == null) {
          if (elements_ != null) {
            elements_ =
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.newBuilder(elements_).mergeFrom(value).buildPartial();
          } else {
            elements_ = value;
          }
          onChanged();
        } else {
          elementsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Elements to be processed with the bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleRequest.
       * This embedding is to achieve better efficiency for bundles that contain
       * only small amounts of data and are cheap to be processed on the SDK harness
       * side. This field can be set only if the SDK declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more
       * at https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
       */
      public Builder clearElements() {
        if (elementsBuilder_ == null) {
          elements_ = null;
          onChanged();
        } else {
          elements_ = null;
          elementsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Elements to be processed with the bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleRequest.
       * This embedding is to achieve better efficiency for bundles that contain
       * only small amounts of data and are cheap to be processed on the SDK harness
       * side. This field can be set only if the SDK declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more
       * at https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder getElementsBuilder() {
        
        onChanged();
        return getElementsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Optional) Elements to be processed with the bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleRequest.
       * This embedding is to achieve better efficiency for bundles that contain
       * only small amounts of data and are cheap to be processed on the SDK harness
       * side. This field can be set only if the SDK declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more
       * at https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder getElementsOrBuilder() {
        if (elementsBuilder_ != null) {
          return elementsBuilder_.getMessageOrBuilder();
        } else {
          return elements_ == null ?
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.getDefaultInstance() : elements_;
        }
      }
      /**
       * <pre>
       * (Optional) Elements to be processed with the bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleRequest.
       * This embedding is to achieve better efficiency for bundles that contain
       * only small amounts of data and are cheap to be processed on the SDK harness
       * side. This field can be set only if the SDK declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more
       * at https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder> 
          getElementsFieldBuilder() {
        if (elementsBuilder_ == null) {
          elementsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder>(
                  getElements(),
                  getParentForChildren(),
                  isClean());
          elements_ = null;
        }
        return elementsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProcessBundleRequest>
        PARSER = new com.google.protobuf.AbstractParser<ProcessBundleRequest>() {
      @java.lang.Override
      public ProcessBundleRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProcessBundleRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProcessBundleRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessBundleRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProcessBundleResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> 
        getResidualRootsList();
    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication getResidualRoots(int index);
    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    int getResidualRootsCount();
    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> 
        getResidualRootsOrBuilderList();
    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder getResidualRootsOrBuilder(
        int index);

    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> 
        getMonitoringInfosList();
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfos(int index);
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    int getMonitoringInfosCount();
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    java.util.List<? extends org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> 
        getMonitoringInfosOrBuilderList();
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder getMonitoringInfosOrBuilder(
        int index);

    /**
     * <pre>
     * (Optional) Specifies that the runner must callback to this worker
     * once the output of the bundle is committed. The Runner must send a
     * FinalizeBundleRequest with the instruction id of the ProcessBundleRequest
     * that is related to this ProcessBundleResponse.
     * </pre>
     *
     * <code>bool requires_finalization = 4;</code>
     * @return The requiresFinalization.
     */
    boolean getRequiresFinalization();

    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers across multiple bundles as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    int getMonitoringDataCount();
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers across multiple bundles as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    boolean containsMonitoringData(
        java.lang.String key);
    /**
     * Use {@link #getMonitoringDataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMonitoringData();
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers across multiple bundles as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMonitoringDataMap();
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers across multiple bundles as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */

    /* nullable */
com.google.protobuf.ByteString getMonitoringDataOrDefault(
        java.lang.String key,
        /* nullable */
com.google.protobuf.ByteString defaultValue);
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers across multiple bundles as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */

    com.google.protobuf.ByteString getMonitoringDataOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * (Optional) Output elements of the processed bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleResponse.
     * This embedding is to achieve better efficiency for bundles that only
     * contain small amounts of data. his field can be set only if the runner
     * declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more at
     * https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
     * @return Whether the elements field is set.
     */
    boolean hasElements();
    /**
     * <pre>
     * (Optional) Output elements of the processed bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleResponse.
     * This embedding is to achieve better efficiency for bundles that only
     * contain small amounts of data. his field can be set only if the runner
     * declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more at
     * https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
     * @return The elements.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements getElements();
    /**
     * <pre>
     * (Optional) Output elements of the processed bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleResponse.
     * This embedding is to achieve better efficiency for bundles that only
     * contain small amounts of data. his field can be set only if the runner
     * declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more at
     * https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder getElementsOrBuilder();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleResponse}
   */
  public static final class ProcessBundleResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleResponse)
      ProcessBundleResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessBundleResponse.newBuilder() to construct.
    private ProcessBundleResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessBundleResponse() {
      residualRoots_ = java.util.Collections.emptyList();
      monitoringInfos_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProcessBundleResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProcessBundleResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                residualRoots_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication>();
                mutable_bitField0_ |= 0x00000001;
              }
              residualRoots_.add(
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                monitoringInfos_ = new java.util.ArrayList<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              monitoringInfos_.add(
                  input.readMessage(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.parser(), extensionRegistry));
              break;
            }
            case 32: {

              requiresFinalization_ = input.readBool();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                monitoringData_ = com.google.protobuf.MapField.newMapField(
                    MonitoringDataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ByteString>
              monitoringData__ = input.readMessage(
                  MonitoringDataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              monitoringData_.getMutableMap().put(
                  monitoringData__.getKey(), monitoringData__.getValue());
              break;
            }
            case 50: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder subBuilder = null;
              if (elements_ != null) {
                subBuilder = elements_.toBuilder();
              }
              elements_ = input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(elements_);
                elements_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          residualRoots_ = java.util.Collections.unmodifiableList(residualRoots_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          monitoringInfos_ = java.util.Collections.unmodifiableList(monitoringInfos_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetMonitoringData();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.Builder.class);
    }

    public static final int RESIDUAL_ROOTS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> residualRoots_;
    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> getResidualRootsList() {
      return residualRoots_;
    }
    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> 
        getResidualRootsOrBuilderList() {
      return residualRoots_;
    }
    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public int getResidualRootsCount() {
      return residualRoots_.size();
    }
    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication getResidualRoots(int index) {
      return residualRoots_.get(index);
    }
    /**
     * <pre>
     * (Optional) Specifies that the bundle has not been completed and the
     * following applications need to be scheduled and executed in the future.
     * A runner that does not yet support residual roots MUST still check that
     * this is empty for correctness.
     * Note that these residual roots must not have been returned as part of a
     * prior split for this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder getResidualRootsOrBuilder(
        int index) {
      return residualRoots_.get(index);
    }

    public static final int MONITORING_INFOS_FIELD_NUMBER = 3;
    private java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> monitoringInfos_;
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> getMonitoringInfosList() {
      return monitoringInfos_;
    }
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> 
        getMonitoringInfosOrBuilderList() {
      return monitoringInfos_;
    }
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public int getMonitoringInfosCount() {
      return monitoringInfos_.size();
    }
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfos(int index) {
      return monitoringInfos_.get(index);
    }
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder getMonitoringInfosOrBuilder(
        int index) {
      return monitoringInfos_.get(index);
    }

    public static final int REQUIRES_FINALIZATION_FIELD_NUMBER = 4;
    private boolean requiresFinalization_;
    /**
     * <pre>
     * (Optional) Specifies that the runner must callback to this worker
     * once the output of the bundle is committed. The Runner must send a
     * FinalizeBundleRequest with the instruction id of the ProcessBundleRequest
     * that is related to this ProcessBundleResponse.
     * </pre>
     *
     * <code>bool requires_finalization = 4;</code>
     * @return The requiresFinalization.
     */
    @java.lang.Override
    public boolean getRequiresFinalization() {
      return requiresFinalization_;
    }

    public static final int MONITORING_DATA_FIELD_NUMBER = 5;
    private static final class MonitoringDataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_MonitoringDataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapField<
        java.lang.String, com.google.protobuf.ByteString> monitoringData_;
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
    internalGetMonitoringData() {
      if (monitoringData_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MonitoringDataDefaultEntryHolder.defaultEntry);
      }
      return monitoringData_;
    }

    public int getMonitoringDataCount() {
      return internalGetMonitoringData().getMap().size();
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers across multiple bundles as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */

    @java.lang.Override
    public boolean containsMonitoringData(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetMonitoringData().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMonitoringDataMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringData() {
      return getMonitoringDataMap();
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers across multiple bundles as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringDataMap() {
      return internalGetMonitoringData().getMap();
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers across multiple bundles as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMonitoringDataOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetMonitoringData().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers across multiple bundles as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMonitoringDataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetMonitoringData().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int ELEMENTS_FIELD_NUMBER = 6;
    private org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements elements_;
    /**
     * <pre>
     * (Optional) Output elements of the processed bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleResponse.
     * This embedding is to achieve better efficiency for bundles that only
     * contain small amounts of data. his field can be set only if the runner
     * declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more at
     * https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
     * @return Whether the elements field is set.
     */
    @java.lang.Override
    public boolean hasElements() {
      return elements_ != null;
    }
    /**
     * <pre>
     * (Optional) Output elements of the processed bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleResponse.
     * This embedding is to achieve better efficiency for bundles that only
     * contain small amounts of data. his field can be set only if the runner
     * declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more at
     * https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
     * @return The elements.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements getElements() {
      return elements_ == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.getDefaultInstance() : elements_;
    }
    /**
     * <pre>
     * (Optional) Output elements of the processed bundle. Either all or
     * none of the bundle elements should be included in the ProcessBundleResponse.
     * This embedding is to achieve better efficiency for bundles that only
     * contain small amounts of data. his field can be set only if the runner
     * declares that it supports the
     * beam:protocol:control_request_elements_embedding:v1 capability. See more at
     * https://s.apache.org/beam-fn-api-control-data-embedding.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder getElementsOrBuilder() {
      return getElements();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < residualRoots_.size(); i++) {
        output.writeMessage(2, residualRoots_.get(i));
      }
      for (int i = 0; i < monitoringInfos_.size(); i++) {
        output.writeMessage(3, monitoringInfos_.get(i));
      }
      if (requiresFinalization_ != false) {
        output.writeBool(4, requiresFinalization_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMonitoringData(),
          MonitoringDataDefaultEntryHolder.defaultEntry,
          5);
      if (elements_ != null) {
        output.writeMessage(6, getElements());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < residualRoots_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, residualRoots_.get(i));
      }
      for (int i = 0; i < monitoringInfos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, monitoringInfos_.get(i));
      }
      if (requiresFinalization_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, requiresFinalization_);
      }
      for (java.util.Map.Entry<java.lang.String, com.google.protobuf.ByteString> entry
           : internalGetMonitoringData().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ByteString>
        monitoringData__ = MonitoringDataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, monitoringData__);
      }
      if (elements_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getElements());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) obj;

      if (!getResidualRootsList()
          .equals(other.getResidualRootsList())) return false;
      if (!getMonitoringInfosList()
          .equals(other.getMonitoringInfosList())) return false;
      if (getRequiresFinalization()
          != other.getRequiresFinalization()) return false;
      if (!internalGetMonitoringData().equals(
          other.internalGetMonitoringData())) return false;
      if (hasElements() != other.hasElements()) return false;
      if (hasElements()) {
        if (!getElements()
            .equals(other.getElements())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getResidualRootsCount() > 0) {
        hash = (37 * hash) + RESIDUAL_ROOTS_FIELD_NUMBER;
        hash = (53 * hash) + getResidualRootsList().hashCode();
      }
      if (getMonitoringInfosCount() > 0) {
        hash = (37 * hash) + MONITORING_INFOS_FIELD_NUMBER;
        hash = (53 * hash) + getMonitoringInfosList().hashCode();
      }
      hash = (37 * hash) + REQUIRES_FINALIZATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getRequiresFinalization());
      if (!internalGetMonitoringData().getMap().isEmpty()) {
        hash = (37 * hash) + MONITORING_DATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMonitoringData().hashCode();
      }
      if (hasElements()) {
        hash = (37 * hash) + ELEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getElements().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetMonitoringData();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetMutableMonitoringData();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getResidualRootsFieldBuilder();
          getMonitoringInfosFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (residualRootsBuilder_ == null) {
          residualRoots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          residualRootsBuilder_.clear();
        }
        if (monitoringInfosBuilder_ == null) {
          monitoringInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          monitoringInfosBuilder_.clear();
        }
        requiresFinalization_ = false;

        internalGetMutableMonitoringData().clear();
        if (elementsBuilder_ == null) {
          elements_ = null;
        } else {
          elements_ = null;
          elementsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse(this);
        int from_bitField0_ = bitField0_;
        if (residualRootsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            residualRoots_ = java.util.Collections.unmodifiableList(residualRoots_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.residualRoots_ = residualRoots_;
        } else {
          result.residualRoots_ = residualRootsBuilder_.build();
        }
        if (monitoringInfosBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            monitoringInfos_ = java.util.Collections.unmodifiableList(monitoringInfos_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.monitoringInfos_ = monitoringInfos_;
        } else {
          result.monitoringInfos_ = monitoringInfosBuilder_.build();
        }
        result.requiresFinalization_ = requiresFinalization_;
        result.monitoringData_ = internalGetMonitoringData();
        result.monitoringData_.makeImmutable();
        if (elementsBuilder_ == null) {
          result.elements_ = elements_;
        } else {
          result.elements_ = elementsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse.getDefaultInstance()) return this;
        if (residualRootsBuilder_ == null) {
          if (!other.residualRoots_.isEmpty()) {
            if (residualRoots_.isEmpty()) {
              residualRoots_ = other.residualRoots_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureResidualRootsIsMutable();
              residualRoots_.addAll(other.residualRoots_);
            }
            onChanged();
          }
        } else {
          if (!other.residualRoots_.isEmpty()) {
            if (residualRootsBuilder_.isEmpty()) {
              residualRootsBuilder_.dispose();
              residualRootsBuilder_ = null;
              residualRoots_ = other.residualRoots_;
              bitField0_ = (bitField0_ & ~0x00000001);
              residualRootsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getResidualRootsFieldBuilder() : null;
            } else {
              residualRootsBuilder_.addAllMessages(other.residualRoots_);
            }
          }
        }
        if (monitoringInfosBuilder_ == null) {
          if (!other.monitoringInfos_.isEmpty()) {
            if (monitoringInfos_.isEmpty()) {
              monitoringInfos_ = other.monitoringInfos_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMonitoringInfosIsMutable();
              monitoringInfos_.addAll(other.monitoringInfos_);
            }
            onChanged();
          }
        } else {
          if (!other.monitoringInfos_.isEmpty()) {
            if (monitoringInfosBuilder_.isEmpty()) {
              monitoringInfosBuilder_.dispose();
              monitoringInfosBuilder_ = null;
              monitoringInfos_ = other.monitoringInfos_;
              bitField0_ = (bitField0_ & ~0x00000002);
              monitoringInfosBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMonitoringInfosFieldBuilder() : null;
            } else {
              monitoringInfosBuilder_.addAllMessages(other.monitoringInfos_);
            }
          }
        }
        if (other.getRequiresFinalization() != false) {
          setRequiresFinalization(other.getRequiresFinalization());
        }
        internalGetMutableMonitoringData().mergeFrom(
            other.internalGetMonitoringData());
        if (other.hasElements()) {
          mergeElements(other.getElements());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> residualRoots_ =
        java.util.Collections.emptyList();
      private void ensureResidualRootsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          residualRoots_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication>(residualRoots_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> residualRootsBuilder_;

      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> getResidualRootsList() {
        if (residualRootsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(residualRoots_);
        } else {
          return residualRootsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public int getResidualRootsCount() {
        if (residualRootsBuilder_ == null) {
          return residualRoots_.size();
        } else {
          return residualRootsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication getResidualRoots(int index) {
        if (residualRootsBuilder_ == null) {
          return residualRoots_.get(index);
        } else {
          return residualRootsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder setResidualRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication value) {
        if (residualRootsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResidualRootsIsMutable();
          residualRoots_.set(index, value);
          onChanged();
        } else {
          residualRootsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder setResidualRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder builderForValue) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          residualRoots_.set(index, builderForValue.build());
          onChanged();
        } else {
          residualRootsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addResidualRoots(org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication value) {
        if (residualRootsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResidualRootsIsMutable();
          residualRoots_.add(value);
          onChanged();
        } else {
          residualRootsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addResidualRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication value) {
        if (residualRootsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResidualRootsIsMutable();
          residualRoots_.add(index, value);
          onChanged();
        } else {
          residualRootsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addResidualRoots(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder builderForValue) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          residualRoots_.add(builderForValue.build());
          onChanged();
        } else {
          residualRootsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addResidualRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder builderForValue) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          residualRoots_.add(index, builderForValue.build());
          onChanged();
        } else {
          residualRootsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addAllResidualRoots(
          java.lang.Iterable<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> values) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, residualRoots_);
          onChanged();
        } else {
          residualRootsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder clearResidualRoots() {
        if (residualRootsBuilder_ == null) {
          residualRoots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          residualRootsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder removeResidualRoots(int index) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          residualRoots_.remove(index);
          onChanged();
        } else {
          residualRootsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder getResidualRootsBuilder(
          int index) {
        return getResidualRootsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder getResidualRootsOrBuilder(
          int index) {
        if (residualRootsBuilder_ == null) {
          return residualRoots_.get(index);  } else {
          return residualRootsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> 
           getResidualRootsOrBuilderList() {
        if (residualRootsBuilder_ != null) {
          return residualRootsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(residualRoots_);
        }
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder addResidualRootsBuilder() {
        return getResidualRootsFieldBuilder().addBuilder(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder addResidualRootsBuilder(
          int index) {
        return getResidualRootsFieldBuilder().addBuilder(
            index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Specifies that the bundle has not been completed and the
       * following applications need to be scheduled and executed in the future.
       * A runner that does not yet support residual roots MUST still check that
       * this is empty for correctness.
       * Note that these residual roots must not have been returned as part of a
       * prior split for this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder> 
           getResidualRootsBuilderList() {
        return getResidualRootsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> 
          getResidualRootsFieldBuilder() {
        if (residualRootsBuilder_ == null) {
          residualRootsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder>(
                  residualRoots_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          residualRoots_ = null;
        }
        return residualRootsBuilder_;
      }

      private java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> monitoringInfos_ =
        java.util.Collections.emptyList();
      private void ensureMonitoringInfosIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          monitoringInfos_ = new java.util.ArrayList<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>(monitoringInfos_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> monitoringInfosBuilder_;

      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> getMonitoringInfosList() {
        if (monitoringInfosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(monitoringInfos_);
        } else {
          return monitoringInfosBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public int getMonitoringInfosCount() {
        if (monitoringInfosBuilder_ == null) {
          return monitoringInfos_.size();
        } else {
          return monitoringInfosBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfos(int index) {
        if (monitoringInfosBuilder_ == null) {
          return monitoringInfos_.get(index);
        } else {
          return monitoringInfosBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder setMonitoringInfos(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo value) {
        if (monitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.set(index, value);
          onChanged();
        } else {
          monitoringInfosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder setMonitoringInfos(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder builderForValue) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.set(index, builderForValue.build());
          onChanged();
        } else {
          monitoringInfosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addMonitoringInfos(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo value) {
        if (monitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.add(value);
          onChanged();
        } else {
          monitoringInfosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addMonitoringInfos(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo value) {
        if (monitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.add(index, value);
          onChanged();
        } else {
          monitoringInfosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addMonitoringInfos(
          org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder builderForValue) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.add(builderForValue.build());
          onChanged();
        } else {
          monitoringInfosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addMonitoringInfos(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder builderForValue) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.add(index, builderForValue.build());
          onChanged();
        } else {
          monitoringInfosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addAllMonitoringInfos(
          java.lang.Iterable<? extends org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> values) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, monitoringInfos_);
          onChanged();
        } else {
          monitoringInfosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder clearMonitoringInfos() {
        if (monitoringInfosBuilder_ == null) {
          monitoringInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          monitoringInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder removeMonitoringInfos(int index) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.remove(index);
          onChanged();
        } else {
          monitoringInfosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder getMonitoringInfosBuilder(
          int index) {
        return getMonitoringInfosFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder getMonitoringInfosOrBuilder(
          int index) {
        if (monitoringInfosBuilder_ == null) {
          return monitoringInfos_.get(index);  } else {
          return monitoringInfosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public java.util.List<? extends org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> 
           getMonitoringInfosOrBuilderList() {
        if (monitoringInfosBuilder_ != null) {
          return monitoringInfosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(monitoringInfos_);
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder addMonitoringInfosBuilder() {
        return getMonitoringInfosFieldBuilder().addBuilder(
            org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder addMonitoringInfosBuilder(
          int index) {
        return getMonitoringInfosFieldBuilder().addBuilder(
            index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder> 
           getMonitoringInfosBuilderList() {
        return getMonitoringInfosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> 
          getMonitoringInfosFieldBuilder() {
        if (monitoringInfosBuilder_ == null) {
          monitoringInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder>(
                  monitoringInfos_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          monitoringInfos_ = null;
        }
        return monitoringInfosBuilder_;
      }

      private boolean requiresFinalization_ ;
      /**
       * <pre>
       * (Optional) Specifies that the runner must callback to this worker
       * once the output of the bundle is committed. The Runner must send a
       * FinalizeBundleRequest with the instruction id of the ProcessBundleRequest
       * that is related to this ProcessBundleResponse.
       * </pre>
       *
       * <code>bool requires_finalization = 4;</code>
       * @return The requiresFinalization.
       */
      @java.lang.Override
      public boolean getRequiresFinalization() {
        return requiresFinalization_;
      }
      /**
       * <pre>
       * (Optional) Specifies that the runner must callback to this worker
       * once the output of the bundle is committed. The Runner must send a
       * FinalizeBundleRequest with the instruction id of the ProcessBundleRequest
       * that is related to this ProcessBundleResponse.
       * </pre>
       *
       * <code>bool requires_finalization = 4;</code>
       * @param value The requiresFinalization to set.
       * @return This builder for chaining.
       */
      public Builder setRequiresFinalization(boolean value) {
        
        requiresFinalization_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Specifies that the runner must callback to this worker
       * once the output of the bundle is committed. The Runner must send a
       * FinalizeBundleRequest with the instruction id of the ProcessBundleRequest
       * that is related to this ProcessBundleResponse.
       * </pre>
       *
       * <code>bool requires_finalization = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearRequiresFinalization() {
        
        requiresFinalization_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, com.google.protobuf.ByteString> monitoringData_;
      private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
      internalGetMonitoringData() {
        if (monitoringData_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MonitoringDataDefaultEntryHolder.defaultEntry);
        }
        return monitoringData_;
      }
      private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
      internalGetMutableMonitoringData() {
        onChanged();;
        if (monitoringData_ == null) {
          monitoringData_ = com.google.protobuf.MapField.newMapField(
              MonitoringDataDefaultEntryHolder.defaultEntry);
        }
        if (!monitoringData_.isMutable()) {
          monitoringData_ = monitoringData_.copy();
        }
        return monitoringData_;
      }

      public int getMonitoringDataCount() {
        return internalGetMonitoringData().getMap().size();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers across multiple bundles as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */

      @java.lang.Override
      public boolean containsMonitoringData(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetMonitoringData().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMonitoringDataMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringData() {
        return getMonitoringDataMap();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers across multiple bundles as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringDataMap() {
        return internalGetMonitoringData().getMap();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers across multiple bundles as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMonitoringDataOrDefault(
          java.lang.String key,
          com.google.protobuf.ByteString defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            internalGetMonitoringData().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers across multiple bundles as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMonitoringDataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            internalGetMonitoringData().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMonitoringData() {
        internalGetMutableMonitoringData().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers across multiple bundles as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */

      public Builder removeMonitoringData(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableMonitoringData().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString>
      getMutableMonitoringData() {
        return internalGetMutableMonitoringData().getMutableMap();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers across multiple bundles as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */
      public Builder putMonitoringData(
          java.lang.String key,
          com.google.protobuf.ByteString value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableMonitoringData().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers across multiple bundles as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */

      public Builder putAllMonitoringData(
          java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
        internalGetMutableMonitoringData().getMutableMap()
            .putAll(values);
        return this;
      }

      private org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements elements_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder> elementsBuilder_;
      /**
       * <pre>
       * (Optional) Output elements of the processed bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleResponse.
       * This embedding is to achieve better efficiency for bundles that only
       * contain small amounts of data. his field can be set only if the runner
       * declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more at
       * https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
       * @return Whether the elements field is set.
       */
      public boolean hasElements() {
        return elementsBuilder_ != null || elements_ != null;
      }
      /**
       * <pre>
       * (Optional) Output elements of the processed bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleResponse.
       * This embedding is to achieve better efficiency for bundles that only
       * contain small amounts of data. his field can be set only if the runner
       * declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more at
       * https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
       * @return The elements.
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements getElements() {
        if (elementsBuilder_ == null) {
          return elements_ == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.getDefaultInstance() : elements_;
        } else {
          return elementsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Optional) Output elements of the processed bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleResponse.
       * This embedding is to achieve better efficiency for bundles that only
       * contain small amounts of data. his field can be set only if the runner
       * declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more at
       * https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
       */
      public Builder setElements(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements value) {
        if (elementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          elements_ = value;
          onChanged();
        } else {
          elementsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Output elements of the processed bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleResponse.
       * This embedding is to achieve better efficiency for bundles that only
       * contain small amounts of data. his field can be set only if the runner
       * declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more at
       * https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
       */
      public Builder setElements(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder builderForValue) {
        if (elementsBuilder_ == null) {
          elements_ = builderForValue.build();
          onChanged();
        } else {
          elementsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Output elements of the processed bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleResponse.
       * This embedding is to achieve better efficiency for bundles that only
       * contain small amounts of data. his field can be set only if the runner
       * declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more at
       * https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
       */
      public Builder mergeElements(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements value) {
        if (elementsBuilder_ == null) {
          if (elements_ != null) {
            elements_ =
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.newBuilder(elements_).mergeFrom(value).buildPartial();
          } else {
            elements_ = value;
          }
          onChanged();
        } else {
          elementsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Output elements of the processed bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleResponse.
       * This embedding is to achieve better efficiency for bundles that only
       * contain small amounts of data. his field can be set only if the runner
       * declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more at
       * https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
       */
      public Builder clearElements() {
        if (elementsBuilder_ == null) {
          elements_ = null;
          onChanged();
        } else {
          elements_ = null;
          elementsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Optional) Output elements of the processed bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleResponse.
       * This embedding is to achieve better efficiency for bundles that only
       * contain small amounts of data. his field can be set only if the runner
       * declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more at
       * https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder getElementsBuilder() {
        
        onChanged();
        return getElementsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Optional) Output elements of the processed bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleResponse.
       * This embedding is to achieve better efficiency for bundles that only
       * contain small amounts of data. his field can be set only if the runner
       * declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more at
       * https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder getElementsOrBuilder() {
        if (elementsBuilder_ != null) {
          return elementsBuilder_.getMessageOrBuilder();
        } else {
          return elements_ == null ?
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.getDefaultInstance() : elements_;
        }
      }
      /**
       * <pre>
       * (Optional) Output elements of the processed bundle. Either all or
       * none of the bundle elements should be included in the ProcessBundleResponse.
       * This embedding is to achieve better efficiency for bundles that only
       * contain small amounts of data. his field can be set only if the runner
       * declares that it supports the
       * beam:protocol:control_request_elements_embedding:v1 capability. See more at
       * https://s.apache.org/beam-fn-api-control-data-embedding.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.Elements elements = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder> 
          getElementsFieldBuilder() {
        if (elementsBuilder_ == null) {
          elementsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder>(
                  getElements(),
                  getParentForChildren(),
                  isClean());
          elements_ = null;
        }
        return elementsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProcessBundleResponse>
        PARSER = new com.google.protobuf.AbstractParser<ProcessBundleResponse>() {
      @java.lang.Override
      public ProcessBundleResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProcessBundleResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProcessBundleResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessBundleResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProcessBundleProgressRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A reference to an active process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    java.lang.String getInstructionId();
    /**
     * <pre>
     * (Required) A reference to an active process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    com.google.protobuf.ByteString
        getInstructionIdBytes();
  }
  /**
   * <pre>
   * A request to report progress information for a given bundle.
   * This is an optional request to be handled and is used to support advanced
   * SDK features such as SplittableDoFn, user level metrics etc.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest}
   */
  public static final class ProcessBundleProgressRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest)
      ProcessBundleProgressRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessBundleProgressRequest.newBuilder() to construct.
    private ProcessBundleProgressRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessBundleProgressRequest() {
      instructionId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProcessBundleProgressRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProcessBundleProgressRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              instructionId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.Builder.class);
    }

    public static final int INSTRUCTION_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object instructionId_;
    /**
     * <pre>
     * (Required) A reference to an active process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    @java.lang.Override
    public java.lang.String getInstructionId() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instructionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A reference to an active process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInstructionIdBytes() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instructionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instructionId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instructionId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) obj;

      if (!getInstructionId()
          .equals(other.getInstructionId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInstructionId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A request to report progress information for a given bundle.
     * This is an optional request to be handled and is used to support advanced
     * SDK features such as SplittableDoFn, user level metrics etc.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        instructionId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest(this);
        result.instructionId_ = instructionId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest.getDefaultInstance()) return this;
        if (!other.getInstructionId().isEmpty()) {
          instructionId_ = other.instructionId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object instructionId_ = "";
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The instructionId.
       */
      public java.lang.String getInstructionId() {
        java.lang.Object ref = instructionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instructionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The bytes for instructionId.
       */
      public com.google.protobuf.ByteString
          getInstructionIdBytes() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instructionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instructionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInstructionId() {
        
        instructionId_ = getDefaultInstance().getInstructionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The bytes for instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instructionId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProcessBundleProgressRequest>
        PARSER = new com.google.protobuf.AbstractParser<ProcessBundleProgressRequest>() {
      @java.lang.Override
      public ProcessBundleProgressRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProcessBundleProgressRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProcessBundleProgressRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessBundleProgressRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MonitoringInfosMetadataRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A list of ids for which the full MonitoringInfo is requested for.
     * </pre>
     *
     * <code>repeated string monitoring_info_id = 1;</code>
     * @return A list containing the monitoringInfoId.
     */
    java.util.List<java.lang.String>
        getMonitoringInfoIdList();
    /**
     * <pre>
     * A list of ids for which the full MonitoringInfo is requested for.
     * </pre>
     *
     * <code>repeated string monitoring_info_id = 1;</code>
     * @return The count of monitoringInfoId.
     */
    int getMonitoringInfoIdCount();
    /**
     * <pre>
     * A list of ids for which the full MonitoringInfo is requested for.
     * </pre>
     *
     * <code>repeated string monitoring_info_id = 1;</code>
     * @param index The index of the element to return.
     * @return The monitoringInfoId at the given index.
     */
    java.lang.String getMonitoringInfoId(int index);
    /**
     * <pre>
     * A list of ids for which the full MonitoringInfo is requested for.
     * </pre>
     *
     * <code>repeated string monitoring_info_id = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the monitoringInfoId at the given index.
     */
    com.google.protobuf.ByteString
        getMonitoringInfoIdBytes(int index);
  }
  /**
   * <pre>
   * A request to provide full MonitoringInfo for a set of provided ids.
   * An SDK can report metrics using an identifier that only contains the
   * associated payload. A runner who wants to receive the full metrics
   * information can request all the monitoring metadata via a
   * MonitoringInfosMetadataRequest providing a list of ids as necessary.
   * The SDK is allowed to reuse the identifiers for the lifetime of the
   * associated control connection as long as the MonitoringInfo could be
   * reconstructed fully by overwriting its payload field with the bytes specified
   * here.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest}
   */
  public static final class MonitoringInfosMetadataRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest)
      MonitoringInfosMetadataRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitoringInfosMetadataRequest.newBuilder() to construct.
    private MonitoringInfosMetadataRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitoringInfosMetadataRequest() {
      monitoringInfoId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitoringInfosMetadataRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitoringInfosMetadataRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                monitoringInfoId_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              monitoringInfoId_.add(s);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          monitoringInfoId_ = monitoringInfoId_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.Builder.class);
    }

    public static final int MONITORING_INFO_ID_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList monitoringInfoId_;
    /**
     * <pre>
     * A list of ids for which the full MonitoringInfo is requested for.
     * </pre>
     *
     * <code>repeated string monitoring_info_id = 1;</code>
     * @return A list containing the monitoringInfoId.
     */
    public com.google.protobuf.ProtocolStringList
        getMonitoringInfoIdList() {
      return monitoringInfoId_;
    }
    /**
     * <pre>
     * A list of ids for which the full MonitoringInfo is requested for.
     * </pre>
     *
     * <code>repeated string monitoring_info_id = 1;</code>
     * @return The count of monitoringInfoId.
     */
    public int getMonitoringInfoIdCount() {
      return monitoringInfoId_.size();
    }
    /**
     * <pre>
     * A list of ids for which the full MonitoringInfo is requested for.
     * </pre>
     *
     * <code>repeated string monitoring_info_id = 1;</code>
     * @param index The index of the element to return.
     * @return The monitoringInfoId at the given index.
     */
    public java.lang.String getMonitoringInfoId(int index) {
      return monitoringInfoId_.get(index);
    }
    /**
     * <pre>
     * A list of ids for which the full MonitoringInfo is requested for.
     * </pre>
     *
     * <code>repeated string monitoring_info_id = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the monitoringInfoId at the given index.
     */
    public com.google.protobuf.ByteString
        getMonitoringInfoIdBytes(int index) {
      return monitoringInfoId_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < monitoringInfoId_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, monitoringInfoId_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < monitoringInfoId_.size(); i++) {
          dataSize += computeStringSizeNoTag(monitoringInfoId_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getMonitoringInfoIdList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) obj;

      if (!getMonitoringInfoIdList()
          .equals(other.getMonitoringInfoIdList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getMonitoringInfoIdCount() > 0) {
        hash = (37 * hash) + MONITORING_INFO_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMonitoringInfoIdList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A request to provide full MonitoringInfo for a set of provided ids.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers for the lifetime of the
     * associated control connection as long as the MonitoringInfo could be
     * reconstructed fully by overwriting its payload field with the bytes specified
     * here.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        monitoringInfoId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          monitoringInfoId_ = monitoringInfoId_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.monitoringInfoId_ = monitoringInfoId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest.getDefaultInstance()) return this;
        if (!other.monitoringInfoId_.isEmpty()) {
          if (monitoringInfoId_.isEmpty()) {
            monitoringInfoId_ = other.monitoringInfoId_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureMonitoringInfoIdIsMutable();
            monitoringInfoId_.addAll(other.monitoringInfoId_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList monitoringInfoId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureMonitoringInfoIdIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          monitoringInfoId_ = new com.google.protobuf.LazyStringArrayList(monitoringInfoId_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * A list of ids for which the full MonitoringInfo is requested for.
       * </pre>
       *
       * <code>repeated string monitoring_info_id = 1;</code>
       * @return A list containing the monitoringInfoId.
       */
      public com.google.protobuf.ProtocolStringList
          getMonitoringInfoIdList() {
        return monitoringInfoId_.getUnmodifiableView();
      }
      /**
       * <pre>
       * A list of ids for which the full MonitoringInfo is requested for.
       * </pre>
       *
       * <code>repeated string monitoring_info_id = 1;</code>
       * @return The count of monitoringInfoId.
       */
      public int getMonitoringInfoIdCount() {
        return monitoringInfoId_.size();
      }
      /**
       * <pre>
       * A list of ids for which the full MonitoringInfo is requested for.
       * </pre>
       *
       * <code>repeated string monitoring_info_id = 1;</code>
       * @param index The index of the element to return.
       * @return The monitoringInfoId at the given index.
       */
      public java.lang.String getMonitoringInfoId(int index) {
        return monitoringInfoId_.get(index);
      }
      /**
       * <pre>
       * A list of ids for which the full MonitoringInfo is requested for.
       * </pre>
       *
       * <code>repeated string monitoring_info_id = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the monitoringInfoId at the given index.
       */
      public com.google.protobuf.ByteString
          getMonitoringInfoIdBytes(int index) {
        return monitoringInfoId_.getByteString(index);
      }
      /**
       * <pre>
       * A list of ids for which the full MonitoringInfo is requested for.
       * </pre>
       *
       * <code>repeated string monitoring_info_id = 1;</code>
       * @param index The index to set the value at.
       * @param value The monitoringInfoId to set.
       * @return This builder for chaining.
       */
      public Builder setMonitoringInfoId(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMonitoringInfoIdIsMutable();
        monitoringInfoId_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of ids for which the full MonitoringInfo is requested for.
       * </pre>
       *
       * <code>repeated string monitoring_info_id = 1;</code>
       * @param value The monitoringInfoId to add.
       * @return This builder for chaining.
       */
      public Builder addMonitoringInfoId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMonitoringInfoIdIsMutable();
        monitoringInfoId_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of ids for which the full MonitoringInfo is requested for.
       * </pre>
       *
       * <code>repeated string monitoring_info_id = 1;</code>
       * @param values The monitoringInfoId to add.
       * @return This builder for chaining.
       */
      public Builder addAllMonitoringInfoId(
          java.lang.Iterable<java.lang.String> values) {
        ensureMonitoringInfoIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, monitoringInfoId_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of ids for which the full MonitoringInfo is requested for.
       * </pre>
       *
       * <code>repeated string monitoring_info_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMonitoringInfoId() {
        monitoringInfoId_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of ids for which the full MonitoringInfo is requested for.
       * </pre>
       *
       * <code>repeated string monitoring_info_id = 1;</code>
       * @param value The bytes of the monitoringInfoId to add.
       * @return This builder for chaining.
       */
      public Builder addMonitoringInfoIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureMonitoringInfoIdIsMutable();
        monitoringInfoId_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitoringInfosMetadataRequest>
        PARSER = new com.google.protobuf.AbstractParser<MonitoringInfosMetadataRequest>() {
      @java.lang.Override
      public MonitoringInfosMetadataRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitoringInfosMetadataRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitoringInfosMetadataRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitoringInfosMetadataRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProcessBundleProgressResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> 
        getMonitoringInfosList();
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfos(int index);
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    int getMonitoringInfosCount();
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    java.util.List<? extends org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> 
        getMonitoringInfosOrBuilderList();
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder getMonitoringInfosOrBuilder(
        int index);

    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    int getMonitoringDataCount();
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    boolean containsMonitoringData(
        java.lang.String key);
    /**
     * Use {@link #getMonitoringDataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMonitoringData();
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMonitoringDataMap();
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */

    /* nullable */
com.google.protobuf.ByteString getMonitoringDataOrDefault(
        java.lang.String key,
        /* nullable */
com.google.protobuf.ByteString defaultValue);
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */

    com.google.protobuf.ByteString getMonitoringDataOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse}
   */
  public static final class ProcessBundleProgressResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse)
      ProcessBundleProgressResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessBundleProgressResponse.newBuilder() to construct.
    private ProcessBundleProgressResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessBundleProgressResponse() {
      monitoringInfos_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProcessBundleProgressResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProcessBundleProgressResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                monitoringInfos_ = new java.util.ArrayList<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              monitoringInfos_.add(
                  input.readMessage(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                monitoringData_ = com.google.protobuf.MapField.newMapField(
                    MonitoringDataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ByteString>
              monitoringData__ = input.readMessage(
                  MonitoringDataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              monitoringData_.getMutableMap().put(
                  monitoringData__.getKey(), monitoringData__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          monitoringInfos_ = java.util.Collections.unmodifiableList(monitoringInfos_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetMonitoringData();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.Builder.class);
    }

    public static final int MONITORING_INFOS_FIELD_NUMBER = 3;
    private java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> monitoringInfos_;
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> getMonitoringInfosList() {
      return monitoringInfos_;
    }
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> 
        getMonitoringInfosOrBuilderList() {
      return monitoringInfos_;
    }
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public int getMonitoringInfosCount() {
      return monitoringInfos_.size();
    }
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfos(int index) {
      return monitoringInfos_.get(index);
    }
    /**
     * <pre>
     * DEPRECATED (Required) The list of metrics or other MonitoredState
     * collected while processing this bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder getMonitoringInfosOrBuilder(
        int index) {
      return monitoringInfos_.get(index);
    }

    public static final int MONITORING_DATA_FIELD_NUMBER = 5;
    private static final class MonitoringDataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_MonitoringDataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapField<
        java.lang.String, com.google.protobuf.ByteString> monitoringData_;
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
    internalGetMonitoringData() {
      if (monitoringData_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MonitoringDataDefaultEntryHolder.defaultEntry);
      }
      return monitoringData_;
    }

    public int getMonitoringDataCount() {
      return internalGetMonitoringData().getMap().size();
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */

    @java.lang.Override
    public boolean containsMonitoringData(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetMonitoringData().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMonitoringDataMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringData() {
      return getMonitoringDataMap();
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringDataMap() {
      return internalGetMonitoringData().getMap();
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMonitoringDataOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetMonitoringData().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * An identifier to MonitoringInfo.payload mapping.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getMonitoringDataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetMonitoringData().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < monitoringInfos_.size(); i++) {
        output.writeMessage(3, monitoringInfos_.get(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMonitoringData(),
          MonitoringDataDefaultEntryHolder.defaultEntry,
          5);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < monitoringInfos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, monitoringInfos_.get(i));
      }
      for (java.util.Map.Entry<java.lang.String, com.google.protobuf.ByteString> entry
           : internalGetMonitoringData().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ByteString>
        monitoringData__ = MonitoringDataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, monitoringData__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) obj;

      if (!getMonitoringInfosList()
          .equals(other.getMonitoringInfosList())) return false;
      if (!internalGetMonitoringData().equals(
          other.internalGetMonitoringData())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getMonitoringInfosCount() > 0) {
        hash = (37 * hash) + MONITORING_INFOS_FIELD_NUMBER;
        hash = (53 * hash) + getMonitoringInfosList().hashCode();
      }
      if (!internalGetMonitoringData().getMap().isEmpty()) {
        hash = (37 * hash) + MONITORING_DATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMonitoringData().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetMonitoringData();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetMutableMonitoringData();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMonitoringInfosFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (monitoringInfosBuilder_ == null) {
          monitoringInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          monitoringInfosBuilder_.clear();
        }
        internalGetMutableMonitoringData().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse(this);
        int from_bitField0_ = bitField0_;
        if (monitoringInfosBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            monitoringInfos_ = java.util.Collections.unmodifiableList(monitoringInfos_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.monitoringInfos_ = monitoringInfos_;
        } else {
          result.monitoringInfos_ = monitoringInfosBuilder_.build();
        }
        result.monitoringData_ = internalGetMonitoringData();
        result.monitoringData_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse.getDefaultInstance()) return this;
        if (monitoringInfosBuilder_ == null) {
          if (!other.monitoringInfos_.isEmpty()) {
            if (monitoringInfos_.isEmpty()) {
              monitoringInfos_ = other.monitoringInfos_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMonitoringInfosIsMutable();
              monitoringInfos_.addAll(other.monitoringInfos_);
            }
            onChanged();
          }
        } else {
          if (!other.monitoringInfos_.isEmpty()) {
            if (monitoringInfosBuilder_.isEmpty()) {
              monitoringInfosBuilder_.dispose();
              monitoringInfosBuilder_ = null;
              monitoringInfos_ = other.monitoringInfos_;
              bitField0_ = (bitField0_ & ~0x00000001);
              monitoringInfosBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMonitoringInfosFieldBuilder() : null;
            } else {
              monitoringInfosBuilder_.addAllMessages(other.monitoringInfos_);
            }
          }
        }
        internalGetMutableMonitoringData().mergeFrom(
            other.internalGetMonitoringData());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> monitoringInfos_ =
        java.util.Collections.emptyList();
      private void ensureMonitoringInfosIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          monitoringInfos_ = new java.util.ArrayList<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>(monitoringInfos_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> monitoringInfosBuilder_;

      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> getMonitoringInfosList() {
        if (monitoringInfosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(monitoringInfos_);
        } else {
          return monitoringInfosBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public int getMonitoringInfosCount() {
        if (monitoringInfosBuilder_ == null) {
          return monitoringInfos_.size();
        } else {
          return monitoringInfosBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfos(int index) {
        if (monitoringInfosBuilder_ == null) {
          return monitoringInfos_.get(index);
        } else {
          return monitoringInfosBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder setMonitoringInfos(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo value) {
        if (monitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.set(index, value);
          onChanged();
        } else {
          monitoringInfosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder setMonitoringInfos(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder builderForValue) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.set(index, builderForValue.build());
          onChanged();
        } else {
          monitoringInfosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addMonitoringInfos(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo value) {
        if (monitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.add(value);
          onChanged();
        } else {
          monitoringInfosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addMonitoringInfos(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo value) {
        if (monitoringInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.add(index, value);
          onChanged();
        } else {
          monitoringInfosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addMonitoringInfos(
          org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder builderForValue) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.add(builderForValue.build());
          onChanged();
        } else {
          monitoringInfosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addMonitoringInfos(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder builderForValue) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.add(index, builderForValue.build());
          onChanged();
        } else {
          monitoringInfosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder addAllMonitoringInfos(
          java.lang.Iterable<? extends org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> values) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, monitoringInfos_);
          onChanged();
        } else {
          monitoringInfosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder clearMonitoringInfos() {
        if (monitoringInfosBuilder_ == null) {
          monitoringInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          monitoringInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public Builder removeMonitoringInfos(int index) {
        if (monitoringInfosBuilder_ == null) {
          ensureMonitoringInfosIsMutable();
          monitoringInfos_.remove(index);
          onChanged();
        } else {
          monitoringInfosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder getMonitoringInfosBuilder(
          int index) {
        return getMonitoringInfosFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder getMonitoringInfosOrBuilder(
          int index) {
        if (monitoringInfosBuilder_ == null) {
          return monitoringInfos_.get(index);  } else {
          return monitoringInfosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public java.util.List<? extends org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> 
           getMonitoringInfosOrBuilderList() {
        if (monitoringInfosBuilder_ != null) {
          return monitoringInfosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(monitoringInfos_);
        }
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder addMonitoringInfosBuilder() {
        return getMonitoringInfosFieldBuilder().addBuilder(
            org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder addMonitoringInfosBuilder(
          int index) {
        return getMonitoringInfosFieldBuilder().addBuilder(
            index, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * DEPRECATED (Required) The list of metrics or other MonitoredState
       * collected while processing this bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;</code>
       */
      public java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder> 
           getMonitoringInfosBuilderList() {
        return getMonitoringInfosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder> 
          getMonitoringInfosFieldBuilder() {
        if (monitoringInfosBuilder_ == null) {
          monitoringInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder>(
                  monitoringInfos_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          monitoringInfos_ = null;
        }
        return monitoringInfosBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, com.google.protobuf.ByteString> monitoringData_;
      private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
      internalGetMonitoringData() {
        if (monitoringData_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MonitoringDataDefaultEntryHolder.defaultEntry);
        }
        return monitoringData_;
      }
      private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ByteString>
      internalGetMutableMonitoringData() {
        onChanged();;
        if (monitoringData_ == null) {
          monitoringData_ = com.google.protobuf.MapField.newMapField(
              MonitoringDataDefaultEntryHolder.defaultEntry);
        }
        if (!monitoringData_.isMutable()) {
          monitoringData_ = monitoringData_.copy();
        }
        return monitoringData_;
      }

      public int getMonitoringDataCount() {
        return internalGetMonitoringData().getMap().size();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */

      @java.lang.Override
      public boolean containsMonitoringData(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetMonitoringData().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMonitoringDataMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringData() {
        return getMonitoringDataMap();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getMonitoringDataMap() {
        return internalGetMonitoringData().getMap();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMonitoringDataOrDefault(
          java.lang.String key,
          com.google.protobuf.ByteString defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            internalGetMonitoringData().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getMonitoringDataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            internalGetMonitoringData().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMonitoringData() {
        internalGetMutableMonitoringData().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */

      public Builder removeMonitoringData(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableMonitoringData().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString>
      getMutableMonitoringData() {
        return internalGetMutableMonitoringData().getMutableMap();
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */
      public Builder putMonitoringData(
          java.lang.String key,
          com.google.protobuf.ByteString value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableMonitoringData().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * An identifier to MonitoringInfo.payload mapping.
       * An SDK can report metrics using an identifier that only contains the
       * associated payload. A runner who wants to receive the full metrics
       * information can request all the monitoring metadata via a
       * MonitoringInfosMetadataRequest providing a list of ids as necessary.
       * The SDK is allowed to reuse the identifiers
       * for the lifetime of the associated control connection as long
       * as the MonitoringInfo could be reconstructed fully by overwriting its
       * payload field with the bytes specified here.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; monitoring_data = 5;</code>
       */

      public Builder putAllMonitoringData(
          java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
        internalGetMutableMonitoringData().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProcessBundleProgressResponse>
        PARSER = new com.google.protobuf.AbstractParser<ProcessBundleProgressResponse>() {
      @java.lang.Override
      public ProcessBundleProgressResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProcessBundleProgressResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProcessBundleProgressResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessBundleProgressResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleProgressResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MonitoringInfosMetadataResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A mapping from an identifier to the full metrics information.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
     */
    int getMonitoringInfoCount();
    /**
     * <pre>
     * A mapping from an identifier to the full metrics information.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
     */
    boolean containsMonitoringInfo(
        java.lang.String key);
    /**
     * Use {@link #getMonitoringInfoMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>
    getMonitoringInfo();
    /**
     * <pre>
     * A mapping from an identifier to the full metrics information.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
     */
    java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>
    getMonitoringInfoMap();
    /**
     * <pre>
     * A mapping from an identifier to the full metrics information.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
     */

    /* nullable */
org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfoOrDefault(
        java.lang.String key,
        /* nullable */
org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo defaultValue);
    /**
     * <pre>
     * A mapping from an identifier to the full metrics information.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
     */

    org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfoOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * A response that contains the full mapping information associated with
   * a specified set of identifiers.
   * An SDK can report metrics using an identifier that only contains the
   * associated payload. A runner who wants to receive the full metrics
   * information can request all the monitoring metadata via a
   * MonitoringInfosMetadataRequest providing a list of ids as necessary.
   * The SDK is allowed to reuse the identifiers
   * for the lifetime of the associated control connection as long
   * as the MonitoringInfo could be reconstructed fully by overwriting its
   * payload field with the bytes specified here.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse}
   */
  public static final class MonitoringInfosMetadataResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse)
      MonitoringInfosMetadataResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitoringInfosMetadataResponse.newBuilder() to construct.
    private MonitoringInfosMetadataResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitoringInfosMetadataResponse() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitoringInfosMetadataResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitoringInfosMetadataResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                monitoringInfo_ = com.google.protobuf.MapField.newMapField(
                    MonitoringInfoDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>
              monitoringInfo__ = input.readMessage(
                  MonitoringInfoDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              monitoringInfo_.getMutableMap().put(
                  monitoringInfo__.getKey(), monitoringInfo__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMonitoringInfo();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.Builder.class);
    }

    public static final int MONITORING_INFO_FIELD_NUMBER = 1;
    private static final class MonitoringInfoDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_MonitoringInfoEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> monitoringInfo_;
    private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>
    internalGetMonitoringInfo() {
      if (monitoringInfo_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MonitoringInfoDefaultEntryHolder.defaultEntry);
      }
      return monitoringInfo_;
    }

    public int getMonitoringInfoCount() {
      return internalGetMonitoringInfo().getMap().size();
    }
    /**
     * <pre>
     * A mapping from an identifier to the full metrics information.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
     */

    @java.lang.Override
    public boolean containsMonitoringInfo(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetMonitoringInfo().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMonitoringInfoMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> getMonitoringInfo() {
      return getMonitoringInfoMap();
    }
    /**
     * <pre>
     * A mapping from an identifier to the full metrics information.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> getMonitoringInfoMap() {
      return internalGetMonitoringInfo().getMap();
    }
    /**
     * <pre>
     * A mapping from an identifier to the full metrics information.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfoOrDefault(
        java.lang.String key,
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> map =
          internalGetMonitoringInfo().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A mapping from an identifier to the full metrics information.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfoOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> map =
          internalGetMonitoringInfo().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMonitoringInfo(),
          MonitoringInfoDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> entry
           : internalGetMonitoringInfo().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>
        monitoringInfo__ = MonitoringInfoDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, monitoringInfo__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) obj;

      if (!internalGetMonitoringInfo().equals(
          other.internalGetMonitoringInfo())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetMonitoringInfo().getMap().isEmpty()) {
        hash = (37 * hash) + MONITORING_INFO_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMonitoringInfo().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A response that contains the full mapping information associated with
     * a specified set of identifiers.
     * An SDK can report metrics using an identifier that only contains the
     * associated payload. A runner who wants to receive the full metrics
     * information can request all the monitoring metadata via a
     * MonitoringInfosMetadataRequest providing a list of ids as necessary.
     * The SDK is allowed to reuse the identifiers
     * for the lifetime of the associated control connection as long
     * as the MonitoringInfo could be reconstructed fully by overwriting its
     * payload field with the bytes specified here.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMonitoringInfo();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableMonitoringInfo();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableMonitoringInfo().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse(this);
        int from_bitField0_ = bitField0_;
        result.monitoringInfo_ = internalGetMonitoringInfo();
        result.monitoringInfo_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse.getDefaultInstance()) return this;
        internalGetMutableMonitoringInfo().mergeFrom(
            other.internalGetMonitoringInfo());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> monitoringInfo_;
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>
      internalGetMonitoringInfo() {
        if (monitoringInfo_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MonitoringInfoDefaultEntryHolder.defaultEntry);
        }
        return monitoringInfo_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>
      internalGetMutableMonitoringInfo() {
        onChanged();;
        if (monitoringInfo_ == null) {
          monitoringInfo_ = com.google.protobuf.MapField.newMapField(
              MonitoringInfoDefaultEntryHolder.defaultEntry);
        }
        if (!monitoringInfo_.isMutable()) {
          monitoringInfo_ = monitoringInfo_.copy();
        }
        return monitoringInfo_;
      }

      public int getMonitoringInfoCount() {
        return internalGetMonitoringInfo().getMap().size();
      }
      /**
       * <pre>
       * A mapping from an identifier to the full metrics information.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
       */

      @java.lang.Override
      public boolean containsMonitoringInfo(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetMonitoringInfo().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMonitoringInfoMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> getMonitoringInfo() {
        return getMonitoringInfoMap();
      }
      /**
       * <pre>
       * A mapping from an identifier to the full metrics information.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> getMonitoringInfoMap() {
        return internalGetMonitoringInfo().getMap();
      }
      /**
       * <pre>
       * A mapping from an identifier to the full metrics information.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfoOrDefault(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> map =
            internalGetMonitoringInfo().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A mapping from an identifier to the full metrics information.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getMonitoringInfoOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> map =
            internalGetMonitoringInfo().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMonitoringInfo() {
        internalGetMutableMonitoringInfo().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A mapping from an identifier to the full metrics information.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
       */

      public Builder removeMonitoringInfo(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableMonitoringInfo().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo>
      getMutableMonitoringInfo() {
        return internalGetMutableMonitoringInfo().getMutableMap();
      }
      /**
       * <pre>
       * A mapping from an identifier to the full metrics information.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
       */
      public Builder putMonitoringInfo(
          java.lang.String key,
          org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableMonitoringInfo().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A mapping from an identifier to the full metrics information.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.pipeline.v1.MonitoringInfo&gt; monitoring_info = 1;</code>
       */

      public Builder putAllMonitoringInfo(
          java.util.Map<java.lang.String, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo> values) {
        internalGetMutableMonitoringInfo().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.MonitoringInfosMetadataResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitoringInfosMetadataResponse>
        PARSER = new com.google.protobuf.AbstractParser<MonitoringInfosMetadataResponse>() {
      @java.lang.Override
      public MonitoringInfosMetadataResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitoringInfosMetadataResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitoringInfosMetadataResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitoringInfosMetadataResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.MonitoringInfosMetadataResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProcessBundleSplitRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A reference to an active process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    java.lang.String getInstructionId();
    /**
     * <pre>
     * (Required) A reference to an active process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    com.google.protobuf.ByteString
        getInstructionIdBytes();

    /**
     * <pre>
     * (Required) Specifies the desired split for each transform.
     * Currently only splits at gRPC read operations are supported.
     * This may, of course, limit the amount of work downstream operations
     * receive.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
     */
    int getDesiredSplitsCount();
    /**
     * <pre>
     * (Required) Specifies the desired split for each transform.
     * Currently only splits at gRPC read operations are supported.
     * This may, of course, limit the amount of work downstream operations
     * receive.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
     */
    boolean containsDesiredSplits(
        java.lang.String key);
    /**
     * Use {@link #getDesiredSplitsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit>
    getDesiredSplits();
    /**
     * <pre>
     * (Required) Specifies the desired split for each transform.
     * Currently only splits at gRPC read operations are supported.
     * This may, of course, limit the amount of work downstream operations
     * receive.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
     */
    java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit>
    getDesiredSplitsMap();
    /**
     * <pre>
     * (Required) Specifies the desired split for each transform.
     * Currently only splits at gRPC read operations are supported.
     * This may, of course, limit the amount of work downstream operations
     * receive.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
     */

    /* nullable */
org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit getDesiredSplitsOrDefault(
        java.lang.String key,
        /* nullable */
org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit defaultValue);
    /**
     * <pre>
     * (Required) Specifies the desired split for each transform.
     * Currently only splits at gRPC read operations are supported.
     * This may, of course, limit the amount of work downstream operations
     * receive.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
     */

    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit getDesiredSplitsOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Represents a request to the SDK to split a currently active bundle.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest}
   */
  public static final class ProcessBundleSplitRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest)
      ProcessBundleSplitRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessBundleSplitRequest.newBuilder() to construct.
    private ProcessBundleSplitRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessBundleSplitRequest() {
      instructionId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProcessBundleSplitRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProcessBundleSplitRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              instructionId_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                desiredSplits_ = com.google.protobuf.MapField.newMapField(
                    DesiredSplitsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit>
              desiredSplits__ = input.readMessage(
                  DesiredSplitsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              desiredSplits_.getMutableMap().put(
                  desiredSplits__.getKey(), desiredSplits__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetDesiredSplits();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.Builder.class);
    }

    public interface DesiredSplitOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) The fraction of known work remaining in this bundle
       * for this transform that should be kept by the SDK after this split.
       * Set to 0 to "checkpoint" as soon as possible (keeping as little work as
       * possible and returning the remainder).
       * </pre>
       *
       * <code>double fraction_of_remainder = 1;</code>
       * @return The fractionOfRemainder.
       */
      double getFractionOfRemainder();

      /**
       * <pre>
       * (Optional) A set of allowed element indices where the SDK may split. When
       * this is empty, there are no constraints on where to split.
       * </pre>
       *
       * <code>repeated int64 allowed_split_points = 3;</code>
       * @return A list containing the allowedSplitPoints.
       */
      java.util.List<java.lang.Long> getAllowedSplitPointsList();
      /**
       * <pre>
       * (Optional) A set of allowed element indices where the SDK may split. When
       * this is empty, there are no constraints on where to split.
       * </pre>
       *
       * <code>repeated int64 allowed_split_points = 3;</code>
       * @return The count of allowedSplitPoints.
       */
      int getAllowedSplitPointsCount();
      /**
       * <pre>
       * (Optional) A set of allowed element indices where the SDK may split. When
       * this is empty, there are no constraints on where to split.
       * </pre>
       *
       * <code>repeated int64 allowed_split_points = 3;</code>
       * @param index The index of the element to return.
       * @return The allowedSplitPoints at the given index.
       */
      long getAllowedSplitPoints(int index);

      /**
       * <pre>
       * (Required for gRPC Read operation transforms) Number of total elements
       * expected to be sent to this GrpcRead operation, required to correctly
       * account for unreceived data when determining where to split.
       * </pre>
       *
       * <code>int64 estimated_input_elements = 2;</code>
       * @return The estimatedInputElements.
       */
      long getEstimatedInputElements();
    }
    /**
     * <pre>
     * A message specifying the desired split for a single transform.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit}
     */
    public static final class DesiredSplit extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit)
        DesiredSplitOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use DesiredSplit.newBuilder() to construct.
      private DesiredSplit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private DesiredSplit() {
        allowedSplitPoints_ = emptyLongList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new DesiredSplit();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private DesiredSplit(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {

                fractionOfRemainder_ = input.readDouble();
                break;
              }
              case 16: {

                estimatedInputElements_ = input.readInt64();
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  allowedSplitPoints_ = newLongList();
                  mutable_bitField0_ |= 0x00000001;
                }
                allowedSplitPoints_.addLong(input.readInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                  allowedSplitPoints_ = newLongList();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  allowedSplitPoints_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) != 0)) {
            allowedSplitPoints_.makeImmutable(); // C
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit.Builder.class);
      }

      public static final int FRACTION_OF_REMAINDER_FIELD_NUMBER = 1;
      private double fractionOfRemainder_;
      /**
       * <pre>
       * (Required) The fraction of known work remaining in this bundle
       * for this transform that should be kept by the SDK after this split.
       * Set to 0 to "checkpoint" as soon as possible (keeping as little work as
       * possible and returning the remainder).
       * </pre>
       *
       * <code>double fraction_of_remainder = 1;</code>
       * @return The fractionOfRemainder.
       */
      @java.lang.Override
      public double getFractionOfRemainder() {
        return fractionOfRemainder_;
      }

      public static final int ALLOWED_SPLIT_POINTS_FIELD_NUMBER = 3;
      private com.google.protobuf.Internal.LongList allowedSplitPoints_;
      /**
       * <pre>
       * (Optional) A set of allowed element indices where the SDK may split. When
       * this is empty, there are no constraints on where to split.
       * </pre>
       *
       * <code>repeated int64 allowed_split_points = 3;</code>
       * @return A list containing the allowedSplitPoints.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getAllowedSplitPointsList() {
        return allowedSplitPoints_;
      }
      /**
       * <pre>
       * (Optional) A set of allowed element indices where the SDK may split. When
       * this is empty, there are no constraints on where to split.
       * </pre>
       *
       * <code>repeated int64 allowed_split_points = 3;</code>
       * @return The count of allowedSplitPoints.
       */
      public int getAllowedSplitPointsCount() {
        return allowedSplitPoints_.size();
      }
      /**
       * <pre>
       * (Optional) A set of allowed element indices where the SDK may split. When
       * this is empty, there are no constraints on where to split.
       * </pre>
       *
       * <code>repeated int64 allowed_split_points = 3;</code>
       * @param index The index of the element to return.
       * @return The allowedSplitPoints at the given index.
       */
      public long getAllowedSplitPoints(int index) {
        return allowedSplitPoints_.getLong(index);
      }
      private int allowedSplitPointsMemoizedSerializedSize = -1;

      public static final int ESTIMATED_INPUT_ELEMENTS_FIELD_NUMBER = 2;
      private long estimatedInputElements_;
      /**
       * <pre>
       * (Required for gRPC Read operation transforms) Number of total elements
       * expected to be sent to this GrpcRead operation, required to correctly
       * account for unreceived data when determining where to split.
       * </pre>
       *
       * <code>int64 estimated_input_elements = 2;</code>
       * @return The estimatedInputElements.
       */
      @java.lang.Override
      public long getEstimatedInputElements() {
        return estimatedInputElements_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (java.lang.Double.doubleToRawLongBits(fractionOfRemainder_) != 0) {
          output.writeDouble(1, fractionOfRemainder_);
        }
        if (estimatedInputElements_ != 0L) {
          output.writeInt64(2, estimatedInputElements_);
        }
        if (getAllowedSplitPointsList().size() > 0) {
          output.writeUInt32NoTag(26);
          output.writeUInt32NoTag(allowedSplitPointsMemoizedSerializedSize);
        }
        for (int i = 0; i < allowedSplitPoints_.size(); i++) {
          output.writeInt64NoTag(allowedSplitPoints_.getLong(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (java.lang.Double.doubleToRawLongBits(fractionOfRemainder_) != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, fractionOfRemainder_);
        }
        if (estimatedInputElements_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, estimatedInputElements_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < allowedSplitPoints_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt64SizeNoTag(allowedSplitPoints_.getLong(i));
          }
          size += dataSize;
          if (!getAllowedSplitPointsList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          allowedSplitPointsMemoizedSerializedSize = dataSize;
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit) obj;

        if (java.lang.Double.doubleToLongBits(getFractionOfRemainder())
            != java.lang.Double.doubleToLongBits(
                other.getFractionOfRemainder())) return false;
        if (!getAllowedSplitPointsList()
            .equals(other.getAllowedSplitPointsList())) return false;
        if (getEstimatedInputElements()
            != other.getEstimatedInputElements()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + FRACTION_OF_REMAINDER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getFractionOfRemainder()));
        if (getAllowedSplitPointsCount() > 0) {
          hash = (37 * hash) + ALLOWED_SPLIT_POINTS_FIELD_NUMBER;
          hash = (53 * hash) + getAllowedSplitPointsList().hashCode();
        }
        hash = (37 * hash) + ESTIMATED_INPUT_ELEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getEstimatedInputElements());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A message specifying the desired split for a single transform.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplitOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          fractionOfRemainder_ = 0D;

          allowedSplitPoints_ = emptyLongList();
          bitField0_ = (bitField0_ & ~0x00000001);
          estimatedInputElements_ = 0L;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit(this);
          int from_bitField0_ = bitField0_;
          result.fractionOfRemainder_ = fractionOfRemainder_;
          if (((bitField0_ & 0x00000001) != 0)) {
            allowedSplitPoints_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.allowedSplitPoints_ = allowedSplitPoints_;
          result.estimatedInputElements_ = estimatedInputElements_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit.getDefaultInstance()) return this;
          if (other.getFractionOfRemainder() != 0D) {
            setFractionOfRemainder(other.getFractionOfRemainder());
          }
          if (!other.allowedSplitPoints_.isEmpty()) {
            if (allowedSplitPoints_.isEmpty()) {
              allowedSplitPoints_ = other.allowedSplitPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAllowedSplitPointsIsMutable();
              allowedSplitPoints_.addAll(other.allowedSplitPoints_);
            }
            onChanged();
          }
          if (other.getEstimatedInputElements() != 0L) {
            setEstimatedInputElements(other.getEstimatedInputElements());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private double fractionOfRemainder_ ;
        /**
         * <pre>
         * (Required) The fraction of known work remaining in this bundle
         * for this transform that should be kept by the SDK after this split.
         * Set to 0 to "checkpoint" as soon as possible (keeping as little work as
         * possible and returning the remainder).
         * </pre>
         *
         * <code>double fraction_of_remainder = 1;</code>
         * @return The fractionOfRemainder.
         */
        @java.lang.Override
        public double getFractionOfRemainder() {
          return fractionOfRemainder_;
        }
        /**
         * <pre>
         * (Required) The fraction of known work remaining in this bundle
         * for this transform that should be kept by the SDK after this split.
         * Set to 0 to "checkpoint" as soon as possible (keeping as little work as
         * possible and returning the remainder).
         * </pre>
         *
         * <code>double fraction_of_remainder = 1;</code>
         * @param value The fractionOfRemainder to set.
         * @return This builder for chaining.
         */
        public Builder setFractionOfRemainder(double value) {
          
          fractionOfRemainder_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The fraction of known work remaining in this bundle
         * for this transform that should be kept by the SDK after this split.
         * Set to 0 to "checkpoint" as soon as possible (keeping as little work as
         * possible and returning the remainder).
         * </pre>
         *
         * <code>double fraction_of_remainder = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearFractionOfRemainder() {
          
          fractionOfRemainder_ = 0D;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.LongList allowedSplitPoints_ = emptyLongList();
        private void ensureAllowedSplitPointsIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            allowedSplitPoints_ = mutableCopy(allowedSplitPoints_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <pre>
         * (Optional) A set of allowed element indices where the SDK may split. When
         * this is empty, there are no constraints on where to split.
         * </pre>
         *
         * <code>repeated int64 allowed_split_points = 3;</code>
         * @return A list containing the allowedSplitPoints.
         */
        public java.util.List<java.lang.Long>
            getAllowedSplitPointsList() {
          return ((bitField0_ & 0x00000001) != 0) ?
                   java.util.Collections.unmodifiableList(allowedSplitPoints_) : allowedSplitPoints_;
        }
        /**
         * <pre>
         * (Optional) A set of allowed element indices where the SDK may split. When
         * this is empty, there are no constraints on where to split.
         * </pre>
         *
         * <code>repeated int64 allowed_split_points = 3;</code>
         * @return The count of allowedSplitPoints.
         */
        public int getAllowedSplitPointsCount() {
          return allowedSplitPoints_.size();
        }
        /**
         * <pre>
         * (Optional) A set of allowed element indices where the SDK may split. When
         * this is empty, there are no constraints on where to split.
         * </pre>
         *
         * <code>repeated int64 allowed_split_points = 3;</code>
         * @param index The index of the element to return.
         * @return The allowedSplitPoints at the given index.
         */
        public long getAllowedSplitPoints(int index) {
          return allowedSplitPoints_.getLong(index);
        }
        /**
         * <pre>
         * (Optional) A set of allowed element indices where the SDK may split. When
         * this is empty, there are no constraints on where to split.
         * </pre>
         *
         * <code>repeated int64 allowed_split_points = 3;</code>
         * @param index The index to set the value at.
         * @param value The allowedSplitPoints to set.
         * @return This builder for chaining.
         */
        public Builder setAllowedSplitPoints(
            int index, long value) {
          ensureAllowedSplitPointsIsMutable();
          allowedSplitPoints_.setLong(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Optional) A set of allowed element indices where the SDK may split. When
         * this is empty, there are no constraints on where to split.
         * </pre>
         *
         * <code>repeated int64 allowed_split_points = 3;</code>
         * @param value The allowedSplitPoints to add.
         * @return This builder for chaining.
         */
        public Builder addAllowedSplitPoints(long value) {
          ensureAllowedSplitPointsIsMutable();
          allowedSplitPoints_.addLong(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Optional) A set of allowed element indices where the SDK may split. When
         * this is empty, there are no constraints on where to split.
         * </pre>
         *
         * <code>repeated int64 allowed_split_points = 3;</code>
         * @param values The allowedSplitPoints to add.
         * @return This builder for chaining.
         */
        public Builder addAllAllowedSplitPoints(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureAllowedSplitPointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, allowedSplitPoints_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Optional) A set of allowed element indices where the SDK may split. When
         * this is empty, there are no constraints on where to split.
         * </pre>
         *
         * <code>repeated int64 allowed_split_points = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearAllowedSplitPoints() {
          allowedSplitPoints_ = emptyLongList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        private long estimatedInputElements_ ;
        /**
         * <pre>
         * (Required for gRPC Read operation transforms) Number of total elements
         * expected to be sent to this GrpcRead operation, required to correctly
         * account for unreceived data when determining where to split.
         * </pre>
         *
         * <code>int64 estimated_input_elements = 2;</code>
         * @return The estimatedInputElements.
         */
        @java.lang.Override
        public long getEstimatedInputElements() {
          return estimatedInputElements_;
        }
        /**
         * <pre>
         * (Required for gRPC Read operation transforms) Number of total elements
         * expected to be sent to this GrpcRead operation, required to correctly
         * account for unreceived data when determining where to split.
         * </pre>
         *
         * <code>int64 estimated_input_elements = 2;</code>
         * @param value The estimatedInputElements to set.
         * @return This builder for chaining.
         */
        public Builder setEstimatedInputElements(long value) {
          
          estimatedInputElements_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required for gRPC Read operation transforms) Number of total elements
         * expected to be sent to this GrpcRead operation, required to correctly
         * account for unreceived data when determining where to split.
         * </pre>
         *
         * <code>int64 estimated_input_elements = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearEstimatedInputElements() {
          
          estimatedInputElements_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<DesiredSplit>
          PARSER = new com.google.protobuf.AbstractParser<DesiredSplit>() {
        @java.lang.Override
        public DesiredSplit parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DesiredSplit(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<DesiredSplit> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DesiredSplit> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int INSTRUCTION_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object instructionId_;
    /**
     * <pre>
     * (Required) A reference to an active process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    @java.lang.Override
    public java.lang.String getInstructionId() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instructionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A reference to an active process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInstructionIdBytes() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instructionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESIRED_SPLITS_FIELD_NUMBER = 3;
    private static final class DesiredSplitsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplitsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> desiredSplits_;
    private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit>
    internalGetDesiredSplits() {
      if (desiredSplits_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DesiredSplitsDefaultEntryHolder.defaultEntry);
      }
      return desiredSplits_;
    }

    public int getDesiredSplitsCount() {
      return internalGetDesiredSplits().getMap().size();
    }
    /**
     * <pre>
     * (Required) Specifies the desired split for each transform.
     * Currently only splits at gRPC read operations are supported.
     * This may, of course, limit the amount of work downstream operations
     * receive.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
     */

    @java.lang.Override
    public boolean containsDesiredSplits(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetDesiredSplits().getMap().containsKey(key);
    }
    /**
     * Use {@link #getDesiredSplitsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> getDesiredSplits() {
      return getDesiredSplitsMap();
    }
    /**
     * <pre>
     * (Required) Specifies the desired split for each transform.
     * Currently only splits at gRPC read operations are supported.
     * This may, of course, limit the amount of work downstream operations
     * receive.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> getDesiredSplitsMap() {
      return internalGetDesiredSplits().getMap();
    }
    /**
     * <pre>
     * (Required) Specifies the desired split for each transform.
     * Currently only splits at gRPC read operations are supported.
     * This may, of course, limit the amount of work downstream operations
     * receive.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit getDesiredSplitsOrDefault(
        java.lang.String key,
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> map =
          internalGetDesiredSplits().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Required) Specifies the desired split for each transform.
     * Currently only splits at gRPC read operations are supported.
     * This may, of course, limit the amount of work downstream operations
     * receive.
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit getDesiredSplitsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> map =
          internalGetDesiredSplits().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instructionId_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetDesiredSplits(),
          DesiredSplitsDefaultEntryHolder.defaultEntry,
          3);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instructionId_);
      }
      for (java.util.Map.Entry<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> entry
           : internalGetDesiredSplits().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit>
        desiredSplits__ = DesiredSplitsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, desiredSplits__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) obj;

      if (!getInstructionId()
          .equals(other.getInstructionId())) return false;
      if (!internalGetDesiredSplits().equals(
          other.internalGetDesiredSplits())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInstructionId().hashCode();
      if (!internalGetDesiredSplits().getMap().isEmpty()) {
        hash = (37 * hash) + DESIRED_SPLITS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetDesiredSplits().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Represents a request to the SDK to split a currently active bundle.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetDesiredSplits();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetMutableDesiredSplits();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        instructionId_ = "";

        internalGetMutableDesiredSplits().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest(this);
        int from_bitField0_ = bitField0_;
        result.instructionId_ = instructionId_;
        result.desiredSplits_ = internalGetDesiredSplits();
        result.desiredSplits_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.getDefaultInstance()) return this;
        if (!other.getInstructionId().isEmpty()) {
          instructionId_ = other.instructionId_;
          onChanged();
        }
        internalGetMutableDesiredSplits().mergeFrom(
            other.internalGetDesiredSplits());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object instructionId_ = "";
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The instructionId.
       */
      public java.lang.String getInstructionId() {
        java.lang.Object ref = instructionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instructionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The bytes for instructionId.
       */
      public com.google.protobuf.ByteString
          getInstructionIdBytes() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instructionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instructionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInstructionId() {
        
        instructionId_ = getDefaultInstance().getInstructionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference to an active process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The bytes for instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instructionId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> desiredSplits_;
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit>
      internalGetDesiredSplits() {
        if (desiredSplits_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              DesiredSplitsDefaultEntryHolder.defaultEntry);
        }
        return desiredSplits_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit>
      internalGetMutableDesiredSplits() {
        onChanged();;
        if (desiredSplits_ == null) {
          desiredSplits_ = com.google.protobuf.MapField.newMapField(
              DesiredSplitsDefaultEntryHolder.defaultEntry);
        }
        if (!desiredSplits_.isMutable()) {
          desiredSplits_ = desiredSplits_.copy();
        }
        return desiredSplits_;
      }

      public int getDesiredSplitsCount() {
        return internalGetDesiredSplits().getMap().size();
      }
      /**
       * <pre>
       * (Required) Specifies the desired split for each transform.
       * Currently only splits at gRPC read operations are supported.
       * This may, of course, limit the amount of work downstream operations
       * receive.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
       */

      @java.lang.Override
      public boolean containsDesiredSplits(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetDesiredSplits().getMap().containsKey(key);
      }
      /**
       * Use {@link #getDesiredSplitsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> getDesiredSplits() {
        return getDesiredSplitsMap();
      }
      /**
       * <pre>
       * (Required) Specifies the desired split for each transform.
       * Currently only splits at gRPC read operations are supported.
       * This may, of course, limit the amount of work downstream operations
       * receive.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> getDesiredSplitsMap() {
        return internalGetDesiredSplits().getMap();
      }
      /**
       * <pre>
       * (Required) Specifies the desired split for each transform.
       * Currently only splits at gRPC read operations are supported.
       * This may, of course, limit the amount of work downstream operations
       * receive.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit getDesiredSplitsOrDefault(
          java.lang.String key,
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> map =
            internalGetDesiredSplits().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * (Required) Specifies the desired split for each transform.
       * Currently only splits at gRPC read operations are supported.
       * This may, of course, limit the amount of work downstream operations
       * receive.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit getDesiredSplitsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> map =
            internalGetDesiredSplits().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearDesiredSplits() {
        internalGetMutableDesiredSplits().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * (Required) Specifies the desired split for each transform.
       * Currently only splits at gRPC read operations are supported.
       * This may, of course, limit the amount of work downstream operations
       * receive.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
       */

      public Builder removeDesiredSplits(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableDesiredSplits().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit>
      getMutableDesiredSplits() {
        return internalGetMutableDesiredSplits().getMutableMap();
      }
      /**
       * <pre>
       * (Required) Specifies the desired split for each transform.
       * Currently only splits at gRPC read operations are supported.
       * This may, of course, limit the amount of work downstream operations
       * receive.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
       */
      public Builder putDesiredSplits(
          java.lang.String key,
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableDesiredSplits().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * (Required) Specifies the desired split for each transform.
       * Currently only splits at gRPC read operations are supported.
       * This may, of course, limit the amount of work downstream operations
       * receive.
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit&gt; desired_splits = 3;</code>
       */

      public Builder putAllDesiredSplits(
          java.util.Map<java.lang.String, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest.DesiredSplit> values) {
        internalGetMutableDesiredSplits().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProcessBundleSplitRequest>
        PARSER = new com.google.protobuf.AbstractParser<ProcessBundleSplitRequest>() {
      @java.lang.Override
      public ProcessBundleSplitRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProcessBundleSplitRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProcessBundleSplitRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessBundleSplitRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProcessBundleSplitResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication> 
        getPrimaryRootsList();
    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication getPrimaryRoots(int index);
    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    int getPrimaryRootsCount();
    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder> 
        getPrimaryRootsOrBuilderList();
    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder getPrimaryRootsOrBuilder(
        int index);

    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> 
        getResidualRootsList();
    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication getResidualRoots(int index);
    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    int getResidualRootsCount();
    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> 
        getResidualRootsOrBuilderList();
    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder getResidualRootsOrBuilder(
        int index);

    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit> 
        getChannelSplitsList();
    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit getChannelSplits(int index);
    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    int getChannelSplitsCount();
    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder> 
        getChannelSplitsOrBuilderList();
    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder getChannelSplitsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Represents a partition of the bundle: a "primary" and a "residual", with the
   * following properties:
   * - The work in primary and residual doesn't overlap, and combined, adds up
   *   to the work in the current bundle if the split hadn't happened.
   * - The current bundle, if it keeps executing, will have done exactly none of
   *   the work under residual_roots and none of the elements at and beyond the
   *   first_residual_element.
   * - The current bundle, if no further splits happen, will have done exactly
   *   the work under primary_roots and all elements up to and including the
   *   channel splits last_primary_element.
   * This allows the SDK to relinquish ownership of and commit to not process some
   * of the elements that it may have been sent (the residual) while retaining
   * ownership and commitment to finish the other portion (the primary).
   * For example, lets say the SDK is processing elements A B C D E and a split
   * request comes in. The SDK could return a response with a channel split
   * representing a last_primary_element of 3 (D) and first_residual_element of 4
   * (E). The SDK is now responsible for processing A B C D and the runner must
   * process E in the future. A future split request could have the SDK split the
   * elements B into B1 and B2 and C into C1 and C2 representing their primary and
   * residual roots. The SDK would return a response with a channel split
   * representing a last_primary_element of 0 (A) and first_residual_element of 3
   * (D) with primary_roots (B1, C1) and residual_roots (B2, C2). The SDK is now
   * responsible for processing A B1 C1 and the runner must process C2 D2 (and E
   * from the prior split) in the future. Yet another future split request could
   * have the SDK could split B1 further into B1a and B1b primary and residuals
   * and return C2 as a residual (assuming C2 was left unprocessed). The SDK would
   * return a response with a channel split representing a last_primary_element of
   * 0 (A) and first_residual_element of 4 (E) with primary_roots (B1a) and
   * residual_roots (B1b, C1). The SDK is now responsible for processing A B1a the
   * runner must process B1b C1 (in addition to C2, D, E from prior splits) in the
   * future.
   * For more rigorous definitions see https://s.apache.org/beam-breaking-fusion
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse}
   */
  public static final class ProcessBundleSplitResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse)
      ProcessBundleSplitResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessBundleSplitResponse.newBuilder() to construct.
    private ProcessBundleSplitResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessBundleSplitResponse() {
      primaryRoots_ = java.util.Collections.emptyList();
      residualRoots_ = java.util.Collections.emptyList();
      channelSplits_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProcessBundleSplitResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProcessBundleSplitResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                primaryRoots_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication>();
                mutable_bitField0_ |= 0x00000001;
              }
              primaryRoots_.add(
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.parser(), extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                residualRoots_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication>();
                mutable_bitField0_ |= 0x00000002;
              }
              residualRoots_.add(
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                channelSplits_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit>();
                mutable_bitField0_ |= 0x00000004;
              }
              channelSplits_.add(
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          primaryRoots_ = java.util.Collections.unmodifiableList(primaryRoots_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          residualRoots_ = java.util.Collections.unmodifiableList(residualRoots_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          channelSplits_ = java.util.Collections.unmodifiableList(channelSplits_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.Builder.class);
    }

    public interface ChannelSplitOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) The grpc read transform reading this channel.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      java.lang.String getTransformId();
      /**
       * <pre>
       * (Required) The grpc read transform reading this channel.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      com.google.protobuf.ByteString
          getTransformIdBytes();

      /**
       * <pre>
       * (Required) The last element of the input channel that should be entirely
       * considered part of the primary, identified by its absolute zero-based
       * index in the (ordered) channel.
       * </pre>
       *
       * <code>int64 last_primary_element = 2;</code>
       * @return The lastPrimaryElement.
       */
      long getLastPrimaryElement();

      /**
       * <pre>
       * (Required) The first element of the input channel that should be entirely
       * considered part of the residual, identified by its absolute zero-based
       * index in the (ordered) channel.
       * </pre>
       *
       * <code>int64 first_residual_element = 3;</code>
       * @return The firstResidualElement.
       */
      long getFirstResidualElement();
    }
    /**
     * <pre>
     * Represents contiguous portions of the data channel that are either
     * entirely processed or entirely unprocessed and belong to the primary
     * or residual respectively.
     * This affords both a more efficient representation over the FnAPI
     * (if the bundle is large) and often a more efficient representation
     * on the runner side (e.g. if the set of elements can be represented
     * as some range in an underlying dataset).
     * Note that for a split the following properties must hold:
     * - last_primary_element &lt; first_residual_element
     * - primary roots and residual roots can only be specified if the
     *   last_primary_element + 1 &lt; first_residual_element
     *   (typically there is one primary and residual root per element in the
     *   range (last_primary_element, first_residual_element))
     * - primary roots and residual roots must represent a disjoint but full
     *   coverage of work represented by the elements between last_primary_element
     *   and first_residual_element
     * Note that subsequent splits of the same bundle must ensure that:
     * - the first_residual_element does not increase
     * - the first_residual_element does not decrease if there were residual
     *   or primary roots returned in a prior split.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit}
     */
    public static final class ChannelSplit extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit)
        ChannelSplitOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ChannelSplit.newBuilder() to construct.
      private ChannelSplit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ChannelSplit() {
        transformId_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ChannelSplit();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ChannelSplit(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                transformId_ = s;
                break;
              }
              case 16: {

                lastPrimaryElement_ = input.readInt64();
                break;
              }
              case 24: {

                firstResidualElement_ = input.readInt64();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder.class);
      }

      public static final int TRANSFORM_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object transformId_;
      /**
       * <pre>
       * (Required) The grpc read transform reading this channel.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      @java.lang.Override
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The grpc read transform reading this channel.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int LAST_PRIMARY_ELEMENT_FIELD_NUMBER = 2;
      private long lastPrimaryElement_;
      /**
       * <pre>
       * (Required) The last element of the input channel that should be entirely
       * considered part of the primary, identified by its absolute zero-based
       * index in the (ordered) channel.
       * </pre>
       *
       * <code>int64 last_primary_element = 2;</code>
       * @return The lastPrimaryElement.
       */
      @java.lang.Override
      public long getLastPrimaryElement() {
        return lastPrimaryElement_;
      }

      public static final int FIRST_RESIDUAL_ELEMENT_FIELD_NUMBER = 3;
      private long firstResidualElement_;
      /**
       * <pre>
       * (Required) The first element of the input channel that should be entirely
       * considered part of the residual, identified by its absolute zero-based
       * index in the (ordered) channel.
       * </pre>
       *
       * <code>int64 first_residual_element = 3;</code>
       * @return The firstResidualElement.
       */
      @java.lang.Override
      public long getFirstResidualElement() {
        return firstResidualElement_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transformId_);
        }
        if (lastPrimaryElement_ != 0L) {
          output.writeInt64(2, lastPrimaryElement_);
        }
        if (firstResidualElement_ != 0L) {
          output.writeInt64(3, firstResidualElement_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transformId_);
        }
        if (lastPrimaryElement_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, lastPrimaryElement_);
        }
        if (firstResidualElement_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(3, firstResidualElement_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit) obj;

        if (!getTransformId()
            .equals(other.getTransformId())) return false;
        if (getLastPrimaryElement()
            != other.getLastPrimaryElement()) return false;
        if (getFirstResidualElement()
            != other.getFirstResidualElement()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransformId().hashCode();
        hash = (37 * hash) + LAST_PRIMARY_ELEMENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getLastPrimaryElement());
        hash = (37 * hash) + FIRST_RESIDUAL_ELEMENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFirstResidualElement());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represents contiguous portions of the data channel that are either
       * entirely processed or entirely unprocessed and belong to the primary
       * or residual respectively.
       * This affords both a more efficient representation over the FnAPI
       * (if the bundle is large) and often a more efficient representation
       * on the runner side (e.g. if the set of elements can be represented
       * as some range in an underlying dataset).
       * Note that for a split the following properties must hold:
       * - last_primary_element &lt; first_residual_element
       * - primary roots and residual roots can only be specified if the
       *   last_primary_element + 1 &lt; first_residual_element
       *   (typically there is one primary and residual root per element in the
       *   range (last_primary_element, first_residual_element))
       * - primary roots and residual roots must represent a disjoint but full
       *   coverage of work represented by the elements between last_primary_element
       *   and first_residual_element
       * Note that subsequent splits of the same bundle must ensure that:
       * - the first_residual_element does not increase
       * - the first_residual_element does not decrease if there were residual
       *   or primary roots returned in a prior split.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          transformId_ = "";

          lastPrimaryElement_ = 0L;

          firstResidualElement_ = 0L;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit(this);
          result.transformId_ = transformId_;
          result.lastPrimaryElement_ = lastPrimaryElement_;
          result.firstResidualElement_ = firstResidualElement_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.getDefaultInstance()) return this;
          if (!other.getTransformId().isEmpty()) {
            transformId_ = other.transformId_;
            onChanged();
          }
          if (other.getLastPrimaryElement() != 0L) {
            setLastPrimaryElement(other.getLastPrimaryElement());
          }
          if (other.getFirstResidualElement() != 0L) {
            setFirstResidualElement(other.getFirstResidualElement());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object transformId_ = "";
        /**
         * <pre>
         * (Required) The grpc read transform reading this channel.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The transformId.
         */
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The grpc read transform reading this channel.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The bytes for transformId.
         */
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The grpc read transform reading this channel.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          transformId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The grpc read transform reading this channel.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransformId() {
          
          transformId_ = getDefaultInstance().getTransformId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The grpc read transform reading this channel.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The bytes for transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          transformId_ = value;
          onChanged();
          return this;
        }

        private long lastPrimaryElement_ ;
        /**
         * <pre>
         * (Required) The last element of the input channel that should be entirely
         * considered part of the primary, identified by its absolute zero-based
         * index in the (ordered) channel.
         * </pre>
         *
         * <code>int64 last_primary_element = 2;</code>
         * @return The lastPrimaryElement.
         */
        @java.lang.Override
        public long getLastPrimaryElement() {
          return lastPrimaryElement_;
        }
        /**
         * <pre>
         * (Required) The last element of the input channel that should be entirely
         * considered part of the primary, identified by its absolute zero-based
         * index in the (ordered) channel.
         * </pre>
         *
         * <code>int64 last_primary_element = 2;</code>
         * @param value The lastPrimaryElement to set.
         * @return This builder for chaining.
         */
        public Builder setLastPrimaryElement(long value) {
          
          lastPrimaryElement_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The last element of the input channel that should be entirely
         * considered part of the primary, identified by its absolute zero-based
         * index in the (ordered) channel.
         * </pre>
         *
         * <code>int64 last_primary_element = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearLastPrimaryElement() {
          
          lastPrimaryElement_ = 0L;
          onChanged();
          return this;
        }

        private long firstResidualElement_ ;
        /**
         * <pre>
         * (Required) The first element of the input channel that should be entirely
         * considered part of the residual, identified by its absolute zero-based
         * index in the (ordered) channel.
         * </pre>
         *
         * <code>int64 first_residual_element = 3;</code>
         * @return The firstResidualElement.
         */
        @java.lang.Override
        public long getFirstResidualElement() {
          return firstResidualElement_;
        }
        /**
         * <pre>
         * (Required) The first element of the input channel that should be entirely
         * considered part of the residual, identified by its absolute zero-based
         * index in the (ordered) channel.
         * </pre>
         *
         * <code>int64 first_residual_element = 3;</code>
         * @param value The firstResidualElement to set.
         * @return This builder for chaining.
         */
        public Builder setFirstResidualElement(long value) {
          
          firstResidualElement_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The first element of the input channel that should be entirely
         * considered part of the residual, identified by its absolute zero-based
         * index in the (ordered) channel.
         * </pre>
         *
         * <code>int64 first_residual_element = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearFirstResidualElement() {
          
          firstResidualElement_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ChannelSplit>
          PARSER = new com.google.protobuf.AbstractParser<ChannelSplit>() {
        @java.lang.Override
        public ChannelSplit parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ChannelSplit(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ChannelSplit> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ChannelSplit> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int PRIMARY_ROOTS_FIELD_NUMBER = 1;
    private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication> primaryRoots_;
    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication> getPrimaryRootsList() {
      return primaryRoots_;
    }
    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder> 
        getPrimaryRootsOrBuilderList() {
      return primaryRoots_;
    }
    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    @java.lang.Override
    public int getPrimaryRootsCount() {
      return primaryRoots_.size();
    }
    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication getPrimaryRoots(int index) {
      return primaryRoots_.get(index);
    }
    /**
     * <pre>
     * (Optional) Root applications that should replace the current bundle.
     * Note that primary roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding residual root contained within
     * residual_roots representing the remainder of processing for the original
     * element this this primary root represents a fraction of.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder getPrimaryRootsOrBuilder(
        int index) {
      return primaryRoots_.get(index);
    }

    public static final int RESIDUAL_ROOTS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> residualRoots_;
    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> getResidualRootsList() {
      return residualRoots_;
    }
    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> 
        getResidualRootsOrBuilderList() {
      return residualRoots_;
    }
    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public int getResidualRootsCount() {
      return residualRoots_.size();
    }
    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication getResidualRoots(int index) {
      return residualRoots_.get(index);
    }
    /**
     * <pre>
     * (Optional) Root applications that have been removed from the current bundle and
     * have to be executed in a separate bundle (e.g. in parallel on a different
     * worker, or after the current bundle completes, etc.)
     * Note that residual roots can only be specified if a channel split's
     * last_primary_element + 1 &lt; first_residual_element
     * Note that there must be a corresponding primary root contained within
     * primary_roots representing the remainder of processing for the original
     * element this this residual root represents a fraction of.
     * Note that subsequent splits must not return prior residual roots.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder getResidualRootsOrBuilder(
        int index) {
      return residualRoots_.get(index);
    }

    public static final int CHANNEL_SPLITS_FIELD_NUMBER = 3;
    private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit> channelSplits_;
    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit> getChannelSplitsList() {
      return channelSplits_;
    }
    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder> 
        getChannelSplitsOrBuilderList() {
      return channelSplits_;
    }
    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    @java.lang.Override
    public int getChannelSplitsCount() {
      return channelSplits_.size();
    }
    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit getChannelSplits(int index) {
      return channelSplits_.get(index);
    }
    /**
     * <pre>
     * (Required) Partitions of input data channels into primary and residual
     * elements, if any. Must not include any elements represented in the bundle
     * applications roots above of the current split or any prior split of the
     * same bundle.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder getChannelSplitsOrBuilder(
        int index) {
      return channelSplits_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < primaryRoots_.size(); i++) {
        output.writeMessage(1, primaryRoots_.get(i));
      }
      for (int i = 0; i < residualRoots_.size(); i++) {
        output.writeMessage(2, residualRoots_.get(i));
      }
      for (int i = 0; i < channelSplits_.size(); i++) {
        output.writeMessage(3, channelSplits_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < primaryRoots_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, primaryRoots_.get(i));
      }
      for (int i = 0; i < residualRoots_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, residualRoots_.get(i));
      }
      for (int i = 0; i < channelSplits_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, channelSplits_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) obj;

      if (!getPrimaryRootsList()
          .equals(other.getPrimaryRootsList())) return false;
      if (!getResidualRootsList()
          .equals(other.getResidualRootsList())) return false;
      if (!getChannelSplitsList()
          .equals(other.getChannelSplitsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getPrimaryRootsCount() > 0) {
        hash = (37 * hash) + PRIMARY_ROOTS_FIELD_NUMBER;
        hash = (53 * hash) + getPrimaryRootsList().hashCode();
      }
      if (getResidualRootsCount() > 0) {
        hash = (37 * hash) + RESIDUAL_ROOTS_FIELD_NUMBER;
        hash = (53 * hash) + getResidualRootsList().hashCode();
      }
      if (getChannelSplitsCount() > 0) {
        hash = (37 * hash) + CHANNEL_SPLITS_FIELD_NUMBER;
        hash = (53 * hash) + getChannelSplitsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Represents a partition of the bundle: a "primary" and a "residual", with the
     * following properties:
     * - The work in primary and residual doesn't overlap, and combined, adds up
     *   to the work in the current bundle if the split hadn't happened.
     * - The current bundle, if it keeps executing, will have done exactly none of
     *   the work under residual_roots and none of the elements at and beyond the
     *   first_residual_element.
     * - The current bundle, if no further splits happen, will have done exactly
     *   the work under primary_roots and all elements up to and including the
     *   channel splits last_primary_element.
     * This allows the SDK to relinquish ownership of and commit to not process some
     * of the elements that it may have been sent (the residual) while retaining
     * ownership and commitment to finish the other portion (the primary).
     * For example, lets say the SDK is processing elements A B C D E and a split
     * request comes in. The SDK could return a response with a channel split
     * representing a last_primary_element of 3 (D) and first_residual_element of 4
     * (E). The SDK is now responsible for processing A B C D and the runner must
     * process E in the future. A future split request could have the SDK split the
     * elements B into B1 and B2 and C into C1 and C2 representing their primary and
     * residual roots. The SDK would return a response with a channel split
     * representing a last_primary_element of 0 (A) and first_residual_element of 3
     * (D) with primary_roots (B1, C1) and residual_roots (B2, C2). The SDK is now
     * responsible for processing A B1 C1 and the runner must process C2 D2 (and E
     * from the prior split) in the future. Yet another future split request could
     * have the SDK could split B1 further into B1a and B1b primary and residuals
     * and return C2 as a residual (assuming C2 was left unprocessed). The SDK would
     * return a response with a channel split representing a last_primary_element of
     * 0 (A) and first_residual_element of 4 (E) with primary_roots (B1a) and
     * residual_roots (B1b, C1). The SDK is now responsible for processing A B1a the
     * runner must process B1b C1 (in addition to C2, D, E from prior splits) in the
     * future.
     * For more rigorous definitions see https://s.apache.org/beam-breaking-fusion
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPrimaryRootsFieldBuilder();
          getResidualRootsFieldBuilder();
          getChannelSplitsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (primaryRootsBuilder_ == null) {
          primaryRoots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          primaryRootsBuilder_.clear();
        }
        if (residualRootsBuilder_ == null) {
          residualRoots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          residualRootsBuilder_.clear();
        }
        if (channelSplitsBuilder_ == null) {
          channelSplits_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          channelSplitsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse(this);
        int from_bitField0_ = bitField0_;
        if (primaryRootsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            primaryRoots_ = java.util.Collections.unmodifiableList(primaryRoots_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.primaryRoots_ = primaryRoots_;
        } else {
          result.primaryRoots_ = primaryRootsBuilder_.build();
        }
        if (residualRootsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            residualRoots_ = java.util.Collections.unmodifiableList(residualRoots_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.residualRoots_ = residualRoots_;
        } else {
          result.residualRoots_ = residualRootsBuilder_.build();
        }
        if (channelSplitsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            channelSplits_ = java.util.Collections.unmodifiableList(channelSplits_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.channelSplits_ = channelSplits_;
        } else {
          result.channelSplits_ = channelSplitsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.getDefaultInstance()) return this;
        if (primaryRootsBuilder_ == null) {
          if (!other.primaryRoots_.isEmpty()) {
            if (primaryRoots_.isEmpty()) {
              primaryRoots_ = other.primaryRoots_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePrimaryRootsIsMutable();
              primaryRoots_.addAll(other.primaryRoots_);
            }
            onChanged();
          }
        } else {
          if (!other.primaryRoots_.isEmpty()) {
            if (primaryRootsBuilder_.isEmpty()) {
              primaryRootsBuilder_.dispose();
              primaryRootsBuilder_ = null;
              primaryRoots_ = other.primaryRoots_;
              bitField0_ = (bitField0_ & ~0x00000001);
              primaryRootsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPrimaryRootsFieldBuilder() : null;
            } else {
              primaryRootsBuilder_.addAllMessages(other.primaryRoots_);
            }
          }
        }
        if (residualRootsBuilder_ == null) {
          if (!other.residualRoots_.isEmpty()) {
            if (residualRoots_.isEmpty()) {
              residualRoots_ = other.residualRoots_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureResidualRootsIsMutable();
              residualRoots_.addAll(other.residualRoots_);
            }
            onChanged();
          }
        } else {
          if (!other.residualRoots_.isEmpty()) {
            if (residualRootsBuilder_.isEmpty()) {
              residualRootsBuilder_.dispose();
              residualRootsBuilder_ = null;
              residualRoots_ = other.residualRoots_;
              bitField0_ = (bitField0_ & ~0x00000002);
              residualRootsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getResidualRootsFieldBuilder() : null;
            } else {
              residualRootsBuilder_.addAllMessages(other.residualRoots_);
            }
          }
        }
        if (channelSplitsBuilder_ == null) {
          if (!other.channelSplits_.isEmpty()) {
            if (channelSplits_.isEmpty()) {
              channelSplits_ = other.channelSplits_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureChannelSplitsIsMutable();
              channelSplits_.addAll(other.channelSplits_);
            }
            onChanged();
          }
        } else {
          if (!other.channelSplits_.isEmpty()) {
            if (channelSplitsBuilder_.isEmpty()) {
              channelSplitsBuilder_.dispose();
              channelSplitsBuilder_ = null;
              channelSplits_ = other.channelSplits_;
              bitField0_ = (bitField0_ & ~0x00000004);
              channelSplitsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getChannelSplitsFieldBuilder() : null;
            } else {
              channelSplitsBuilder_.addAllMessages(other.channelSplits_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication> primaryRoots_ =
        java.util.Collections.emptyList();
      private void ensurePrimaryRootsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          primaryRoots_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication>(primaryRoots_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder> primaryRootsBuilder_;

      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication> getPrimaryRootsList() {
        if (primaryRootsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(primaryRoots_);
        } else {
          return primaryRootsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public int getPrimaryRootsCount() {
        if (primaryRootsBuilder_ == null) {
          return primaryRoots_.size();
        } else {
          return primaryRootsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication getPrimaryRoots(int index) {
        if (primaryRootsBuilder_ == null) {
          return primaryRoots_.get(index);
        } else {
          return primaryRootsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public Builder setPrimaryRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication value) {
        if (primaryRootsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePrimaryRootsIsMutable();
          primaryRoots_.set(index, value);
          onChanged();
        } else {
          primaryRootsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public Builder setPrimaryRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder builderForValue) {
        if (primaryRootsBuilder_ == null) {
          ensurePrimaryRootsIsMutable();
          primaryRoots_.set(index, builderForValue.build());
          onChanged();
        } else {
          primaryRootsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public Builder addPrimaryRoots(org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication value) {
        if (primaryRootsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePrimaryRootsIsMutable();
          primaryRoots_.add(value);
          onChanged();
        } else {
          primaryRootsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public Builder addPrimaryRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication value) {
        if (primaryRootsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePrimaryRootsIsMutable();
          primaryRoots_.add(index, value);
          onChanged();
        } else {
          primaryRootsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public Builder addPrimaryRoots(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder builderForValue) {
        if (primaryRootsBuilder_ == null) {
          ensurePrimaryRootsIsMutable();
          primaryRoots_.add(builderForValue.build());
          onChanged();
        } else {
          primaryRootsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public Builder addPrimaryRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder builderForValue) {
        if (primaryRootsBuilder_ == null) {
          ensurePrimaryRootsIsMutable();
          primaryRoots_.add(index, builderForValue.build());
          onChanged();
        } else {
          primaryRootsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public Builder addAllPrimaryRoots(
          java.lang.Iterable<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication> values) {
        if (primaryRootsBuilder_ == null) {
          ensurePrimaryRootsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, primaryRoots_);
          onChanged();
        } else {
          primaryRootsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public Builder clearPrimaryRoots() {
        if (primaryRootsBuilder_ == null) {
          primaryRoots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          primaryRootsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public Builder removePrimaryRoots(int index) {
        if (primaryRootsBuilder_ == null) {
          ensurePrimaryRootsIsMutable();
          primaryRoots_.remove(index);
          onChanged();
        } else {
          primaryRootsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder getPrimaryRootsBuilder(
          int index) {
        return getPrimaryRootsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder getPrimaryRootsOrBuilder(
          int index) {
        if (primaryRootsBuilder_ == null) {
          return primaryRoots_.get(index);  } else {
          return primaryRootsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder> 
           getPrimaryRootsOrBuilderList() {
        if (primaryRootsBuilder_ != null) {
          return primaryRootsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(primaryRoots_);
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder addPrimaryRootsBuilder() {
        return getPrimaryRootsFieldBuilder().addBuilder(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder addPrimaryRootsBuilder(
          int index) {
        return getPrimaryRootsFieldBuilder().addBuilder(
            index, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Root applications that should replace the current bundle.
       * Note that primary roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding residual root contained within
       * residual_roots representing the remainder of processing for the original
       * element this this primary root represents a fraction of.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.BundleApplication primary_roots = 1;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder> 
           getPrimaryRootsBuilderList() {
        return getPrimaryRootsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder> 
          getPrimaryRootsFieldBuilder() {
        if (primaryRootsBuilder_ == null) {
          primaryRootsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.BundleApplicationOrBuilder>(
                  primaryRoots_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          primaryRoots_ = null;
        }
        return primaryRootsBuilder_;
      }

      private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> residualRoots_ =
        java.util.Collections.emptyList();
      private void ensureResidualRootsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          residualRoots_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication>(residualRoots_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> residualRootsBuilder_;

      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> getResidualRootsList() {
        if (residualRootsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(residualRoots_);
        } else {
          return residualRootsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public int getResidualRootsCount() {
        if (residualRootsBuilder_ == null) {
          return residualRoots_.size();
        } else {
          return residualRootsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication getResidualRoots(int index) {
        if (residualRootsBuilder_ == null) {
          return residualRoots_.get(index);
        } else {
          return residualRootsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder setResidualRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication value) {
        if (residualRootsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResidualRootsIsMutable();
          residualRoots_.set(index, value);
          onChanged();
        } else {
          residualRootsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder setResidualRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder builderForValue) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          residualRoots_.set(index, builderForValue.build());
          onChanged();
        } else {
          residualRootsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addResidualRoots(org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication value) {
        if (residualRootsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResidualRootsIsMutable();
          residualRoots_.add(value);
          onChanged();
        } else {
          residualRootsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addResidualRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication value) {
        if (residualRootsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResidualRootsIsMutable();
          residualRoots_.add(index, value);
          onChanged();
        } else {
          residualRootsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addResidualRoots(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder builderForValue) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          residualRoots_.add(builderForValue.build());
          onChanged();
        } else {
          residualRootsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addResidualRoots(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder builderForValue) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          residualRoots_.add(index, builderForValue.build());
          onChanged();
        } else {
          residualRootsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder addAllResidualRoots(
          java.lang.Iterable<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication> values) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, residualRoots_);
          onChanged();
        } else {
          residualRootsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder clearResidualRoots() {
        if (residualRootsBuilder_ == null) {
          residualRoots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          residualRootsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public Builder removeResidualRoots(int index) {
        if (residualRootsBuilder_ == null) {
          ensureResidualRootsIsMutable();
          residualRoots_.remove(index);
          onChanged();
        } else {
          residualRootsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder getResidualRootsBuilder(
          int index) {
        return getResidualRootsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder getResidualRootsOrBuilder(
          int index) {
        if (residualRootsBuilder_ == null) {
          return residualRoots_.get(index);  } else {
          return residualRootsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> 
           getResidualRootsOrBuilderList() {
        if (residualRootsBuilder_ != null) {
          return residualRootsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(residualRoots_);
        }
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder addResidualRootsBuilder() {
        return getResidualRootsFieldBuilder().addBuilder(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder addResidualRootsBuilder(
          int index) {
        return getResidualRootsFieldBuilder().addBuilder(
            index, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) Root applications that have been removed from the current bundle and
       * have to be executed in a separate bundle (e.g. in parallel on a different
       * worker, or after the current bundle completes, etc.)
       * Note that residual roots can only be specified if a channel split's
       * last_primary_element + 1 &lt; first_residual_element
       * Note that there must be a corresponding primary root contained within
       * primary_roots representing the remainder of processing for the original
       * element this this residual root represents a fraction of.
       * Note that subsequent splits must not return prior residual roots.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.DelayedBundleApplication residual_roots = 2;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder> 
           getResidualRootsBuilderList() {
        return getResidualRootsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder> 
          getResidualRootsFieldBuilder() {
        if (residualRootsBuilder_ == null) {
          residualRootsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplication.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.DelayedBundleApplicationOrBuilder>(
                  residualRoots_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          residualRoots_ = null;
        }
        return residualRootsBuilder_;
      }

      private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit> channelSplits_ =
        java.util.Collections.emptyList();
      private void ensureChannelSplitsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          channelSplits_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit>(channelSplits_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder> channelSplitsBuilder_;

      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit> getChannelSplitsList() {
        if (channelSplitsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(channelSplits_);
        } else {
          return channelSplitsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public int getChannelSplitsCount() {
        if (channelSplitsBuilder_ == null) {
          return channelSplits_.size();
        } else {
          return channelSplitsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit getChannelSplits(int index) {
        if (channelSplitsBuilder_ == null) {
          return channelSplits_.get(index);
        } else {
          return channelSplitsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public Builder setChannelSplits(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit value) {
        if (channelSplitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelSplitsIsMutable();
          channelSplits_.set(index, value);
          onChanged();
        } else {
          channelSplitsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public Builder setChannelSplits(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder builderForValue) {
        if (channelSplitsBuilder_ == null) {
          ensureChannelSplitsIsMutable();
          channelSplits_.set(index, builderForValue.build());
          onChanged();
        } else {
          channelSplitsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public Builder addChannelSplits(org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit value) {
        if (channelSplitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelSplitsIsMutable();
          channelSplits_.add(value);
          onChanged();
        } else {
          channelSplitsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public Builder addChannelSplits(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit value) {
        if (channelSplitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelSplitsIsMutable();
          channelSplits_.add(index, value);
          onChanged();
        } else {
          channelSplitsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public Builder addChannelSplits(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder builderForValue) {
        if (channelSplitsBuilder_ == null) {
          ensureChannelSplitsIsMutable();
          channelSplits_.add(builderForValue.build());
          onChanged();
        } else {
          channelSplitsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public Builder addChannelSplits(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder builderForValue) {
        if (channelSplitsBuilder_ == null) {
          ensureChannelSplitsIsMutable();
          channelSplits_.add(index, builderForValue.build());
          onChanged();
        } else {
          channelSplitsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public Builder addAllChannelSplits(
          java.lang.Iterable<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit> values) {
        if (channelSplitsBuilder_ == null) {
          ensureChannelSplitsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, channelSplits_);
          onChanged();
        } else {
          channelSplitsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public Builder clearChannelSplits() {
        if (channelSplitsBuilder_ == null) {
          channelSplits_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          channelSplitsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public Builder removeChannelSplits(int index) {
        if (channelSplitsBuilder_ == null) {
          ensureChannelSplitsIsMutable();
          channelSplits_.remove(index);
          onChanged();
        } else {
          channelSplitsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder getChannelSplitsBuilder(
          int index) {
        return getChannelSplitsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder getChannelSplitsOrBuilder(
          int index) {
        if (channelSplitsBuilder_ == null) {
          return channelSplits_.get(index);  } else {
          return channelSplitsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder> 
           getChannelSplitsOrBuilderList() {
        if (channelSplitsBuilder_ != null) {
          return channelSplitsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(channelSplits_);
        }
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder addChannelSplitsBuilder() {
        return getChannelSplitsFieldBuilder().addBuilder(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.getDefaultInstance());
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder addChannelSplitsBuilder(
          int index) {
        return getChannelSplitsFieldBuilder().addBuilder(
            index, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.getDefaultInstance());
      }
      /**
       * <pre>
       * (Required) Partitions of input data channels into primary and residual
       * elements, if any. Must not include any elements represented in the bundle
       * applications roots above of the current split or any prior split of the
       * same bundle.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit channel_splits = 3;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder> 
           getChannelSplitsBuilderList() {
        return getChannelSplitsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder> 
          getChannelSplitsFieldBuilder() {
        if (channelSplitsBuilder_ == null) {
          channelSplitsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplit.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse.ChannelSplitOrBuilder>(
                  channelSplits_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          channelSplits_ = null;
        }
        return channelSplitsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProcessBundleSplitResponse>
        PARSER = new com.google.protobuf.AbstractParser<ProcessBundleSplitResponse>() {
      @java.lang.Override
      public ProcessBundleSplitResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProcessBundleSplitResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProcessBundleSplitResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessBundleSplitResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.ProcessBundleSplitResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FinalizeBundleRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A reference to a completed process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    java.lang.String getInstructionId();
    /**
     * <pre>
     * (Required) A reference to a completed process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    com.google.protobuf.ByteString
        getInstructionIdBytes();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest}
   */
  public static final class FinalizeBundleRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest)
      FinalizeBundleRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FinalizeBundleRequest.newBuilder() to construct.
    private FinalizeBundleRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FinalizeBundleRequest() {
      instructionId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FinalizeBundleRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FinalizeBundleRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              instructionId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.Builder.class);
    }

    public static final int INSTRUCTION_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object instructionId_;
    /**
     * <pre>
     * (Required) A reference to a completed process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The instructionId.
     */
    @java.lang.Override
    public java.lang.String getInstructionId() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instructionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A reference to a completed process bundle request with the given
     * instruction id.
     * </pre>
     *
     * <code>string instruction_id = 1;</code>
     * @return The bytes for instructionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInstructionIdBytes() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instructionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instructionId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instructionId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) obj;

      if (!getInstructionId()
          .equals(other.getInstructionId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInstructionId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        instructionId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest(this);
        result.instructionId_ = instructionId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest.getDefaultInstance()) return this;
        if (!other.getInstructionId().isEmpty()) {
          instructionId_ = other.instructionId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object instructionId_ = "";
      /**
       * <pre>
       * (Required) A reference to a completed process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The instructionId.
       */
      public java.lang.String getInstructionId() {
        java.lang.Object ref = instructionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instructionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference to a completed process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The bytes for instructionId.
       */
      public com.google.protobuf.ByteString
          getInstructionIdBytes() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instructionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference to a completed process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instructionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference to a completed process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInstructionId() {
        
        instructionId_ = getDefaultInstance().getInstructionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference to a completed process bundle request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @param value The bytes for instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instructionId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FinalizeBundleRequest>
        PARSER = new com.google.protobuf.AbstractParser<FinalizeBundleRequest>() {
      @java.lang.Override
      public FinalizeBundleRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FinalizeBundleRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FinalizeBundleRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FinalizeBundleRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FinalizeBundleResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * Empty
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse}
   */
  public static final class FinalizeBundleResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse)
      FinalizeBundleResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FinalizeBundleResponse.newBuilder() to construct.
    private FinalizeBundleResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FinalizeBundleResponse() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FinalizeBundleResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FinalizeBundleResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Empty
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FinalizeBundleResponse>
        PARSER = new com.google.protobuf.AbstractParser<FinalizeBundleResponse>() {
      @java.lang.Override
      public FinalizeBundleResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FinalizeBundleResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FinalizeBundleResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FinalizeBundleResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.FinalizeBundleResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ElementsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.Elements)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data> 
        getDataList();
    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data getData(int index);
    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    int getDataCount();
    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder> 
        getDataOrBuilderList();
    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder getDataOrBuilder(
        int index);

    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers> 
        getTimersList();
    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers getTimers(int index);
    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    int getTimersCount();
    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder> 
        getTimersOrBuilderList();
    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder getTimersOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Messages used to represent logical byte streams.
   * Stable
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.Elements}
   */
  public static final class Elements extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.Elements)
      ElementsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Elements.newBuilder() to construct.
    private Elements(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Elements() {
      data_ = java.util.Collections.emptyList();
      timers_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Elements();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Elements(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                data_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data>();
                mutable_bitField0_ |= 0x00000001;
              }
              data_.add(
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.parser(), extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                timers_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers>();
                mutable_bitField0_ |= 0x00000002;
              }
              timers_.add(
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          timers_ = java.util.Collections.unmodifiableList(timers_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder.class);
    }

    public interface DataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.Elements.Data)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) A reference to an active instruction request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The instructionId.
       */
      java.lang.String getInstructionId();
      /**
       * <pre>
       * (Required) A reference to an active instruction request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The bytes for instructionId.
       */
      com.google.protobuf.ByteString
          getInstructionIdBytes();

      /**
       * <pre>
       * (Required) A definition representing a consumer or producer of this data.
       * If received by a harness, this represents the consumer within that
       * harness that should consume these bytes. If sent by a harness, this
       * represents the producer of these bytes.
       * Note that a single element may span multiple Data messages.
       * Note that a sending/receiving pair should share the same identifier.
       * </pre>
       *
       * <code>string transform_id = 2;</code>
       * @return The transformId.
       */
      java.lang.String getTransformId();
      /**
       * <pre>
       * (Required) A definition representing a consumer or producer of this data.
       * If received by a harness, this represents the consumer within that
       * harness that should consume these bytes. If sent by a harness, this
       * represents the producer of these bytes.
       * Note that a single element may span multiple Data messages.
       * Note that a sending/receiving pair should share the same identifier.
       * </pre>
       *
       * <code>string transform_id = 2;</code>
       * @return The bytes for transformId.
       */
      com.google.protobuf.ByteString
          getTransformIdBytes();

      /**
       * <pre>
       * (Optional) Represents a part of a logical byte stream. Elements within
       * the logical byte stream are encoded in the nested context and
       * concatenated together.
       * </pre>
       *
       * <code>bytes data = 3;</code>
       * @return The data.
       */
      com.google.protobuf.ByteString getData();

      /**
       * <pre>
       * (Optional) Set this bit to indicate the this is the last data block
       * for the given instruction and transform, ending the stream.
       * </pre>
       *
       * <code>bool is_last = 4;</code>
       * @return The isLast.
       */
      boolean getIsLast();
    }
    /**
     * <pre>
     * Represents multiple encoded elements in nested context for a given named
     * instruction and transform.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.Elements.Data}
     */
    public static final class Data extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.Elements.Data)
        DataOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Data.newBuilder() to construct.
      private Data(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Data() {
        instructionId_ = "";
        transformId_ = "";
        data_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Data();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Data(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                instructionId_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                transformId_ = s;
                break;
              }
              case 26: {

                data_ = input.readBytes();
                break;
              }
              case 32: {

                isLast_ = input.readBool();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder.class);
      }

      public static final int INSTRUCTION_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object instructionId_;
      /**
       * <pre>
       * (Required) A reference to an active instruction request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The instructionId.
       */
      @java.lang.Override
      public java.lang.String getInstructionId() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instructionId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) A reference to an active instruction request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The bytes for instructionId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getInstructionIdBytes() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instructionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TRANSFORM_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object transformId_;
      /**
       * <pre>
       * (Required) A definition representing a consumer or producer of this data.
       * If received by a harness, this represents the consumer within that
       * harness that should consume these bytes. If sent by a harness, this
       * represents the producer of these bytes.
       * Note that a single element may span multiple Data messages.
       * Note that a sending/receiving pair should share the same identifier.
       * </pre>
       *
       * <code>string transform_id = 2;</code>
       * @return The transformId.
       */
      @java.lang.Override
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) A definition representing a consumer or producer of this data.
       * If received by a harness, this represents the consumer within that
       * harness that should consume these bytes. If sent by a harness, this
       * represents the producer of these bytes.
       * Note that a single element may span multiple Data messages.
       * Note that a sending/receiving pair should share the same identifier.
       * </pre>
       *
       * <code>string transform_id = 2;</code>
       * @return The bytes for transformId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DATA_FIELD_NUMBER = 3;
      private com.google.protobuf.ByteString data_;
      /**
       * <pre>
       * (Optional) Represents a part of a logical byte stream. Elements within
       * the logical byte stream are encoded in the nested context and
       * concatenated together.
       * </pre>
       *
       * <code>bytes data = 3;</code>
       * @return The data.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getData() {
        return data_;
      }

      public static final int IS_LAST_FIELD_NUMBER = 4;
      private boolean isLast_;
      /**
       * <pre>
       * (Optional) Set this bit to indicate the this is the last data block
       * for the given instruction and transform, ending the stream.
       * </pre>
       *
       * <code>bool is_last = 4;</code>
       * @return The isLast.
       */
      @java.lang.Override
      public boolean getIsLast() {
        return isLast_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instructionId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, transformId_);
        }
        if (!data_.isEmpty()) {
          output.writeBytes(3, data_);
        }
        if (isLast_ != false) {
          output.writeBool(4, isLast_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instructionId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, transformId_);
        }
        if (!data_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, data_);
        }
        if (isLast_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(4, isLast_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data) obj;

        if (!getInstructionId()
            .equals(other.getInstructionId())) return false;
        if (!getTransformId()
            .equals(other.getTransformId())) return false;
        if (!getData()
            .equals(other.getData())) return false;
        if (getIsLast()
            != other.getIsLast()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getInstructionId().hashCode();
        hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransformId().hashCode();
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getData().hashCode();
        hash = (37 * hash) + IS_LAST_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsLast());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represents multiple encoded elements in nested context for a given named
       * instruction and transform.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.Elements.Data}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.Elements.Data)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          instructionId_ = "";

          transformId_ = "";

          data_ = com.google.protobuf.ByteString.EMPTY;

          isLast_ = false;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data(this);
          result.instructionId_ = instructionId_;
          result.transformId_ = transformId_;
          result.data_ = data_;
          result.isLast_ = isLast_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.getDefaultInstance()) return this;
          if (!other.getInstructionId().isEmpty()) {
            instructionId_ = other.instructionId_;
            onChanged();
          }
          if (!other.getTransformId().isEmpty()) {
            transformId_ = other.transformId_;
            onChanged();
          }
          if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
            setData(other.getData());
          }
          if (other.getIsLast() != false) {
            setIsLast(other.getIsLast());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object instructionId_ = "";
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @return The instructionId.
         */
        public java.lang.String getInstructionId() {
          java.lang.Object ref = instructionId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            instructionId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @return The bytes for instructionId.
         */
        public com.google.protobuf.ByteString
            getInstructionIdBytes() {
          java.lang.Object ref = instructionId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            instructionId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @param value The instructionId to set.
         * @return This builder for chaining.
         */
        public Builder setInstructionId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          instructionId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearInstructionId() {
          
          instructionId_ = getDefaultInstance().getInstructionId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @param value The bytes for instructionId to set.
         * @return This builder for chaining.
         */
        public Builder setInstructionIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          instructionId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object transformId_ = "";
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these bytes. If sent by a harness, this
         * represents the producer of these bytes.
         * Note that a single element may span multiple Data messages.
         * Note that a sending/receiving pair should share the same identifier.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @return The transformId.
         */
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these bytes. If sent by a harness, this
         * represents the producer of these bytes.
         * Note that a single element may span multiple Data messages.
         * Note that a sending/receiving pair should share the same identifier.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @return The bytes for transformId.
         */
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these bytes. If sent by a harness, this
         * represents the producer of these bytes.
         * Note that a single element may span multiple Data messages.
         * Note that a sending/receiving pair should share the same identifier.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @param value The transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          transformId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these bytes. If sent by a harness, this
         * represents the producer of these bytes.
         * Note that a single element may span multiple Data messages.
         * Note that a sending/receiving pair should share the same identifier.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransformId() {
          
          transformId_ = getDefaultInstance().getTransformId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these bytes. If sent by a harness, this
         * represents the producer of these bytes.
         * Note that a single element may span multiple Data messages.
         * Note that a sending/receiving pair should share the same identifier.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @param value The bytes for transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          transformId_ = value;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Optional) Represents a part of a logical byte stream. Elements within
         * the logical byte stream are encoded in the nested context and
         * concatenated together.
         * </pre>
         *
         * <code>bytes data = 3;</code>
         * @return The data.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getData() {
          return data_;
        }
        /**
         * <pre>
         * (Optional) Represents a part of a logical byte stream. Elements within
         * the logical byte stream are encoded in the nested context and
         * concatenated together.
         * </pre>
         *
         * <code>bytes data = 3;</code>
         * @param value The data to set.
         * @return This builder for chaining.
         */
        public Builder setData(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          data_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Optional) Represents a part of a logical byte stream. Elements within
         * the logical byte stream are encoded in the nested context and
         * concatenated together.
         * </pre>
         *
         * <code>bytes data = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearData() {
          
          data_ = getDefaultInstance().getData();
          onChanged();
          return this;
        }

        private boolean isLast_ ;
        /**
         * <pre>
         * (Optional) Set this bit to indicate the this is the last data block
         * for the given instruction and transform, ending the stream.
         * </pre>
         *
         * <code>bool is_last = 4;</code>
         * @return The isLast.
         */
        @java.lang.Override
        public boolean getIsLast() {
          return isLast_;
        }
        /**
         * <pre>
         * (Optional) Set this bit to indicate the this is the last data block
         * for the given instruction and transform, ending the stream.
         * </pre>
         *
         * <code>bool is_last = 4;</code>
         * @param value The isLast to set.
         * @return This builder for chaining.
         */
        public Builder setIsLast(boolean value) {
          
          isLast_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Optional) Set this bit to indicate the this is the last data block
         * for the given instruction and transform, ending the stream.
         * </pre>
         *
         * <code>bool is_last = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearIsLast() {
          
          isLast_ = false;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.Elements.Data)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.Elements.Data)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Data>
          PARSER = new com.google.protobuf.AbstractParser<Data>() {
        @java.lang.Override
        public Data parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Data(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Data> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Data> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TimersOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.Elements.Timers)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) A reference to an active instruction request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The instructionId.
       */
      java.lang.String getInstructionId();
      /**
       * <pre>
       * (Required) A reference to an active instruction request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The bytes for instructionId.
       */
      com.google.protobuf.ByteString
          getInstructionIdBytes();

      /**
       * <pre>
       * (Required) A definition representing a consumer or producer of this data.
       * If received by a harness, this represents the consumer within that
       * harness that should consume these timers. If sent by a harness, this
       * represents the producer of these timers.
       * </pre>
       *
       * <code>string transform_id = 2;</code>
       * @return The transformId.
       */
      java.lang.String getTransformId();
      /**
       * <pre>
       * (Required) A definition representing a consumer or producer of this data.
       * If received by a harness, this represents the consumer within that
       * harness that should consume these timers. If sent by a harness, this
       * represents the producer of these timers.
       * </pre>
       *
       * <code>string transform_id = 2;</code>
       * @return The bytes for transformId.
       */
      com.google.protobuf.ByteString
          getTransformIdBytes();

      /**
       * <pre>
       * (Required) The local timer family name used to identify the associated
       * timer family specification
       * </pre>
       *
       * <code>string timer_family_id = 3;</code>
       * @return The timerFamilyId.
       */
      java.lang.String getTimerFamilyId();
      /**
       * <pre>
       * (Required) The local timer family name used to identify the associated
       * timer family specification
       * </pre>
       *
       * <code>string timer_family_id = 3;</code>
       * @return The bytes for timerFamilyId.
       */
      com.google.protobuf.ByteString
          getTimerFamilyIdBytes();

      /**
       * <pre>
       * (Optional) Represents a logical byte stream of timers. Encoded according
       * to the coder in the timer spec.
       * </pre>
       *
       * <code>bytes timers = 4;</code>
       * @return The timers.
       */
      com.google.protobuf.ByteString getTimers();

      /**
       * <pre>
       * (Optional) Set this bit to indicate the this is the last data block
       * for the given instruction and transform, ending the stream.
       * </pre>
       *
       * <code>bool is_last = 5;</code>
       * @return The isLast.
       */
      boolean getIsLast();
    }
    /**
     * <pre>
     * Represent the encoded user timer for a given instruction, transform and
     * timer id.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.Elements.Timers}
     */
    public static final class Timers extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.Elements.Timers)
        TimersOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Timers.newBuilder() to construct.
      private Timers(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Timers() {
        instructionId_ = "";
        transformId_ = "";
        timerFamilyId_ = "";
        timers_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Timers();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Timers(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                instructionId_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                transformId_ = s;
                break;
              }
              case 26: {
                java.lang.String s = input.readStringRequireUtf8();

                timerFamilyId_ = s;
                break;
              }
              case 34: {

                timers_ = input.readBytes();
                break;
              }
              case 40: {

                isLast_ = input.readBool();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder.class);
      }

      public static final int INSTRUCTION_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object instructionId_;
      /**
       * <pre>
       * (Required) A reference to an active instruction request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The instructionId.
       */
      @java.lang.Override
      public java.lang.String getInstructionId() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instructionId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) A reference to an active instruction request with the given
       * instruction id.
       * </pre>
       *
       * <code>string instruction_id = 1;</code>
       * @return The bytes for instructionId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getInstructionIdBytes() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instructionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TRANSFORM_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object transformId_;
      /**
       * <pre>
       * (Required) A definition representing a consumer or producer of this data.
       * If received by a harness, this represents the consumer within that
       * harness that should consume these timers. If sent by a harness, this
       * represents the producer of these timers.
       * </pre>
       *
       * <code>string transform_id = 2;</code>
       * @return The transformId.
       */
      @java.lang.Override
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) A definition representing a consumer or producer of this data.
       * If received by a harness, this represents the consumer within that
       * harness that should consume these timers. If sent by a harness, this
       * represents the producer of these timers.
       * </pre>
       *
       * <code>string transform_id = 2;</code>
       * @return The bytes for transformId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TIMER_FAMILY_ID_FIELD_NUMBER = 3;
      private volatile java.lang.Object timerFamilyId_;
      /**
       * <pre>
       * (Required) The local timer family name used to identify the associated
       * timer family specification
       * </pre>
       *
       * <code>string timer_family_id = 3;</code>
       * @return The timerFamilyId.
       */
      @java.lang.Override
      public java.lang.String getTimerFamilyId() {
        java.lang.Object ref = timerFamilyId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          timerFamilyId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The local timer family name used to identify the associated
       * timer family specification
       * </pre>
       *
       * <code>string timer_family_id = 3;</code>
       * @return The bytes for timerFamilyId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTimerFamilyIdBytes() {
        java.lang.Object ref = timerFamilyId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          timerFamilyId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TIMERS_FIELD_NUMBER = 4;
      private com.google.protobuf.ByteString timers_;
      /**
       * <pre>
       * (Optional) Represents a logical byte stream of timers. Encoded according
       * to the coder in the timer spec.
       * </pre>
       *
       * <code>bytes timers = 4;</code>
       * @return The timers.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getTimers() {
        return timers_;
      }

      public static final int IS_LAST_FIELD_NUMBER = 5;
      private boolean isLast_;
      /**
       * <pre>
       * (Optional) Set this bit to indicate the this is the last data block
       * for the given instruction and transform, ending the stream.
       * </pre>
       *
       * <code>bool is_last = 5;</code>
       * @return The isLast.
       */
      @java.lang.Override
      public boolean getIsLast() {
        return isLast_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instructionId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timerFamilyId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, timerFamilyId_);
        }
        if (!timers_.isEmpty()) {
          output.writeBytes(4, timers_);
        }
        if (isLast_ != false) {
          output.writeBool(5, isLast_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instructionId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(timerFamilyId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, timerFamilyId_);
        }
        if (!timers_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, timers_);
        }
        if (isLast_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(5, isLast_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers) obj;

        if (!getInstructionId()
            .equals(other.getInstructionId())) return false;
        if (!getTransformId()
            .equals(other.getTransformId())) return false;
        if (!getTimerFamilyId()
            .equals(other.getTimerFamilyId())) return false;
        if (!getTimers()
            .equals(other.getTimers())) return false;
        if (getIsLast()
            != other.getIsLast()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getInstructionId().hashCode();
        hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransformId().hashCode();
        hash = (37 * hash) + TIMER_FAMILY_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTimerFamilyId().hashCode();
        hash = (37 * hash) + TIMERS_FIELD_NUMBER;
        hash = (53 * hash) + getTimers().hashCode();
        hash = (37 * hash) + IS_LAST_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsLast());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represent the encoded user timer for a given instruction, transform and
       * timer id.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.Elements.Timers}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.Elements.Timers)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          instructionId_ = "";

          transformId_ = "";

          timerFamilyId_ = "";

          timers_ = com.google.protobuf.ByteString.EMPTY;

          isLast_ = false;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers(this);
          result.instructionId_ = instructionId_;
          result.transformId_ = transformId_;
          result.timerFamilyId_ = timerFamilyId_;
          result.timers_ = timers_;
          result.isLast_ = isLast_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.getDefaultInstance()) return this;
          if (!other.getInstructionId().isEmpty()) {
            instructionId_ = other.instructionId_;
            onChanged();
          }
          if (!other.getTransformId().isEmpty()) {
            transformId_ = other.transformId_;
            onChanged();
          }
          if (!other.getTimerFamilyId().isEmpty()) {
            timerFamilyId_ = other.timerFamilyId_;
            onChanged();
          }
          if (other.getTimers() != com.google.protobuf.ByteString.EMPTY) {
            setTimers(other.getTimers());
          }
          if (other.getIsLast() != false) {
            setIsLast(other.getIsLast());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object instructionId_ = "";
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @return The instructionId.
         */
        public java.lang.String getInstructionId() {
          java.lang.Object ref = instructionId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            instructionId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @return The bytes for instructionId.
         */
        public com.google.protobuf.ByteString
            getInstructionIdBytes() {
          java.lang.Object ref = instructionId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            instructionId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @param value The instructionId to set.
         * @return This builder for chaining.
         */
        public Builder setInstructionId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          instructionId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearInstructionId() {
          
          instructionId_ = getDefaultInstance().getInstructionId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) A reference to an active instruction request with the given
         * instruction id.
         * </pre>
         *
         * <code>string instruction_id = 1;</code>
         * @param value The bytes for instructionId to set.
         * @return This builder for chaining.
         */
        public Builder setInstructionIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          instructionId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object transformId_ = "";
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these timers. If sent by a harness, this
         * represents the producer of these timers.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @return The transformId.
         */
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these timers. If sent by a harness, this
         * represents the producer of these timers.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @return The bytes for transformId.
         */
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these timers. If sent by a harness, this
         * represents the producer of these timers.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @param value The transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          transformId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these timers. If sent by a harness, this
         * represents the producer of these timers.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransformId() {
          
          transformId_ = getDefaultInstance().getTransformId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) A definition representing a consumer or producer of this data.
         * If received by a harness, this represents the consumer within that
         * harness that should consume these timers. If sent by a harness, this
         * represents the producer of these timers.
         * </pre>
         *
         * <code>string transform_id = 2;</code>
         * @param value The bytes for transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          transformId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object timerFamilyId_ = "";
        /**
         * <pre>
         * (Required) The local timer family name used to identify the associated
         * timer family specification
         * </pre>
         *
         * <code>string timer_family_id = 3;</code>
         * @return The timerFamilyId.
         */
        public java.lang.String getTimerFamilyId() {
          java.lang.Object ref = timerFamilyId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            timerFamilyId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The local timer family name used to identify the associated
         * timer family specification
         * </pre>
         *
         * <code>string timer_family_id = 3;</code>
         * @return The bytes for timerFamilyId.
         */
        public com.google.protobuf.ByteString
            getTimerFamilyIdBytes() {
          java.lang.Object ref = timerFamilyId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            timerFamilyId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The local timer family name used to identify the associated
         * timer family specification
         * </pre>
         *
         * <code>string timer_family_id = 3;</code>
         * @param value The timerFamilyId to set.
         * @return This builder for chaining.
         */
        public Builder setTimerFamilyId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          timerFamilyId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The local timer family name used to identify the associated
         * timer family specification
         * </pre>
         *
         * <code>string timer_family_id = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimerFamilyId() {
          
          timerFamilyId_ = getDefaultInstance().getTimerFamilyId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The local timer family name used to identify the associated
         * timer family specification
         * </pre>
         *
         * <code>string timer_family_id = 3;</code>
         * @param value The bytes for timerFamilyId to set.
         * @return This builder for chaining.
         */
        public Builder setTimerFamilyIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          timerFamilyId_ = value;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString timers_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Optional) Represents a logical byte stream of timers. Encoded according
         * to the coder in the timer spec.
         * </pre>
         *
         * <code>bytes timers = 4;</code>
         * @return The timers.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getTimers() {
          return timers_;
        }
        /**
         * <pre>
         * (Optional) Represents a logical byte stream of timers. Encoded according
         * to the coder in the timer spec.
         * </pre>
         *
         * <code>bytes timers = 4;</code>
         * @param value The timers to set.
         * @return This builder for chaining.
         */
        public Builder setTimers(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          timers_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Optional) Represents a logical byte stream of timers. Encoded according
         * to the coder in the timer spec.
         * </pre>
         *
         * <code>bytes timers = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimers() {
          
          timers_ = getDefaultInstance().getTimers();
          onChanged();
          return this;
        }

        private boolean isLast_ ;
        /**
         * <pre>
         * (Optional) Set this bit to indicate the this is the last data block
         * for the given instruction and transform, ending the stream.
         * </pre>
         *
         * <code>bool is_last = 5;</code>
         * @return The isLast.
         */
        @java.lang.Override
        public boolean getIsLast() {
          return isLast_;
        }
        /**
         * <pre>
         * (Optional) Set this bit to indicate the this is the last data block
         * for the given instruction and transform, ending the stream.
         * </pre>
         *
         * <code>bool is_last = 5;</code>
         * @param value The isLast to set.
         * @return This builder for chaining.
         */
        public Builder setIsLast(boolean value) {
          
          isLast_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Optional) Set this bit to indicate the this is the last data block
         * for the given instruction and transform, ending the stream.
         * </pre>
         *
         * <code>bool is_last = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearIsLast() {
          
          isLast_ = false;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.Elements.Timers)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.Elements.Timers)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Timers>
          PARSER = new com.google.protobuf.AbstractParser<Timers>() {
        @java.lang.Override
        public Timers parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Timers(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Timers> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Timers> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int DATA_FIELD_NUMBER = 1;
    private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data> data_;
    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data> getDataList() {
      return data_;
    }
    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    @java.lang.Override
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data getData(int index) {
      return data_.get(index);
    }
    /**
     * <pre>
     * (Optional) A list containing parts of logical byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    public static final int TIMERS_FIELD_NUMBER = 2;
    private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers> timers_;
    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers> getTimersList() {
      return timers_;
    }
    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder> 
        getTimersOrBuilderList() {
      return timers_;
    }
    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    @java.lang.Override
    public int getTimersCount() {
      return timers_.size();
    }
    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers getTimers(int index) {
      return timers_.get(index);
    }
    /**
     * <pre>
     * (Optional)  A list of timer byte streams.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder getTimersOrBuilder(
        int index) {
      return timers_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(1, data_.get(i));
      }
      for (int i = 0; i < timers_.size(); i++) {
        output.writeMessage(2, timers_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, data_.get(i));
      }
      for (int i = 0; i < timers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, timers_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements) obj;

      if (!getDataList()
          .equals(other.getDataList())) return false;
      if (!getTimersList()
          .equals(other.getTimersList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDataCount() > 0) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getDataList().hashCode();
      }
      if (getTimersCount() > 0) {
        hash = (37 * hash) + TIMERS_FIELD_NUMBER;
        hash = (53 * hash) + getTimersList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Messages used to represent logical byte streams.
     * Stable
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.Elements}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.Elements)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.ElementsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataFieldBuilder();
          getTimersFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dataBuilder_.clear();
        }
        if (timersBuilder_ == null) {
          timers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          timersBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_Elements_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements(this);
        int from_bitField0_ = bitField0_;
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            data_ = java.util.Collections.unmodifiableList(data_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
        if (timersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            timers_ = java.util.Collections.unmodifiableList(timers_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.timers_ = timers_;
        } else {
          result.timers_ = timersBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.getDefaultInstance()) return this;
        if (dataBuilder_ == null) {
          if (!other.data_.isEmpty()) {
            if (data_.isEmpty()) {
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataIsMutable();
              data_.addAll(other.data_);
            }
            onChanged();
          }
        } else {
          if (!other.data_.isEmpty()) {
            if (dataBuilder_.isEmpty()) {
              dataBuilder_.dispose();
              dataBuilder_ = null;
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataFieldBuilder() : null;
            } else {
              dataBuilder_.addAllMessages(other.data_);
            }
          }
        }
        if (timersBuilder_ == null) {
          if (!other.timers_.isEmpty()) {
            if (timers_.isEmpty()) {
              timers_ = other.timers_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTimersIsMutable();
              timers_.addAll(other.timers_);
            }
            onChanged();
          }
        } else {
          if (!other.timers_.isEmpty()) {
            if (timersBuilder_.isEmpty()) {
              timersBuilder_.dispose();
              timersBuilder_ = null;
              timers_ = other.timers_;
              bitField0_ = (bitField0_ & ~0x00000002);
              timersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimersFieldBuilder() : null;
            } else {
              timersBuilder_.addAllMessages(other.timers_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          data_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data>(data_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder> dataBuilder_;

      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data> getDataList() {
        if (dataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(data_);
        } else {
          return dataBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public int getDataCount() {
        if (dataBuilder_ == null) {
          return data_.size();
        } else {
          return dataBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data getData(int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);
        } else {
          return dataBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public Builder setData(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.set(index, value);
          onChanged();
        } else {
          dataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public Builder setData(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public Builder addData(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(value);
          onChanged();
        } else {
          dataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public Builder addData(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(index, value);
          onChanged();
        } else {
          dataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public Builder addData(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public Builder addData(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data> values) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, data_);
          onChanged();
        } else {
          dataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public Builder removeData(int index) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.remove(index);
          onChanged();
        } else {
          dataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder getDataBuilder(
          int index) {
        return getDataFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder getDataOrBuilder(
          int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);  } else {
          return dataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder> 
           getDataOrBuilderList() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(data_);
        }
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder addDataBuilder() {
        return getDataFieldBuilder().addBuilder(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder addDataBuilder(
          int index) {
        return getDataFieldBuilder().addBuilder(
            index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) A list containing parts of logical byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Data data = 1;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder> 
           getDataBuilderList() {
        return getDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Data.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.DataOrBuilder>(
                  data_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers> timers_ =
        java.util.Collections.emptyList();
      private void ensureTimersIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          timers_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers>(timers_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder> timersBuilder_;

      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers> getTimersList() {
        if (timersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timers_);
        } else {
          return timersBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public int getTimersCount() {
        if (timersBuilder_ == null) {
          return timers_.size();
        } else {
          return timersBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers getTimers(int index) {
        if (timersBuilder_ == null) {
          return timers_.get(index);
        } else {
          return timersBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public Builder setTimers(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimersIsMutable();
          timers_.set(index, value);
          onChanged();
        } else {
          timersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public Builder setTimers(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder builderForValue) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.set(index, builderForValue.build());
          onChanged();
        } else {
          timersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public Builder addTimers(org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimersIsMutable();
          timers_.add(value);
          onChanged();
        } else {
          timersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public Builder addTimers(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimersIsMutable();
          timers_.add(index, value);
          onChanged();
        } else {
          timersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public Builder addTimers(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder builderForValue) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.add(builderForValue.build());
          onChanged();
        } else {
          timersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public Builder addTimers(
          int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder builderForValue) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.add(index, builderForValue.build());
          onChanged();
        } else {
          timersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public Builder addAllTimers(
          java.lang.Iterable<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers> values) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timers_);
          onChanged();
        } else {
          timersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public Builder clearTimers() {
        if (timersBuilder_ == null) {
          timers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          timersBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public Builder removeTimers(int index) {
        if (timersBuilder_ == null) {
          ensureTimersIsMutable();
          timers_.remove(index);
          onChanged();
        } else {
          timersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder getTimersBuilder(
          int index) {
        return getTimersFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder getTimersOrBuilder(
          int index) {
        if (timersBuilder_ == null) {
          return timers_.get(index);  } else {
          return timersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder> 
           getTimersOrBuilderList() {
        if (timersBuilder_ != null) {
          return timersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timers_);
        }
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder addTimersBuilder() {
        return getTimersFieldBuilder().addBuilder(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder addTimersBuilder(
          int index) {
        return getTimersFieldBuilder().addBuilder(
            index, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional)  A list of timer byte streams.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.Elements.Timers timers = 2;</code>
       */
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder> 
           getTimersBuilderList() {
        return getTimersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder> 
          getTimersFieldBuilder() {
        if (timersBuilder_ == null) {
          timersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.Timers.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements.TimersOrBuilder>(
                  timers_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          timers_ = null;
        }
        return timersBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.Elements)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.Elements)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Elements>
        PARSER = new com.google.protobuf.AbstractParser<Elements>() {
      @java.lang.Override
      public Elements parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Elements(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Elements> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Elements> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.Elements getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A unique identifier provided by the SDK which represents this
     * requests execution. The StateResponse corresponding with this request
     * will have the matching id.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * (Required) A unique identifier provided by the SDK which represents this
     * requests execution. The StateResponse corresponding with this request
     * will have the matching id.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * (Required) The associated instruction id of the work that is currently
     * being processed. This allows for the runner to associate any modifications
     * to state to be committed with the appropriate work execution.
     * </pre>
     *
     * <code>string instruction_id = 2;</code>
     * @return The instructionId.
     */
    java.lang.String getInstructionId();
    /**
     * <pre>
     * (Required) The associated instruction id of the work that is currently
     * being processed. This allows for the runner to associate any modifications
     * to state to be committed with the appropriate work execution.
     * </pre>
     *
     * <code>string instruction_id = 2;</code>
     * @return The bytes for instructionId.
     */
    com.google.protobuf.ByteString
        getInstructionIdBytes();

    /**
     * <pre>
     * (Required) The state key this request is for.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
     * @return Whether the stateKey field is set.
     */
    boolean hasStateKey();
    /**
     * <pre>
     * (Required) The state key this request is for.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
     * @return The stateKey.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey getStateKey();
    /**
     * <pre>
     * (Required) The state key this request is for.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKeyOrBuilder getStateKeyOrBuilder();

    /**
     * <pre>
     * A request to get state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
     * @return Whether the get field is set.
     */
    boolean hasGet();
    /**
     * <pre>
     * A request to get state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
     * @return The get.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest getGet();
    /**
     * <pre>
     * A request to get state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequestOrBuilder getGetOrBuilder();

    /**
     * <pre>
     * A request to append to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
     * @return Whether the append field is set.
     */
    boolean hasAppend();
    /**
     * <pre>
     * A request to append to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
     * @return The append.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest getAppend();
    /**
     * <pre>
     * A request to append to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequestOrBuilder getAppendOrBuilder();

    /**
     * <pre>
     * A request to clear state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
     * @return Whether the clear field is set.
     */
    boolean hasClear();
    /**
     * <pre>
     * A request to clear state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
     * @return The clear.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest getClear();
    /**
     * <pre>
     * A request to clear state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequestOrBuilder getClearOrBuilder();

    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest.RequestCase getRequestCase();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateRequest}
   */
  public static final class StateRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateRequest)
      StateRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateRequest.newBuilder() to construct.
    private StateRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateRequest() {
      id_ = "";
      instructionId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StateRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              instructionId_ = s;
              break;
            }
            case 26: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Builder subBuilder = null;
              if (stateKey_ != null) {
                subBuilder = stateKey_.toBuilder();
              }
              stateKey_ = input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stateKey_);
                stateKey_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8002: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.Builder subBuilder = null;
              if (requestCase_ == 1000) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1000;
              break;
            }
            case 8010: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.Builder subBuilder = null;
              if (requestCase_ == 1001) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1001;
              break;
            }
            case 8018: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.Builder subBuilder = null;
              if (requestCase_ == 1002) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_).toBuilder();
              }
              request_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_);
                request_ = subBuilder.buildPartial();
              }
              requestCase_ = 1002;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest.Builder.class);
    }

    private int requestCase_ = 0;
    private java.lang.Object request_;
    public enum RequestCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      GET(1000),
      APPEND(1001),
      CLEAR(1002),
      REQUEST_NOT_SET(0);
      private final int value;
      private RequestCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RequestCase valueOf(int value) {
        return forNumber(value);
      }

      public static RequestCase forNumber(int value) {
        switch (value) {
          case 1000: return GET;
          case 1001: return APPEND;
          case 1002: return CLEAR;
          case 0: return REQUEST_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RequestCase
    getRequestCase() {
      return RequestCase.forNumber(
          requestCase_);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * (Required) A unique identifier provided by the SDK which represents this
     * requests execution. The StateResponse corresponding with this request
     * will have the matching id.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A unique identifier provided by the SDK which represents this
     * requests execution. The StateResponse corresponding with this request
     * will have the matching id.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INSTRUCTION_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object instructionId_;
    /**
     * <pre>
     * (Required) The associated instruction id of the work that is currently
     * being processed. This allows for the runner to associate any modifications
     * to state to be committed with the appropriate work execution.
     * </pre>
     *
     * <code>string instruction_id = 2;</code>
     * @return The instructionId.
     */
    @java.lang.Override
    public java.lang.String getInstructionId() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instructionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) The associated instruction id of the work that is currently
     * being processed. This allows for the runner to associate any modifications
     * to state to be committed with the appropriate work execution.
     * </pre>
     *
     * <code>string instruction_id = 2;</code>
     * @return The bytes for instructionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInstructionIdBytes() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instructionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATE_KEY_FIELD_NUMBER = 3;
    private org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey stateKey_;
    /**
     * <pre>
     * (Required) The state key this request is for.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
     * @return Whether the stateKey field is set.
     */
    @java.lang.Override
    public boolean hasStateKey() {
      return stateKey_ != null;
    }
    /**
     * <pre>
     * (Required) The state key this request is for.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
     * @return The stateKey.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey getStateKey() {
      return stateKey_ == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.getDefaultInstance() : stateKey_;
    }
    /**
     * <pre>
     * (Required) The state key this request is for.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKeyOrBuilder getStateKeyOrBuilder() {
      return getStateKey();
    }

    public static final int GET_FIELD_NUMBER = 1000;
    /**
     * <pre>
     * A request to get state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
     * @return Whether the get field is set.
     */
    @java.lang.Override
    public boolean hasGet() {
      return requestCase_ == 1000;
    }
    /**
     * <pre>
     * A request to get state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
     * @return The get.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest getGet() {
      if (requestCase_ == 1000) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.getDefaultInstance();
    }
    /**
     * <pre>
     * A request to get state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequestOrBuilder getGetOrBuilder() {
      if (requestCase_ == 1000) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.getDefaultInstance();
    }

    public static final int APPEND_FIELD_NUMBER = 1001;
    /**
     * <pre>
     * A request to append to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
     * @return Whether the append field is set.
     */
    @java.lang.Override
    public boolean hasAppend() {
      return requestCase_ == 1001;
    }
    /**
     * <pre>
     * A request to append to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
     * @return The append.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest getAppend() {
      if (requestCase_ == 1001) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.getDefaultInstance();
    }
    /**
     * <pre>
     * A request to append to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequestOrBuilder getAppendOrBuilder() {
      if (requestCase_ == 1001) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.getDefaultInstance();
    }

    public static final int CLEAR_FIELD_NUMBER = 1002;
    /**
     * <pre>
     * A request to clear state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
     * @return Whether the clear field is set.
     */
    @java.lang.Override
    public boolean hasClear() {
      return requestCase_ == 1002;
    }
    /**
     * <pre>
     * A request to clear state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
     * @return The clear.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest getClear() {
      if (requestCase_ == 1002) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.getDefaultInstance();
    }
    /**
     * <pre>
     * A request to clear state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequestOrBuilder getClearOrBuilder() {
      if (requestCase_ == 1002) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, instructionId_);
      }
      if (stateKey_ != null) {
        output.writeMessage(3, getStateKey());
      }
      if (requestCase_ == 1000) {
        output.writeMessage(1000, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_);
      }
      if (requestCase_ == 1001) {
        output.writeMessage(1001, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_);
      }
      if (requestCase_ == 1002) {
        output.writeMessage(1002, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, instructionId_);
      }
      if (stateKey_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getStateKey());
      }
      if (requestCase_ == 1000) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1000, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_);
      }
      if (requestCase_ == 1001) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1001, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_);
      }
      if (requestCase_ == 1002) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1002, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest) obj;

      if (!getId()
          .equals(other.getId())) return false;
      if (!getInstructionId()
          .equals(other.getInstructionId())) return false;
      if (hasStateKey() != other.hasStateKey()) return false;
      if (hasStateKey()) {
        if (!getStateKey()
            .equals(other.getStateKey())) return false;
      }
      if (!getRequestCase().equals(other.getRequestCase())) return false;
      switch (requestCase_) {
        case 1000:
          if (!getGet()
              .equals(other.getGet())) return false;
          break;
        case 1001:
          if (!getAppend()
              .equals(other.getAppend())) return false;
          break;
        case 1002:
          if (!getClear()
              .equals(other.getClear())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInstructionId().hashCode();
      if (hasStateKey()) {
        hash = (37 * hash) + STATE_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getStateKey().hashCode();
      }
      switch (requestCase_) {
        case 1000:
          hash = (37 * hash) + GET_FIELD_NUMBER;
          hash = (53 * hash) + getGet().hashCode();
          break;
        case 1001:
          hash = (37 * hash) + APPEND_FIELD_NUMBER;
          hash = (53 * hash) + getAppend().hashCode();
          break;
        case 1002:
          hash = (37 * hash) + CLEAR_FIELD_NUMBER;
          hash = (53 * hash) + getClear().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = "";

        instructionId_ = "";

        if (stateKeyBuilder_ == null) {
          stateKey_ = null;
        } else {
          stateKey_ = null;
          stateKeyBuilder_ = null;
        }
        requestCase_ = 0;
        request_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest(this);
        result.id_ = id_;
        result.instructionId_ = instructionId_;
        if (stateKeyBuilder_ == null) {
          result.stateKey_ = stateKey_;
        } else {
          result.stateKey_ = stateKeyBuilder_.build();
        }
        if (requestCase_ == 1000) {
          if (getBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = getBuilder_.build();
          }
        }
        if (requestCase_ == 1001) {
          if (appendBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = appendBuilder_.build();
          }
        }
        if (requestCase_ == 1002) {
          if (clearBuilder_ == null) {
            result.request_ = request_;
          } else {
            result.request_ = clearBuilder_.build();
          }
        }
        result.requestCase_ = requestCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest.getDefaultInstance()) return this;
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        if (!other.getInstructionId().isEmpty()) {
          instructionId_ = other.instructionId_;
          onChanged();
        }
        if (other.hasStateKey()) {
          mergeStateKey(other.getStateKey());
        }
        switch (other.getRequestCase()) {
          case GET: {
            mergeGet(other.getGet());
            break;
          }
          case APPEND: {
            mergeAppend(other.getAppend());
            break;
          }
          case CLEAR: {
            mergeClear(other.getClear());
            break;
          }
          case REQUEST_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int requestCase_ = 0;
      private java.lang.Object request_;
      public RequestCase
          getRequestCase() {
        return RequestCase.forNumber(
            requestCase_);
      }

      public Builder clearRequest() {
        requestCase_ = 0;
        request_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object id_ = "";
      /**
       * <pre>
       * (Required) A unique identifier provided by the SDK which represents this
       * requests execution. The StateResponse corresponding with this request
       * will have the matching id.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A unique identifier provided by the SDK which represents this
       * requests execution. The StateResponse corresponding with this request
       * will have the matching id.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A unique identifier provided by the SDK which represents this
       * requests execution. The StateResponse corresponding with this request
       * will have the matching id.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A unique identifier provided by the SDK which represents this
       * requests execution. The StateResponse corresponding with this request
       * will have the matching id.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A unique identifier provided by the SDK which represents this
       * requests execution. The StateResponse corresponding with this request
       * will have the matching id.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object instructionId_ = "";
      /**
       * <pre>
       * (Required) The associated instruction id of the work that is currently
       * being processed. This allows for the runner to associate any modifications
       * to state to be committed with the appropriate work execution.
       * </pre>
       *
       * <code>string instruction_id = 2;</code>
       * @return The instructionId.
       */
      public java.lang.String getInstructionId() {
        java.lang.Object ref = instructionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instructionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) The associated instruction id of the work that is currently
       * being processed. This allows for the runner to associate any modifications
       * to state to be committed with the appropriate work execution.
       * </pre>
       *
       * <code>string instruction_id = 2;</code>
       * @return The bytes for instructionId.
       */
      public com.google.protobuf.ByteString
          getInstructionIdBytes() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instructionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) The associated instruction id of the work that is currently
       * being processed. This allows for the runner to associate any modifications
       * to state to be committed with the appropriate work execution.
       * </pre>
       *
       * <code>string instruction_id = 2;</code>
       * @param value The instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instructionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The associated instruction id of the work that is currently
       * being processed. This allows for the runner to associate any modifications
       * to state to be committed with the appropriate work execution.
       * </pre>
       *
       * <code>string instruction_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearInstructionId() {
        
        instructionId_ = getDefaultInstance().getInstructionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The associated instruction id of the work that is currently
       * being processed. This allows for the runner to associate any modifications
       * to state to be committed with the appropriate work execution.
       * </pre>
       *
       * <code>string instruction_id = 2;</code>
       * @param value The bytes for instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instructionId_ = value;
        onChanged();
        return this;
      }

      private org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey stateKey_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKeyOrBuilder> stateKeyBuilder_;
      /**
       * <pre>
       * (Required) The state key this request is for.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
       * @return Whether the stateKey field is set.
       */
      public boolean hasStateKey() {
        return stateKeyBuilder_ != null || stateKey_ != null;
      }
      /**
       * <pre>
       * (Required) The state key this request is for.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
       * @return The stateKey.
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey getStateKey() {
        if (stateKeyBuilder_ == null) {
          return stateKey_ == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.getDefaultInstance() : stateKey_;
        } else {
          return stateKeyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The state key this request is for.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
       */
      public Builder setStateKey(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey value) {
        if (stateKeyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stateKey_ = value;
          onChanged();
        } else {
          stateKeyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The state key this request is for.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
       */
      public Builder setStateKey(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Builder builderForValue) {
        if (stateKeyBuilder_ == null) {
          stateKey_ = builderForValue.build();
          onChanged();
        } else {
          stateKeyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The state key this request is for.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
       */
      public Builder mergeStateKey(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey value) {
        if (stateKeyBuilder_ == null) {
          if (stateKey_ != null) {
            stateKey_ =
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.newBuilder(stateKey_).mergeFrom(value).buildPartial();
          } else {
            stateKey_ = value;
          }
          onChanged();
        } else {
          stateKeyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The state key this request is for.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
       */
      public Builder clearStateKey() {
        if (stateKeyBuilder_ == null) {
          stateKey_ = null;
          onChanged();
        } else {
          stateKey_ = null;
          stateKeyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The state key this request is for.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Builder getStateKeyBuilder() {
        
        onChanged();
        return getStateKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The state key this request is for.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKeyOrBuilder getStateKeyOrBuilder() {
        if (stateKeyBuilder_ != null) {
          return stateKeyBuilder_.getMessageOrBuilder();
        } else {
          return stateKey_ == null ?
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.getDefaultInstance() : stateKey_;
        }
      }
      /**
       * <pre>
       * (Required) The state key this request is for.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey state_key = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKeyOrBuilder> 
          getStateKeyFieldBuilder() {
        if (stateKeyBuilder_ == null) {
          stateKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKeyOrBuilder>(
                  getStateKey(),
                  getParentForChildren(),
                  isClean());
          stateKey_ = null;
        }
        return stateKeyBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequestOrBuilder> getBuilder_;
      /**
       * <pre>
       * A request to get state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
       * @return Whether the get field is set.
       */
      @java.lang.Override
      public boolean hasGet() {
        return requestCase_ == 1000;
      }
      /**
       * <pre>
       * A request to get state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
       * @return The get.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest getGet() {
        if (getBuilder_ == null) {
          if (requestCase_ == 1000) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1000) {
            return getBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A request to get state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
       */
      public Builder setGet(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest value) {
        if (getBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          getBuilder_.setMessage(value);
        }
        requestCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * A request to get state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
       */
      public Builder setGet(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.Builder builderForValue) {
        if (getBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          getBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * A request to get state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
       */
      public Builder mergeGet(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest value) {
        if (getBuilder_ == null) {
          if (requestCase_ == 1000 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1000) {
            getBuilder_.mergeFrom(value);
          } else {
            getBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * A request to get state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
       */
      public Builder clearGet() {
        if (getBuilder_ == null) {
          if (requestCase_ == 1000) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1000) {
            requestCase_ = 0;
            request_ = null;
          }
          getBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A request to get state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.Builder getGetBuilder() {
        return getGetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A request to get state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequestOrBuilder getGetOrBuilder() {
        if ((requestCase_ == 1000) && (getBuilder_ != null)) {
          return getBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1000) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A request to get state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetRequest get = 1000;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequestOrBuilder> 
          getGetFieldBuilder() {
        if (getBuilder_ == null) {
          if (!(requestCase_ == 1000)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.getDefaultInstance();
          }
          getBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1000;
        onChanged();;
        return getBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequestOrBuilder> appendBuilder_;
      /**
       * <pre>
       * A request to append to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
       * @return Whether the append field is set.
       */
      @java.lang.Override
      public boolean hasAppend() {
        return requestCase_ == 1001;
      }
      /**
       * <pre>
       * A request to append to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
       * @return The append.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest getAppend() {
        if (appendBuilder_ == null) {
          if (requestCase_ == 1001) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1001) {
            return appendBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A request to append to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
       */
      public Builder setAppend(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest value) {
        if (appendBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          appendBuilder_.setMessage(value);
        }
        requestCase_ = 1001;
        return this;
      }
      /**
       * <pre>
       * A request to append to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
       */
      public Builder setAppend(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.Builder builderForValue) {
        if (appendBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          appendBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1001;
        return this;
      }
      /**
       * <pre>
       * A request to append to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
       */
      public Builder mergeAppend(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest value) {
        if (appendBuilder_ == null) {
          if (requestCase_ == 1001 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1001) {
            appendBuilder_.mergeFrom(value);
          } else {
            appendBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1001;
        return this;
      }
      /**
       * <pre>
       * A request to append to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
       */
      public Builder clearAppend() {
        if (appendBuilder_ == null) {
          if (requestCase_ == 1001) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1001) {
            requestCase_ = 0;
            request_ = null;
          }
          appendBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A request to append to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.Builder getAppendBuilder() {
        return getAppendFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A request to append to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequestOrBuilder getAppendOrBuilder() {
        if ((requestCase_ == 1001) && (appendBuilder_ != null)) {
          return appendBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1001) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A request to append to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendRequest append = 1001;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequestOrBuilder> 
          getAppendFieldBuilder() {
        if (appendBuilder_ == null) {
          if (!(requestCase_ == 1001)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.getDefaultInstance();
          }
          appendBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1001;
        onChanged();;
        return appendBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequestOrBuilder> clearBuilder_;
      /**
       * <pre>
       * A request to clear state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
       * @return Whether the clear field is set.
       */
      @java.lang.Override
      public boolean hasClear() {
        return requestCase_ == 1002;
      }
      /**
       * <pre>
       * A request to clear state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
       * @return The clear.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest getClear() {
        if (clearBuilder_ == null) {
          if (requestCase_ == 1002) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.getDefaultInstance();
        } else {
          if (requestCase_ == 1002) {
            return clearBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A request to clear state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
       */
      public Builder setClear(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest value) {
        if (clearBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          request_ = value;
          onChanged();
        } else {
          clearBuilder_.setMessage(value);
        }
        requestCase_ = 1002;
        return this;
      }
      /**
       * <pre>
       * A request to clear state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
       */
      public Builder setClear(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.Builder builderForValue) {
        if (clearBuilder_ == null) {
          request_ = builderForValue.build();
          onChanged();
        } else {
          clearBuilder_.setMessage(builderForValue.build());
        }
        requestCase_ = 1002;
        return this;
      }
      /**
       * <pre>
       * A request to clear state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
       */
      public Builder mergeClear(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest value) {
        if (clearBuilder_ == null) {
          if (requestCase_ == 1002 &&
              request_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.getDefaultInstance()) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_)
                .mergeFrom(value).buildPartial();
          } else {
            request_ = value;
          }
          onChanged();
        } else {
          if (requestCase_ == 1002) {
            clearBuilder_.mergeFrom(value);
          } else {
            clearBuilder_.setMessage(value);
          }
        }
        requestCase_ = 1002;
        return this;
      }
      /**
       * <pre>
       * A request to clear state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
       */
      public Builder clearClear() {
        if (clearBuilder_ == null) {
          if (requestCase_ == 1002) {
            requestCase_ = 0;
            request_ = null;
            onChanged();
          }
        } else {
          if (requestCase_ == 1002) {
            requestCase_ = 0;
            request_ = null;
          }
          clearBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A request to clear state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.Builder getClearBuilder() {
        return getClearFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A request to clear state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequestOrBuilder getClearOrBuilder() {
        if ((requestCase_ == 1002) && (clearBuilder_ != null)) {
          return clearBuilder_.getMessageOrBuilder();
        } else {
          if (requestCase_ == 1002) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A request to clear state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearRequest clear = 1002;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequestOrBuilder> 
          getClearFieldBuilder() {
        if (clearBuilder_ == null) {
          if (!(requestCase_ == 1002)) {
            request_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.getDefaultInstance();
          }
          clearBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequestOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) request_,
                  getParentForChildren(),
                  isClean());
          request_ = null;
        }
        requestCase_ = 1002;
        onChanged();;
        return clearBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateRequest>
        PARSER = new com.google.protobuf.AbstractParser<StateRequest>() {
      @java.lang.Override
      public StateRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StateRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StateRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) A reference provided by the SDK which represents a requests
     * execution. The StateResponse must have the matching id when responding
     * to the SDK.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * (Required) A reference provided by the SDK which represents a requests
     * execution. The StateResponse must have the matching id when responding
     * to the SDK.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * (Optional) If this is specified, then the state request has failed.
     * A human readable string representing the reason as to why the request
     * failed.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The error.
     */
    java.lang.String getError();
    /**
     * <pre>
     * (Optional) If this is specified, then the state request has failed.
     * A human readable string representing the reason as to why the request
     * failed.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The bytes for error.
     */
    com.google.protobuf.ByteString
        getErrorBytes();

    /**
     * <pre>
     * A response to getting state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
     * @return Whether the get field is set.
     */
    boolean hasGet();
    /**
     * <pre>
     * A response to getting state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
     * @return The get.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse getGet();
    /**
     * <pre>
     * A response to getting state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponseOrBuilder getGetOrBuilder();

    /**
     * <pre>
     * A response to appending to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
     * @return Whether the append field is set.
     */
    boolean hasAppend();
    /**
     * <pre>
     * A response to appending to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
     * @return The append.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse getAppend();
    /**
     * <pre>
     * A response to appending to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponseOrBuilder getAppendOrBuilder();

    /**
     * <pre>
     * A response to clearing state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
     * @return Whether the clear field is set.
     */
    boolean hasClear();
    /**
     * <pre>
     * A response to clearing state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
     * @return The clear.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse getClear();
    /**
     * <pre>
     * A response to clearing state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponseOrBuilder getClearOrBuilder();

    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse.ResponseCase getResponseCase();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateResponse}
   */
  public static final class StateResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateResponse)
      StateResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateResponse.newBuilder() to construct.
    private StateResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateResponse() {
      id_ = "";
      error_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StateResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
            case 8002: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.Builder subBuilder = null;
              if (responseCase_ == 1000) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1000;
              break;
            }
            case 8010: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.Builder subBuilder = null;
              if (responseCase_ == 1001) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1001;
              break;
            }
            case 8018: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.Builder subBuilder = null;
              if (responseCase_ == 1002) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_).toBuilder();
              }
              response_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_);
                response_ = subBuilder.buildPartial();
              }
              responseCase_ = 1002;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse.Builder.class);
    }

    private int responseCase_ = 0;
    private java.lang.Object response_;
    public enum ResponseCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      GET(1000),
      APPEND(1001),
      CLEAR(1002),
      RESPONSE_NOT_SET(0);
      private final int value;
      private ResponseCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ResponseCase valueOf(int value) {
        return forNumber(value);
      }

      public static ResponseCase forNumber(int value) {
        switch (value) {
          case 1000: return GET;
          case 1001: return APPEND;
          case 1002: return CLEAR;
          case 0: return RESPONSE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ResponseCase
    getResponseCase() {
      return ResponseCase.forNumber(
          responseCase_);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * (Required) A reference provided by the SDK which represents a requests
     * execution. The StateResponse must have the matching id when responding
     * to the SDK.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A reference provided by the SDK which represents a requests
     * execution. The StateResponse must have the matching id when responding
     * to the SDK.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * (Optional) If this is specified, then the state request has failed.
     * A human readable string representing the reason as to why the request
     * failed.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The error.
     */
    @java.lang.Override
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) If this is specified, then the state request has failed.
     * A human readable string representing the reason as to why the request
     * failed.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The bytes for error.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int GET_FIELD_NUMBER = 1000;
    /**
     * <pre>
     * A response to getting state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
     * @return Whether the get field is set.
     */
    @java.lang.Override
    public boolean hasGet() {
      return responseCase_ == 1000;
    }
    /**
     * <pre>
     * A response to getting state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
     * @return The get.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse getGet() {
      if (responseCase_ == 1000) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.getDefaultInstance();
    }
    /**
     * <pre>
     * A response to getting state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponseOrBuilder getGetOrBuilder() {
      if (responseCase_ == 1000) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.getDefaultInstance();
    }

    public static final int APPEND_FIELD_NUMBER = 1001;
    /**
     * <pre>
     * A response to appending to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
     * @return Whether the append field is set.
     */
    @java.lang.Override
    public boolean hasAppend() {
      return responseCase_ == 1001;
    }
    /**
     * <pre>
     * A response to appending to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
     * @return The append.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse getAppend() {
      if (responseCase_ == 1001) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.getDefaultInstance();
    }
    /**
     * <pre>
     * A response to appending to state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponseOrBuilder getAppendOrBuilder() {
      if (responseCase_ == 1001) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.getDefaultInstance();
    }

    public static final int CLEAR_FIELD_NUMBER = 1002;
    /**
     * <pre>
     * A response to clearing state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
     * @return Whether the clear field is set.
     */
    @java.lang.Override
    public boolean hasClear() {
      return responseCase_ == 1002;
    }
    /**
     * <pre>
     * A response to clearing state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
     * @return The clear.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse getClear() {
      if (responseCase_ == 1002) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.getDefaultInstance();
    }
    /**
     * <pre>
     * A response to clearing state.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponseOrBuilder getClearOrBuilder() {
      if (responseCase_ == 1002) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, error_);
      }
      if (responseCase_ == 1000) {
        output.writeMessage(1000, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_);
      }
      if (responseCase_ == 1001) {
        output.writeMessage(1001, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_);
      }
      if (responseCase_ == 1002) {
        output.writeMessage(1002, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, error_);
      }
      if (responseCase_ == 1000) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1000, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_);
      }
      if (responseCase_ == 1001) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1001, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_);
      }
      if (responseCase_ == 1002) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1002, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse) obj;

      if (!getId()
          .equals(other.getId())) return false;
      if (!getError()
          .equals(other.getError())) return false;
      if (!getResponseCase().equals(other.getResponseCase())) return false;
      switch (responseCase_) {
        case 1000:
          if (!getGet()
              .equals(other.getGet())) return false;
          break;
        case 1001:
          if (!getAppend()
              .equals(other.getAppend())) return false;
          break;
        case 1002:
          if (!getClear()
              .equals(other.getClear())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      switch (responseCase_) {
        case 1000:
          hash = (37 * hash) + GET_FIELD_NUMBER;
          hash = (53 * hash) + getGet().hashCode();
          break;
        case 1001:
          hash = (37 * hash) + APPEND_FIELD_NUMBER;
          hash = (53 * hash) + getAppend().hashCode();
          break;
        case 1002:
          hash = (37 * hash) + CLEAR_FIELD_NUMBER;
          hash = (53 * hash) + getClear().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = "";

        error_ = "";

        responseCase_ = 0;
        response_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse(this);
        result.id_ = id_;
        result.error_ = error_;
        if (responseCase_ == 1000) {
          if (getBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = getBuilder_.build();
          }
        }
        if (responseCase_ == 1001) {
          if (appendBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = appendBuilder_.build();
          }
        }
        if (responseCase_ == 1002) {
          if (clearBuilder_ == null) {
            result.response_ = response_;
          } else {
            result.response_ = clearBuilder_.build();
          }
        }
        result.responseCase_ = responseCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse.getDefaultInstance()) return this;
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        switch (other.getResponseCase()) {
          case GET: {
            mergeGet(other.getGet());
            break;
          }
          case APPEND: {
            mergeAppend(other.getAppend());
            break;
          }
          case CLEAR: {
            mergeClear(other.getClear());
            break;
          }
          case RESPONSE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int responseCase_ = 0;
      private java.lang.Object response_;
      public ResponseCase
          getResponseCase() {
        return ResponseCase.forNumber(
            responseCase_);
      }

      public Builder clearResponse() {
        responseCase_ = 0;
        response_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object id_ = "";
      /**
       * <pre>
       * (Required) A reference provided by the SDK which represents a requests
       * execution. The StateResponse must have the matching id when responding
       * to the SDK.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference provided by the SDK which represents a requests
       * execution. The StateResponse must have the matching id when responding
       * to the SDK.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A reference provided by the SDK which represents a requests
       * execution. The StateResponse must have the matching id when responding
       * to the SDK.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference provided by the SDK which represents a requests
       * execution. The StateResponse must have the matching id when responding
       * to the SDK.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A reference provided by the SDK which represents a requests
       * execution. The StateResponse must have the matching id when responding
       * to the SDK.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * (Optional) If this is specified, then the state request has failed.
       * A human readable string representing the reason as to why the request
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return The error.
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) If this is specified, then the state request has failed.
       * A human readable string representing the reason as to why the request
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return The bytes for error.
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) If this is specified, then the state request has failed.
       * A human readable string representing the reason as to why the request
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) If this is specified, then the state request has failed.
       * A human readable string representing the reason as to why the request
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) If this is specified, then the state request has failed.
       * A human readable string representing the reason as to why the request
       * failed.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @param value The bytes for error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponseOrBuilder> getBuilder_;
      /**
       * <pre>
       * A response to getting state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
       * @return Whether the get field is set.
       */
      @java.lang.Override
      public boolean hasGet() {
        return responseCase_ == 1000;
      }
      /**
       * <pre>
       * A response to getting state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
       * @return The get.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse getGet() {
        if (getBuilder_ == null) {
          if (responseCase_ == 1000) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1000) {
            return getBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A response to getting state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
       */
      public Builder setGet(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse value) {
        if (getBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          getBuilder_.setMessage(value);
        }
        responseCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * A response to getting state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
       */
      public Builder setGet(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.Builder builderForValue) {
        if (getBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          getBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * A response to getting state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
       */
      public Builder mergeGet(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse value) {
        if (getBuilder_ == null) {
          if (responseCase_ == 1000 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1000) {
            getBuilder_.mergeFrom(value);
          } else {
            getBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1000;
        return this;
      }
      /**
       * <pre>
       * A response to getting state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
       */
      public Builder clearGet() {
        if (getBuilder_ == null) {
          if (responseCase_ == 1000) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1000) {
            responseCase_ = 0;
            response_ = null;
          }
          getBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A response to getting state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.Builder getGetBuilder() {
        return getGetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A response to getting state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponseOrBuilder getGetOrBuilder() {
        if ((responseCase_ == 1000) && (getBuilder_ != null)) {
          return getBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1000) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A response to getting state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateGetResponse get = 1000;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponseOrBuilder> 
          getGetFieldBuilder() {
        if (getBuilder_ == null) {
          if (!(responseCase_ == 1000)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.getDefaultInstance();
          }
          getBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1000;
        onChanged();;
        return getBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponseOrBuilder> appendBuilder_;
      /**
       * <pre>
       * A response to appending to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
       * @return Whether the append field is set.
       */
      @java.lang.Override
      public boolean hasAppend() {
        return responseCase_ == 1001;
      }
      /**
       * <pre>
       * A response to appending to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
       * @return The append.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse getAppend() {
        if (appendBuilder_ == null) {
          if (responseCase_ == 1001) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1001) {
            return appendBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A response to appending to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
       */
      public Builder setAppend(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse value) {
        if (appendBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          appendBuilder_.setMessage(value);
        }
        responseCase_ = 1001;
        return this;
      }
      /**
       * <pre>
       * A response to appending to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
       */
      public Builder setAppend(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.Builder builderForValue) {
        if (appendBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          appendBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1001;
        return this;
      }
      /**
       * <pre>
       * A response to appending to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
       */
      public Builder mergeAppend(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse value) {
        if (appendBuilder_ == null) {
          if (responseCase_ == 1001 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1001) {
            appendBuilder_.mergeFrom(value);
          } else {
            appendBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1001;
        return this;
      }
      /**
       * <pre>
       * A response to appending to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
       */
      public Builder clearAppend() {
        if (appendBuilder_ == null) {
          if (responseCase_ == 1001) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1001) {
            responseCase_ = 0;
            response_ = null;
          }
          appendBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A response to appending to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.Builder getAppendBuilder() {
        return getAppendFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A response to appending to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponseOrBuilder getAppendOrBuilder() {
        if ((responseCase_ == 1001) && (appendBuilder_ != null)) {
          return appendBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1001) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A response to appending to state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateAppendResponse append = 1001;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponseOrBuilder> 
          getAppendFieldBuilder() {
        if (appendBuilder_ == null) {
          if (!(responseCase_ == 1001)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.getDefaultInstance();
          }
          appendBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1001;
        onChanged();;
        return appendBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponseOrBuilder> clearBuilder_;
      /**
       * <pre>
       * A response to clearing state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
       * @return Whether the clear field is set.
       */
      @java.lang.Override
      public boolean hasClear() {
        return responseCase_ == 1002;
      }
      /**
       * <pre>
       * A response to clearing state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
       * @return The clear.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse getClear() {
        if (clearBuilder_ == null) {
          if (responseCase_ == 1002) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.getDefaultInstance();
        } else {
          if (responseCase_ == 1002) {
            return clearBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A response to clearing state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
       */
      public Builder setClear(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse value) {
        if (clearBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          response_ = value;
          onChanged();
        } else {
          clearBuilder_.setMessage(value);
        }
        responseCase_ = 1002;
        return this;
      }
      /**
       * <pre>
       * A response to clearing state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
       */
      public Builder setClear(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.Builder builderForValue) {
        if (clearBuilder_ == null) {
          response_ = builderForValue.build();
          onChanged();
        } else {
          clearBuilder_.setMessage(builderForValue.build());
        }
        responseCase_ = 1002;
        return this;
      }
      /**
       * <pre>
       * A response to clearing state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
       */
      public Builder mergeClear(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse value) {
        if (clearBuilder_ == null) {
          if (responseCase_ == 1002 &&
              response_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.getDefaultInstance()) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_)
                .mergeFrom(value).buildPartial();
          } else {
            response_ = value;
          }
          onChanged();
        } else {
          if (responseCase_ == 1002) {
            clearBuilder_.mergeFrom(value);
          } else {
            clearBuilder_.setMessage(value);
          }
        }
        responseCase_ = 1002;
        return this;
      }
      /**
       * <pre>
       * A response to clearing state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
       */
      public Builder clearClear() {
        if (clearBuilder_ == null) {
          if (responseCase_ == 1002) {
            responseCase_ = 0;
            response_ = null;
            onChanged();
          }
        } else {
          if (responseCase_ == 1002) {
            responseCase_ = 0;
            response_ = null;
          }
          clearBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A response to clearing state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.Builder getClearBuilder() {
        return getClearFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A response to clearing state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponseOrBuilder getClearOrBuilder() {
        if ((responseCase_ == 1002) && (clearBuilder_ != null)) {
          return clearBuilder_.getMessageOrBuilder();
        } else {
          if (responseCase_ == 1002) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A response to clearing state.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.StateClearResponse clear = 1002;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponseOrBuilder> 
          getClearFieldBuilder() {
        if (clearBuilder_ == null) {
          if (!(responseCase_ == 1002)) {
            response_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.getDefaultInstance();
          }
          clearBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponseOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) response_,
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        responseCase_ = 1002;
        onChanged();;
        return clearBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateResponse>
        PARSER = new com.google.protobuf.AbstractParser<StateResponse>() {
      @java.lang.Override
      public StateResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StateResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StateResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
     * @return Whether the runner field is set.
     */
    boolean hasRunner();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
     * @return The runner.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner getRunner();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.RunnerOrBuilder getRunnerOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
     * @return Whether the multimapSideInput field is set.
     */
    boolean hasMultimapSideInput();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
     * @return The multimapSideInput.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput getMultimapSideInput();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInputOrBuilder getMultimapSideInputOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
     * @return Whether the bagUserState field is set.
     */
    boolean hasBagUserState();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
     * @return The bagUserState.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState getBagUserState();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserStateOrBuilder getBagUserStateOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
     * @return Whether the iterableSideInput field is set.
     */
    boolean hasIterableSideInput();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
     * @return The iterableSideInput.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput getIterableSideInput();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInputOrBuilder getIterableSideInputOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
     * @return Whether the multimapKeysSideInput field is set.
     */
    boolean hasMultimapKeysSideInput();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
     * @return The multimapKeysSideInput.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput getMultimapKeysSideInput();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInputOrBuilder getMultimapKeysSideInputOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
     * @return Whether the multimapKeysUserState field is set.
     */
    boolean hasMultimapKeysUserState();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
     * @return The multimapKeysUserState.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState getMultimapKeysUserState();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserStateOrBuilder getMultimapKeysUserStateOrBuilder();

    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
     * @return Whether the multimapUserState field is set.
     */
    boolean hasMultimapUserState();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
     * @return The multimapUserState.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState getMultimapUserState();
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserStateOrBuilder getMultimapUserStateOrBuilder();

    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.TypeCase getTypeCase();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey}
   */
  public static final class StateKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateKey)
      StateKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateKey.newBuilder() to construct.
    private StateKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateKey() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateKey();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StateKey(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.Builder subBuilder = null;
              if (typeCase_ == 1) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_).toBuilder();
              }
              type_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 1;
              break;
            }
            case 18: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.Builder subBuilder = null;
              if (typeCase_ == 2) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_).toBuilder();
              }
              type_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 2;
              break;
            }
            case 26: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.Builder subBuilder = null;
              if (typeCase_ == 3) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_).toBuilder();
              }
              type_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 3;
              break;
            }
            case 34: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.Builder subBuilder = null;
              if (typeCase_ == 4) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_).toBuilder();
              }
              type_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 4;
              break;
            }
            case 42: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.Builder subBuilder = null;
              if (typeCase_ == 5) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_).toBuilder();
              }
              type_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 5;
              break;
            }
            case 50: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.Builder subBuilder = null;
              if (typeCase_ == 6) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_).toBuilder();
              }
              type_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 6;
              break;
            }
            case 58: {
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.Builder subBuilder = null;
              if (typeCase_ == 7) {
                subBuilder = ((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_).toBuilder();
              }
              type_ =
                  input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 7;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Builder.class);
    }

    public interface RunnerOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateKey.Runner)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) Opaque information supplied by the runner. Used to support
       * remote references.
       * https://s.apache.org/beam-fn-api-send-and-receive-data
       * Used by state backed iterable. And in this use case, request type can
       * only be of type get. Details see:
       * https://s.apache.org/beam-fn-api-state-backed-iterables
       * </pre>
       *
       * <code>bytes key = 1;</code>
       * @return The key.
       */
      com.google.protobuf.ByteString getKey();
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.Runner}
     */
    public static final class Runner extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateKey.Runner)
        RunnerOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Runner.newBuilder() to construct.
      private Runner(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Runner() {
        key_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Runner();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Runner(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {

                key_ = input.readBytes();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.Builder.class);
      }

      public static final int KEY_FIELD_NUMBER = 1;
      private com.google.protobuf.ByteString key_;
      /**
       * <pre>
       * (Required) Opaque information supplied by the runner. Used to support
       * remote references.
       * https://s.apache.org/beam-fn-api-send-and-receive-data
       * Used by state backed iterable. And in this use case, request type can
       * only be of type get. Details see:
       * https://s.apache.org/beam-fn-api-state-backed-iterables
       * </pre>
       *
       * <code>bytes key = 1;</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!key_.isEmpty()) {
          output.writeBytes(1, key_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!key_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, key_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) obj;

        if (!getKey()
            .equals(other.getKey())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.Runner}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateKey.Runner)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.RunnerOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          key_ = com.google.protobuf.ByteString.EMPTY;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner(this);
          result.key_ = key_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.getDefaultInstance()) return this;
          if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
            setKey(other.getKey());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) Opaque information supplied by the runner. Used to support
         * remote references.
         * https://s.apache.org/beam-fn-api-send-and-receive-data
         * Used by state backed iterable. And in this use case, request type can
         * only be of type get. Details see:
         * https://s.apache.org/beam-fn-api-state-backed-iterables
         * </pre>
         *
         * <code>bytes key = 1;</code>
         * @return The key.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getKey() {
          return key_;
        }
        /**
         * <pre>
         * (Required) Opaque information supplied by the runner. Used to support
         * remote references.
         * https://s.apache.org/beam-fn-api-send-and-receive-data
         * Used by state backed iterable. And in this use case, request type can
         * only be of type get. Details see:
         * https://s.apache.org/beam-fn-api-state-backed-iterables
         * </pre>
         *
         * <code>bytes key = 1;</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) Opaque information supplied by the runner. Used to support
         * remote references.
         * https://s.apache.org/beam-fn-api-send-and-receive-data
         * Used by state backed iterable. And in this use case, request type can
         * only be of type get. Details see:
         * https://s.apache.org/beam-fn-api-state-backed-iterables
         * </pre>
         *
         * <code>bytes key = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateKey.Runner)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateKey.Runner)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Runner>
          PARSER = new com.google.protobuf.AbstractParser<Runner>() {
        @java.lang.Override
        public Runner parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Runner(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Runner> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Runner> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface IterableSideInputOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      java.lang.String getTransformId();
      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      com.google.protobuf.ByteString
          getTransformIdBytes();

      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The sideInputId.
       */
      java.lang.String getSideInputId();
      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The bytes for sideInputId.
       */
      com.google.protobuf.ByteString
          getSideInputIdBytes();

      /**
       * <pre>
       * (Required) The window (after mapping the currently executing elements
       * window into the side input windows domain) encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      com.google.protobuf.ByteString getWindow();
    }
    /**
     * <pre>
     * Represents a request for the values associated with a specified window
     * in a PCollection. See
     * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
     * details.
     * Can only be used to perform StateGetRequests on side inputs of the URN
     * beam:side_input:iterable:v1.
     * For a PCollection&lt;V&gt;, the response data stream will be a concatenation
     * of all V's. See https://s.apache.org/beam-fn-api-send-and-receive-data
     * for further details.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput}
     */
    public static final class IterableSideInput extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput)
        IterableSideInputOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use IterableSideInput.newBuilder() to construct.
      private IterableSideInput(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private IterableSideInput() {
        transformId_ = "";
        sideInputId_ = "";
        window_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new IterableSideInput();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private IterableSideInput(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                transformId_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sideInputId_ = s;
                break;
              }
              case 26: {

                window_ = input.readBytes();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.Builder.class);
      }

      public static final int TRANSFORM_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object transformId_;
      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      @java.lang.Override
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SIDE_INPUT_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sideInputId_;
      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The sideInputId.
       */
      @java.lang.Override
      public java.lang.String getSideInputId() {
        java.lang.Object ref = sideInputId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sideInputId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The bytes for sideInputId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSideInputIdBytes() {
        java.lang.Object ref = sideInputId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sideInputId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int WINDOW_FIELD_NUMBER = 3;
      private com.google.protobuf.ByteString window_;
      /**
       * <pre>
       * (Required) The window (after mapping the currently executing elements
       * window into the side input windows domain) encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getWindow() {
        return window_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sideInputId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sideInputId_);
        }
        if (!window_.isEmpty()) {
          output.writeBytes(3, window_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sideInputId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sideInputId_);
        }
        if (!window_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, window_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) obj;

        if (!getTransformId()
            .equals(other.getTransformId())) return false;
        if (!getSideInputId()
            .equals(other.getSideInputId())) return false;
        if (!getWindow()
            .equals(other.getWindow())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransformId().hashCode();
        hash = (37 * hash) + SIDE_INPUT_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSideInputId().hashCode();
        hash = (37 * hash) + WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getWindow().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represents a request for the values associated with a specified window
       * in a PCollection. See
       * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
       * details.
       * Can only be used to perform StateGetRequests on side inputs of the URN
       * beam:side_input:iterable:v1.
       * For a PCollection&lt;V&gt;, the response data stream will be a concatenation
       * of all V's. See https://s.apache.org/beam-fn-api-send-and-receive-data
       * for further details.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInputOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          transformId_ = "";

          sideInputId_ = "";

          window_ = com.google.protobuf.ByteString.EMPTY;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput(this);
          result.transformId_ = transformId_;
          result.sideInputId_ = sideInputId_;
          result.window_ = window_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.getDefaultInstance()) return this;
          if (!other.getTransformId().isEmpty()) {
            transformId_ = other.transformId_;
            onChanged();
          }
          if (!other.getSideInputId().isEmpty()) {
            sideInputId_ = other.sideInputId_;
            onChanged();
          }
          if (other.getWindow() != com.google.protobuf.ByteString.EMPTY) {
            setWindow(other.getWindow());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object transformId_ = "";
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The transformId.
         */
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The bytes for transformId.
         */
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          transformId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransformId() {
          
          transformId_ = getDefaultInstance().getTransformId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The bytes for transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          transformId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sideInputId_ = "";
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The sideInputId.
         */
        public java.lang.String getSideInputId() {
          java.lang.Object ref = sideInputId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sideInputId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The bytes for sideInputId.
         */
        public com.google.protobuf.ByteString
            getSideInputIdBytes() {
          java.lang.Object ref = sideInputId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sideInputId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @param value The sideInputId to set.
         * @return This builder for chaining.
         */
        public Builder setSideInputId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sideInputId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearSideInputId() {
          
          sideInputId_ = getDefaultInstance().getSideInputId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @param value The bytes for sideInputId to set.
         * @return This builder for chaining.
         */
        public Builder setSideInputIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sideInputId_ = value;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString window_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The window (after mapping the currently executing elements
         * window into the side input windows domain) encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return The window.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getWindow() {
          return window_;
        }
        /**
         * <pre>
         * (Required) The window (after mapping the currently executing elements
         * window into the side input windows domain) encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @param value The window to set.
         * @return This builder for chaining.
         */
        public Builder setWindow(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          window_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The window (after mapping the currently executing elements
         * window into the side input windows domain) encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearWindow() {
          
          window_ = getDefaultInstance().getWindow();
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<IterableSideInput>
          PARSER = new com.google.protobuf.AbstractParser<IterableSideInput>() {
        @java.lang.Override
        public IterableSideInput parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new IterableSideInput(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<IterableSideInput> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<IterableSideInput> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface MultimapSideInputOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      java.lang.String getTransformId();
      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      com.google.protobuf.ByteString
          getTransformIdBytes();

      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The sideInputId.
       */
      java.lang.String getSideInputId();
      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The bytes for sideInputId.
       */
      com.google.protobuf.ByteString
          getSideInputIdBytes();

      /**
       * <pre>
       * (Required) The window (after mapping the currently executing elements
       * window into the side input windows domain) encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      com.google.protobuf.ByteString getWindow();

      /**
       * <pre>
       * (Required) The key encoded in a nested context.
       * </pre>
       *
       * <code>bytes key = 4;</code>
       * @return The key.
       */
      com.google.protobuf.ByteString getKey();
    }
    /**
     * <pre>
     * Represents a request for the values associated with a specified user key
     * and window in a PCollection. See
     * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
     * details.
     * Can only be used to perform StateGetRequests on side inputs of the URN
     * beam:side_input:multimap:v1.
     * For a PCollection&lt;KV&lt;K, V&gt;&gt;, the response data stream will be a
     * concatenation of all V's associated with the specified key K. See
     * https://s.apache.org/beam-fn-api-send-and-receive-data for further
     * details.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput}
     */
    public static final class MultimapSideInput extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput)
        MultimapSideInputOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use MultimapSideInput.newBuilder() to construct.
      private MultimapSideInput(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private MultimapSideInput() {
        transformId_ = "";
        sideInputId_ = "";
        window_ = com.google.protobuf.ByteString.EMPTY;
        key_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new MultimapSideInput();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private MultimapSideInput(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                transformId_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sideInputId_ = s;
                break;
              }
              case 26: {

                window_ = input.readBytes();
                break;
              }
              case 34: {

                key_ = input.readBytes();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.Builder.class);
      }

      public static final int TRANSFORM_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object transformId_;
      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      @java.lang.Override
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SIDE_INPUT_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sideInputId_;
      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The sideInputId.
       */
      @java.lang.Override
      public java.lang.String getSideInputId() {
        java.lang.Object ref = sideInputId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sideInputId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The bytes for sideInputId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSideInputIdBytes() {
        java.lang.Object ref = sideInputId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sideInputId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int WINDOW_FIELD_NUMBER = 3;
      private com.google.protobuf.ByteString window_;
      /**
       * <pre>
       * (Required) The window (after mapping the currently executing elements
       * window into the side input windows domain) encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getWindow() {
        return window_;
      }

      public static final int KEY_FIELD_NUMBER = 4;
      private com.google.protobuf.ByteString key_;
      /**
       * <pre>
       * (Required) The key encoded in a nested context.
       * </pre>
       *
       * <code>bytes key = 4;</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sideInputId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sideInputId_);
        }
        if (!window_.isEmpty()) {
          output.writeBytes(3, window_);
        }
        if (!key_.isEmpty()) {
          output.writeBytes(4, key_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sideInputId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sideInputId_);
        }
        if (!window_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, window_);
        }
        if (!key_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, key_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) obj;

        if (!getTransformId()
            .equals(other.getTransformId())) return false;
        if (!getSideInputId()
            .equals(other.getSideInputId())) return false;
        if (!getWindow()
            .equals(other.getWindow())) return false;
        if (!getKey()
            .equals(other.getKey())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransformId().hashCode();
        hash = (37 * hash) + SIDE_INPUT_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSideInputId().hashCode();
        hash = (37 * hash) + WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getWindow().hashCode();
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represents a request for the values associated with a specified user key
       * and window in a PCollection. See
       * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
       * details.
       * Can only be used to perform StateGetRequests on side inputs of the URN
       * beam:side_input:multimap:v1.
       * For a PCollection&lt;KV&lt;K, V&gt;&gt;, the response data stream will be a
       * concatenation of all V's associated with the specified key K. See
       * https://s.apache.org/beam-fn-api-send-and-receive-data for further
       * details.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInputOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          transformId_ = "";

          sideInputId_ = "";

          window_ = com.google.protobuf.ByteString.EMPTY;

          key_ = com.google.protobuf.ByteString.EMPTY;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput(this);
          result.transformId_ = transformId_;
          result.sideInputId_ = sideInputId_;
          result.window_ = window_;
          result.key_ = key_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.getDefaultInstance()) return this;
          if (!other.getTransformId().isEmpty()) {
            transformId_ = other.transformId_;
            onChanged();
          }
          if (!other.getSideInputId().isEmpty()) {
            sideInputId_ = other.sideInputId_;
            onChanged();
          }
          if (other.getWindow() != com.google.protobuf.ByteString.EMPTY) {
            setWindow(other.getWindow());
          }
          if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
            setKey(other.getKey());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object transformId_ = "";
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The transformId.
         */
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The bytes for transformId.
         */
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          transformId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransformId() {
          
          transformId_ = getDefaultInstance().getTransformId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The bytes for transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          transformId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sideInputId_ = "";
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The sideInputId.
         */
        public java.lang.String getSideInputId() {
          java.lang.Object ref = sideInputId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sideInputId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The bytes for sideInputId.
         */
        public com.google.protobuf.ByteString
            getSideInputIdBytes() {
          java.lang.Object ref = sideInputId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sideInputId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @param value The sideInputId to set.
         * @return This builder for chaining.
         */
        public Builder setSideInputId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sideInputId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearSideInputId() {
          
          sideInputId_ = getDefaultInstance().getSideInputId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @param value The bytes for sideInputId to set.
         * @return This builder for chaining.
         */
        public Builder setSideInputIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sideInputId_ = value;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString window_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The window (after mapping the currently executing elements
         * window into the side input windows domain) encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return The window.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getWindow() {
          return window_;
        }
        /**
         * <pre>
         * (Required) The window (after mapping the currently executing elements
         * window into the side input windows domain) encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @param value The window to set.
         * @return This builder for chaining.
         */
        public Builder setWindow(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          window_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The window (after mapping the currently executing elements
         * window into the side input windows domain) encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearWindow() {
          
          window_ = getDefaultInstance().getWindow();
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The key encoded in a nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @return The key.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getKey() {
          return key_;
        }
        /**
         * <pre>
         * (Required) The key encoded in a nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The key encoded in a nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<MultimapSideInput>
          PARSER = new com.google.protobuf.AbstractParser<MultimapSideInput>() {
        @java.lang.Override
        public MultimapSideInput parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new MultimapSideInput(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<MultimapSideInput> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<MultimapSideInput> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface MultimapKeysSideInputOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      java.lang.String getTransformId();
      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      com.google.protobuf.ByteString
          getTransformIdBytes();

      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The sideInputId.
       */
      java.lang.String getSideInputId();
      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The bytes for sideInputId.
       */
      com.google.protobuf.ByteString
          getSideInputIdBytes();

      /**
       * <pre>
       * (Required) The window (after mapping the currently executing elements
       * window into the side input windows domain) encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      com.google.protobuf.ByteString getWindow();
    }
    /**
     * <pre>
     * Represents a request for the keys associated with a specified window in a PCollection. See
     * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
     * details.
     * Can only be used to perform StateGetRequests on side inputs of the URN
     * beam:side_input:multimap:v1.
     * For a PCollection&lt;KV&lt;K, V&gt;&gt;, the response data stream will be a
     * concatenation of all K's associated with the specified window. See
     * https://s.apache.org/beam-fn-api-send-and-receive-data for further
     * details.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput}
     */
    public static final class MultimapKeysSideInput extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput)
        MultimapKeysSideInputOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use MultimapKeysSideInput.newBuilder() to construct.
      private MultimapKeysSideInput(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private MultimapKeysSideInput() {
        transformId_ = "";
        sideInputId_ = "";
        window_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new MultimapKeysSideInput();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private MultimapKeysSideInput(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                transformId_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sideInputId_ = s;
                break;
              }
              case 26: {

                window_ = input.readBytes();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.Builder.class);
      }

      public static final int TRANSFORM_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object transformId_;
      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      @java.lang.Override
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the PTransform containing a side input.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SIDE_INPUT_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sideInputId_;
      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The sideInputId.
       */
      @java.lang.Override
      public java.lang.String getSideInputId() {
        java.lang.Object ref = sideInputId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sideInputId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the side input.
       * </pre>
       *
       * <code>string side_input_id = 2;</code>
       * @return The bytes for sideInputId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSideInputIdBytes() {
        java.lang.Object ref = sideInputId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sideInputId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int WINDOW_FIELD_NUMBER = 3;
      private com.google.protobuf.ByteString window_;
      /**
       * <pre>
       * (Required) The window (after mapping the currently executing elements
       * window into the side input windows domain) encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getWindow() {
        return window_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sideInputId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sideInputId_);
        }
        if (!window_.isEmpty()) {
          output.writeBytes(3, window_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sideInputId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sideInputId_);
        }
        if (!window_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, window_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) obj;

        if (!getTransformId()
            .equals(other.getTransformId())) return false;
        if (!getSideInputId()
            .equals(other.getSideInputId())) return false;
        if (!getWindow()
            .equals(other.getWindow())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransformId().hashCode();
        hash = (37 * hash) + SIDE_INPUT_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSideInputId().hashCode();
        hash = (37 * hash) + WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getWindow().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represents a request for the keys associated with a specified window in a PCollection. See
       * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
       * details.
       * Can only be used to perform StateGetRequests on side inputs of the URN
       * beam:side_input:multimap:v1.
       * For a PCollection&lt;KV&lt;K, V&gt;&gt;, the response data stream will be a
       * concatenation of all K's associated with the specified window. See
       * https://s.apache.org/beam-fn-api-send-and-receive-data for further
       * details.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInputOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          transformId_ = "";

          sideInputId_ = "";

          window_ = com.google.protobuf.ByteString.EMPTY;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput(this);
          result.transformId_ = transformId_;
          result.sideInputId_ = sideInputId_;
          result.window_ = window_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.getDefaultInstance()) return this;
          if (!other.getTransformId().isEmpty()) {
            transformId_ = other.transformId_;
            onChanged();
          }
          if (!other.getSideInputId().isEmpty()) {
            sideInputId_ = other.sideInputId_;
            onChanged();
          }
          if (other.getWindow() != com.google.protobuf.ByteString.EMPTY) {
            setWindow(other.getWindow());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object transformId_ = "";
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The transformId.
         */
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The bytes for transformId.
         */
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          transformId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransformId() {
          
          transformId_ = getDefaultInstance().getTransformId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing a side input.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The bytes for transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          transformId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sideInputId_ = "";
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The sideInputId.
         */
        public java.lang.String getSideInputId() {
          java.lang.Object ref = sideInputId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sideInputId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return The bytes for sideInputId.
         */
        public com.google.protobuf.ByteString
            getSideInputIdBytes() {
          java.lang.Object ref = sideInputId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sideInputId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @param value The sideInputId to set.
         * @return This builder for chaining.
         */
        public Builder setSideInputId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sideInputId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearSideInputId() {
          
          sideInputId_ = getDefaultInstance().getSideInputId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the side input.
         * </pre>
         *
         * <code>string side_input_id = 2;</code>
         * @param value The bytes for sideInputId to set.
         * @return This builder for chaining.
         */
        public Builder setSideInputIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sideInputId_ = value;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString window_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The window (after mapping the currently executing elements
         * window into the side input windows domain) encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return The window.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getWindow() {
          return window_;
        }
        /**
         * <pre>
         * (Required) The window (after mapping the currently executing elements
         * window into the side input windows domain) encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @param value The window to set.
         * @return This builder for chaining.
         */
        public Builder setWindow(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          window_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The window (after mapping the currently executing elements
         * window into the side input windows domain) encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearWindow() {
          
          window_ = getDefaultInstance().getWindow();
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<MultimapKeysSideInput>
          PARSER = new com.google.protobuf.AbstractParser<MultimapKeysSideInput>() {
        @java.lang.Override
        public MultimapKeysSideInput parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new MultimapKeysSideInput(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<MultimapKeysSideInput> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<MultimapKeysSideInput> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface BagUserStateOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateKey.BagUserState)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      java.lang.String getTransformId();
      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      com.google.protobuf.ByteString
          getTransformIdBytes();

      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The userStateId.
       */
      java.lang.String getUserStateId();
      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The bytes for userStateId.
       */
      com.google.protobuf.ByteString
          getUserStateIdBytes();

      /**
       * <pre>
       * (Required) The window encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      com.google.protobuf.ByteString getWindow();

      /**
       * <pre>
       * (Required) The key of the currently executing element encoded in a
       * nested context.
       * </pre>
       *
       * <code>bytes key = 4;</code>
       * @return The key.
       */
      com.google.protobuf.ByteString getKey();
    }
    /**
     * <pre>
     * Represents a request for an unordered set of values associated with a
     * specified user key and window for a PTransform. See
     * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
     * details.
     * The response data stream will be a concatenation of all V's associated
     * with the specified user key and window.
     * See https://s.apache.org/beam-fn-api-send-and-receive-data for further
     * details.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.BagUserState}
     */
    public static final class BagUserState extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateKey.BagUserState)
        BagUserStateOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use BagUserState.newBuilder() to construct.
      private BagUserState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private BagUserState() {
        transformId_ = "";
        userStateId_ = "";
        window_ = com.google.protobuf.ByteString.EMPTY;
        key_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new BagUserState();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private BagUserState(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                transformId_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                userStateId_ = s;
                break;
              }
              case 26: {

                window_ = input.readBytes();
                break;
              }
              case 34: {

                key_ = input.readBytes();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.Builder.class);
      }

      public static final int TRANSFORM_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object transformId_;
      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      @java.lang.Override
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int USER_STATE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object userStateId_;
      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The userStateId.
       */
      @java.lang.Override
      public java.lang.String getUserStateId() {
        java.lang.Object ref = userStateId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          userStateId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The bytes for userStateId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getUserStateIdBytes() {
        java.lang.Object ref = userStateId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userStateId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int WINDOW_FIELD_NUMBER = 3;
      private com.google.protobuf.ByteString window_;
      /**
       * <pre>
       * (Required) The window encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getWindow() {
        return window_;
      }

      public static final int KEY_FIELD_NUMBER = 4;
      private com.google.protobuf.ByteString key_;
      /**
       * <pre>
       * (Required) The key of the currently executing element encoded in a
       * nested context.
       * </pre>
       *
       * <code>bytes key = 4;</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userStateId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, userStateId_);
        }
        if (!window_.isEmpty()) {
          output.writeBytes(3, window_);
        }
        if (!key_.isEmpty()) {
          output.writeBytes(4, key_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userStateId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, userStateId_);
        }
        if (!window_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, window_);
        }
        if (!key_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, key_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) obj;

        if (!getTransformId()
            .equals(other.getTransformId())) return false;
        if (!getUserStateId()
            .equals(other.getUserStateId())) return false;
        if (!getWindow()
            .equals(other.getWindow())) return false;
        if (!getKey()
            .equals(other.getKey())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransformId().hashCode();
        hash = (37 * hash) + USER_STATE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getUserStateId().hashCode();
        hash = (37 * hash) + WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getWindow().hashCode();
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represents a request for an unordered set of values associated with a
       * specified user key and window for a PTransform. See
       * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
       * details.
       * The response data stream will be a concatenation of all V's associated
       * with the specified user key and window.
       * See https://s.apache.org/beam-fn-api-send-and-receive-data for further
       * details.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.BagUserState}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateKey.BagUserState)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserStateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          transformId_ = "";

          userStateId_ = "";

          window_ = com.google.protobuf.ByteString.EMPTY;

          key_ = com.google.protobuf.ByteString.EMPTY;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState(this);
          result.transformId_ = transformId_;
          result.userStateId_ = userStateId_;
          result.window_ = window_;
          result.key_ = key_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.getDefaultInstance()) return this;
          if (!other.getTransformId().isEmpty()) {
            transformId_ = other.transformId_;
            onChanged();
          }
          if (!other.getUserStateId().isEmpty()) {
            userStateId_ = other.userStateId_;
            onChanged();
          }
          if (other.getWindow() != com.google.protobuf.ByteString.EMPTY) {
            setWindow(other.getWindow());
          }
          if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
            setKey(other.getKey());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object transformId_ = "";
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The transformId.
         */
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The bytes for transformId.
         */
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          transformId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransformId() {
          
          transformId_ = getDefaultInstance().getTransformId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The bytes for transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          transformId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object userStateId_ = "";
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @return The userStateId.
         */
        public java.lang.String getUserStateId() {
          java.lang.Object ref = userStateId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            userStateId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @return The bytes for userStateId.
         */
        public com.google.protobuf.ByteString
            getUserStateIdBytes() {
          java.lang.Object ref = userStateId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            userStateId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @param value The userStateId to set.
         * @return This builder for chaining.
         */
        public Builder setUserStateId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          userStateId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearUserStateId() {
          
          userStateId_ = getDefaultInstance().getUserStateId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @param value The bytes for userStateId to set.
         * @return This builder for chaining.
         */
        public Builder setUserStateIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          userStateId_ = value;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString window_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The window encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return The window.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getWindow() {
          return window_;
        }
        /**
         * <pre>
         * (Required) The window encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @param value The window to set.
         * @return This builder for chaining.
         */
        public Builder setWindow(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          window_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The window encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearWindow() {
          
          window_ = getDefaultInstance().getWindow();
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The key of the currently executing element encoded in a
         * nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @return The key.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getKey() {
          return key_;
        }
        /**
         * <pre>
         * (Required) The key of the currently executing element encoded in a
         * nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The key of the currently executing element encoded in a
         * nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateKey.BagUserState)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateKey.BagUserState)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<BagUserState>
          PARSER = new com.google.protobuf.AbstractParser<BagUserState>() {
        @java.lang.Override
        public BagUserState parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new BagUserState(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<BagUserState> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<BagUserState> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface MultimapKeysUserStateOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      java.lang.String getTransformId();
      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      com.google.protobuf.ByteString
          getTransformIdBytes();

      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The userStateId.
       */
      java.lang.String getUserStateId();
      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The bytes for userStateId.
       */
      com.google.protobuf.ByteString
          getUserStateIdBytes();

      /**
       * <pre>
       * (Required) The window encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      com.google.protobuf.ByteString getWindow();

      /**
       * <pre>
       * (Required) The key of the currently executing element encoded in a
       * nested context.
       * </pre>
       *
       * <code>bytes key = 4;</code>
       * @return The key.
       */
      com.google.protobuf.ByteString getKey();
    }
    /**
     * <pre>
     * Represents a request for the keys of a multimap associated with a specified
     * user key and window for a PTransform. See
     * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
     * details.
     * Can only be used to perform StateGetRequests and StateClearRequests on the
     * user state.
     * The response data stream will be a concatenation of all K's associated
     * with the specified user key and window.
     * See https://s.apache.org/beam-fn-api-send-and-receive-data for further
     * details.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState}
     */
    public static final class MultimapKeysUserState extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState)
        MultimapKeysUserStateOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use MultimapKeysUserState.newBuilder() to construct.
      private MultimapKeysUserState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private MultimapKeysUserState() {
        transformId_ = "";
        userStateId_ = "";
        window_ = com.google.protobuf.ByteString.EMPTY;
        key_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new MultimapKeysUserState();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private MultimapKeysUserState(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                transformId_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                userStateId_ = s;
                break;
              }
              case 26: {

                window_ = input.readBytes();
                break;
              }
              case 34: {

                key_ = input.readBytes();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.Builder.class);
      }

      public static final int TRANSFORM_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object transformId_;
      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      @java.lang.Override
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int USER_STATE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object userStateId_;
      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The userStateId.
       */
      @java.lang.Override
      public java.lang.String getUserStateId() {
        java.lang.Object ref = userStateId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          userStateId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The bytes for userStateId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getUserStateIdBytes() {
        java.lang.Object ref = userStateId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userStateId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int WINDOW_FIELD_NUMBER = 3;
      private com.google.protobuf.ByteString window_;
      /**
       * <pre>
       * (Required) The window encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getWindow() {
        return window_;
      }

      public static final int KEY_FIELD_NUMBER = 4;
      private com.google.protobuf.ByteString key_;
      /**
       * <pre>
       * (Required) The key of the currently executing element encoded in a
       * nested context.
       * </pre>
       *
       * <code>bytes key = 4;</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userStateId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, userStateId_);
        }
        if (!window_.isEmpty()) {
          output.writeBytes(3, window_);
        }
        if (!key_.isEmpty()) {
          output.writeBytes(4, key_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userStateId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, userStateId_);
        }
        if (!window_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, window_);
        }
        if (!key_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, key_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) obj;

        if (!getTransformId()
            .equals(other.getTransformId())) return false;
        if (!getUserStateId()
            .equals(other.getUserStateId())) return false;
        if (!getWindow()
            .equals(other.getWindow())) return false;
        if (!getKey()
            .equals(other.getKey())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransformId().hashCode();
        hash = (37 * hash) + USER_STATE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getUserStateId().hashCode();
        hash = (37 * hash) + WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getWindow().hashCode();
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represents a request for the keys of a multimap associated with a specified
       * user key and window for a PTransform. See
       * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
       * details.
       * Can only be used to perform StateGetRequests and StateClearRequests on the
       * user state.
       * The response data stream will be a concatenation of all K's associated
       * with the specified user key and window.
       * See https://s.apache.org/beam-fn-api-send-and-receive-data for further
       * details.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserStateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          transformId_ = "";

          userStateId_ = "";

          window_ = com.google.protobuf.ByteString.EMPTY;

          key_ = com.google.protobuf.ByteString.EMPTY;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState(this);
          result.transformId_ = transformId_;
          result.userStateId_ = userStateId_;
          result.window_ = window_;
          result.key_ = key_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.getDefaultInstance()) return this;
          if (!other.getTransformId().isEmpty()) {
            transformId_ = other.transformId_;
            onChanged();
          }
          if (!other.getUserStateId().isEmpty()) {
            userStateId_ = other.userStateId_;
            onChanged();
          }
          if (other.getWindow() != com.google.protobuf.ByteString.EMPTY) {
            setWindow(other.getWindow());
          }
          if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
            setKey(other.getKey());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object transformId_ = "";
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The transformId.
         */
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The bytes for transformId.
         */
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          transformId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransformId() {
          
          transformId_ = getDefaultInstance().getTransformId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The bytes for transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          transformId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object userStateId_ = "";
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @return The userStateId.
         */
        public java.lang.String getUserStateId() {
          java.lang.Object ref = userStateId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            userStateId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @return The bytes for userStateId.
         */
        public com.google.protobuf.ByteString
            getUserStateIdBytes() {
          java.lang.Object ref = userStateId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            userStateId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @param value The userStateId to set.
         * @return This builder for chaining.
         */
        public Builder setUserStateId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          userStateId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearUserStateId() {
          
          userStateId_ = getDefaultInstance().getUserStateId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @param value The bytes for userStateId to set.
         * @return This builder for chaining.
         */
        public Builder setUserStateIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          userStateId_ = value;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString window_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The window encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return The window.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getWindow() {
          return window_;
        }
        /**
         * <pre>
         * (Required) The window encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @param value The window to set.
         * @return This builder for chaining.
         */
        public Builder setWindow(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          window_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The window encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearWindow() {
          
          window_ = getDefaultInstance().getWindow();
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The key of the currently executing element encoded in a
         * nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @return The key.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getKey() {
          return key_;
        }
        /**
         * <pre>
         * (Required) The key of the currently executing element encoded in a
         * nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The key of the currently executing element encoded in a
         * nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<MultimapKeysUserState>
          PARSER = new com.google.protobuf.AbstractParser<MultimapKeysUserState>() {
        @java.lang.Override
        public MultimapKeysUserState parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new MultimapKeysUserState(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<MultimapKeysUserState> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<MultimapKeysUserState> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface MultimapUserStateOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      java.lang.String getTransformId();
      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      com.google.protobuf.ByteString
          getTransformIdBytes();

      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The userStateId.
       */
      java.lang.String getUserStateId();
      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The bytes for userStateId.
       */
      com.google.protobuf.ByteString
          getUserStateIdBytes();

      /**
       * <pre>
       * (Required) The window encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      com.google.protobuf.ByteString getWindow();

      /**
       * <pre>
       * (Required) The key of the currently executing element encoded in a
       * nested context.
       * </pre>
       *
       * <code>bytes key = 4;</code>
       * @return The key.
       */
      com.google.protobuf.ByteString getKey();

      /**
       * <pre>
       * (Required) The map key encoded in a nested context.
       * </pre>
       *
       * <code>bytes map_key = 5;</code>
       * @return The mapKey.
       */
      com.google.protobuf.ByteString getMapKey();
    }
    /**
     * <pre>
     * Represents a request for the values of the map key associated with a
     * specified user key and window for a PTransform. See
     * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
     * details.
     * The response data stream will be a concatenation of all V's associated
     * with the specified map key, user key, and window.
     * See https://s.apache.org/beam-fn-api-send-and-receive-data for further
     * details.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState}
     */
    public static final class MultimapUserState extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState)
        MultimapUserStateOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use MultimapUserState.newBuilder() to construct.
      private MultimapUserState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private MultimapUserState() {
        transformId_ = "";
        userStateId_ = "";
        window_ = com.google.protobuf.ByteString.EMPTY;
        key_ = com.google.protobuf.ByteString.EMPTY;
        mapKey_ = com.google.protobuf.ByteString.EMPTY;
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new MultimapUserState();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private MultimapUserState(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                transformId_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                userStateId_ = s;
                break;
              }
              case 26: {

                window_ = input.readBytes();
                break;
              }
              case 34: {

                key_ = input.readBytes();
                break;
              }
              case 42: {

                mapKey_ = input.readBytes();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.Builder.class);
      }

      public static final int TRANSFORM_ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object transformId_;
      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The transformId.
       */
      @java.lang.Override
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the PTransform containing user state.
       * </pre>
       *
       * <code>string transform_id = 1;</code>
       * @return The bytes for transformId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int USER_STATE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object userStateId_;
      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The userStateId.
       */
      @java.lang.Override
      public java.lang.String getUserStateId() {
        java.lang.Object ref = userStateId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          userStateId_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * (Required) The id of the user state.
       * </pre>
       *
       * <code>string user_state_id = 2;</code>
       * @return The bytes for userStateId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getUserStateIdBytes() {
        java.lang.Object ref = userStateId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userStateId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int WINDOW_FIELD_NUMBER = 3;
      private com.google.protobuf.ByteString window_;
      /**
       * <pre>
       * (Required) The window encoded in a nested context.
       * </pre>
       *
       * <code>bytes window = 3;</code>
       * @return The window.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getWindow() {
        return window_;
      }

      public static final int KEY_FIELD_NUMBER = 4;
      private com.google.protobuf.ByteString key_;
      /**
       * <pre>
       * (Required) The key of the currently executing element encoded in a
       * nested context.
       * </pre>
       *
       * <code>bytes key = 4;</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }

      public static final int MAP_KEY_FIELD_NUMBER = 5;
      private com.google.protobuf.ByteString mapKey_;
      /**
       * <pre>
       * (Required) The map key encoded in a nested context.
       * </pre>
       *
       * <code>bytes map_key = 5;</code>
       * @return The mapKey.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getMapKey() {
        return mapKey_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userStateId_)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, userStateId_);
        }
        if (!window_.isEmpty()) {
          output.writeBytes(3, window_);
        }
        if (!key_.isEmpty()) {
          output.writeBytes(4, key_);
        }
        if (!mapKey_.isEmpty()) {
          output.writeBytes(5, mapKey_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transformId_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(userStateId_)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, userStateId_);
        }
        if (!window_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, window_);
        }
        if (!key_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, key_);
        }
        if (!mapKey_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(5, mapKey_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) obj;

        if (!getTransformId()
            .equals(other.getTransformId())) return false;
        if (!getUserStateId()
            .equals(other.getUserStateId())) return false;
        if (!getWindow()
            .equals(other.getWindow())) return false;
        if (!getKey()
            .equals(other.getKey())) return false;
        if (!getMapKey()
            .equals(other.getMapKey())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransformId().hashCode();
        hash = (37 * hash) + USER_STATE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getUserStateId().hashCode();
        hash = (37 * hash) + WINDOW_FIELD_NUMBER;
        hash = (53 * hash) + getWindow().hashCode();
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
        hash = (37 * hash) + MAP_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getMapKey().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represents a request for the values of the map key associated with a
       * specified user key and window for a PTransform. See
       * https://s.apache.org/beam-fn-state-api-and-bundle-processing for further
       * details.
       * The response data stream will be a concatenation of all V's associated
       * with the specified map key, user key, and window.
       * See https://s.apache.org/beam-fn-api-send-and-receive-data for further
       * details.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserStateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          transformId_ = "";

          userStateId_ = "";

          window_ = com.google.protobuf.ByteString.EMPTY;

          key_ = com.google.protobuf.ByteString.EMPTY;

          mapKey_ = com.google.protobuf.ByteString.EMPTY;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState(this);
          result.transformId_ = transformId_;
          result.userStateId_ = userStateId_;
          result.window_ = window_;
          result.key_ = key_;
          result.mapKey_ = mapKey_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.getDefaultInstance()) return this;
          if (!other.getTransformId().isEmpty()) {
            transformId_ = other.transformId_;
            onChanged();
          }
          if (!other.getUserStateId().isEmpty()) {
            userStateId_ = other.userStateId_;
            onChanged();
          }
          if (other.getWindow() != com.google.protobuf.ByteString.EMPTY) {
            setWindow(other.getWindow());
          }
          if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
            setKey(other.getKey());
          }
          if (other.getMapKey() != com.google.protobuf.ByteString.EMPTY) {
            setMapKey(other.getMapKey());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object transformId_ = "";
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The transformId.
         */
        public java.lang.String getTransformId() {
          java.lang.Object ref = transformId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            transformId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return The bytes for transformId.
         */
        public com.google.protobuf.ByteString
            getTransformIdBytes() {
          java.lang.Object ref = transformId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            transformId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          transformId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransformId() {
          
          transformId_ = getDefaultInstance().getTransformId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the PTransform containing user state.
         * </pre>
         *
         * <code>string transform_id = 1;</code>
         * @param value The bytes for transformId to set.
         * @return This builder for chaining.
         */
        public Builder setTransformIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          transformId_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object userStateId_ = "";
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @return The userStateId.
         */
        public java.lang.String getUserStateId() {
          java.lang.Object ref = userStateId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            userStateId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @return The bytes for userStateId.
         */
        public com.google.protobuf.ByteString
            getUserStateIdBytes() {
          java.lang.Object ref = userStateId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            userStateId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @param value The userStateId to set.
         * @return This builder for chaining.
         */
        public Builder setUserStateId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          userStateId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearUserStateId() {
          
          userStateId_ = getDefaultInstance().getUserStateId();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The id of the user state.
         * </pre>
         *
         * <code>string user_state_id = 2;</code>
         * @param value The bytes for userStateId to set.
         * @return This builder for chaining.
         */
        public Builder setUserStateIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          userStateId_ = value;
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString window_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The window encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return The window.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getWindow() {
          return window_;
        }
        /**
         * <pre>
         * (Required) The window encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @param value The window to set.
         * @return This builder for chaining.
         */
        public Builder setWindow(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          window_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The window encoded in a nested context.
         * </pre>
         *
         * <code>bytes window = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearWindow() {
          
          window_ = getDefaultInstance().getWindow();
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The key of the currently executing element encoded in a
         * nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @return The key.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getKey() {
          return key_;
        }
        /**
         * <pre>
         * (Required) The key of the currently executing element encoded in a
         * nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The key of the currently executing element encoded in a
         * nested context.
         * </pre>
         *
         * <code>bytes key = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }

        private com.google.protobuf.ByteString mapKey_ = com.google.protobuf.ByteString.EMPTY;
        /**
         * <pre>
         * (Required) The map key encoded in a nested context.
         * </pre>
         *
         * <code>bytes map_key = 5;</code>
         * @return The mapKey.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getMapKey() {
          return mapKey_;
        }
        /**
         * <pre>
         * (Required) The map key encoded in a nested context.
         * </pre>
         *
         * <code>bytes map_key = 5;</code>
         * @param value The mapKey to set.
         * @return This builder for chaining.
         */
        public Builder setMapKey(com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          mapKey_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * (Required) The map key encoded in a nested context.
         * </pre>
         *
         * <code>bytes map_key = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearMapKey() {
          
          mapKey_ = getDefaultInstance().getMapKey();
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<MultimapUserState>
          PARSER = new com.google.protobuf.AbstractParser<MultimapUserState>() {
        @java.lang.Override
        public MultimapUserState parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new MultimapUserState(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<MultimapUserState> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<MultimapUserState> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int typeCase_ = 0;
    private java.lang.Object type_;
    public enum TypeCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      RUNNER(1),
      MULTIMAP_SIDE_INPUT(2),
      BAG_USER_STATE(3),
      ITERABLE_SIDE_INPUT(4),
      MULTIMAP_KEYS_SIDE_INPUT(5),
      MULTIMAP_KEYS_USER_STATE(6),
      MULTIMAP_USER_STATE(7),
      TYPE_NOT_SET(0);
      private final int value;
      private TypeCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static TypeCase forNumber(int value) {
        switch (value) {
          case 1: return RUNNER;
          case 2: return MULTIMAP_SIDE_INPUT;
          case 3: return BAG_USER_STATE;
          case 4: return ITERABLE_SIDE_INPUT;
          case 5: return MULTIMAP_KEYS_SIDE_INPUT;
          case 6: return MULTIMAP_KEYS_USER_STATE;
          case 7: return MULTIMAP_USER_STATE;
          case 0: return TYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TypeCase
    getTypeCase() {
      return TypeCase.forNumber(
          typeCase_);
    }

    public static final int RUNNER_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
     * @return Whether the runner field is set.
     */
    @java.lang.Override
    public boolean hasRunner() {
      return typeCase_ == 1;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
     * @return The runner.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner getRunner() {
      if (typeCase_ == 1) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.RunnerOrBuilder getRunnerOrBuilder() {
      if (typeCase_ == 1) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.getDefaultInstance();
    }

    public static final int MULTIMAP_SIDE_INPUT_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
     * @return Whether the multimapSideInput field is set.
     */
    @java.lang.Override
    public boolean hasMultimapSideInput() {
      return typeCase_ == 2;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
     * @return The multimapSideInput.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput getMultimapSideInput() {
      if (typeCase_ == 2) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInputOrBuilder getMultimapSideInputOrBuilder() {
      if (typeCase_ == 2) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.getDefaultInstance();
    }

    public static final int BAG_USER_STATE_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
     * @return Whether the bagUserState field is set.
     */
    @java.lang.Override
    public boolean hasBagUserState() {
      return typeCase_ == 3;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
     * @return The bagUserState.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState getBagUserState() {
      if (typeCase_ == 3) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserStateOrBuilder getBagUserStateOrBuilder() {
      if (typeCase_ == 3) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.getDefaultInstance();
    }

    public static final int ITERABLE_SIDE_INPUT_FIELD_NUMBER = 4;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
     * @return Whether the iterableSideInput field is set.
     */
    @java.lang.Override
    public boolean hasIterableSideInput() {
      return typeCase_ == 4;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
     * @return The iterableSideInput.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput getIterableSideInput() {
      if (typeCase_ == 4) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInputOrBuilder getIterableSideInputOrBuilder() {
      if (typeCase_ == 4) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.getDefaultInstance();
    }

    public static final int MULTIMAP_KEYS_SIDE_INPUT_FIELD_NUMBER = 5;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
     * @return Whether the multimapKeysSideInput field is set.
     */
    @java.lang.Override
    public boolean hasMultimapKeysSideInput() {
      return typeCase_ == 5;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
     * @return The multimapKeysSideInput.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput getMultimapKeysSideInput() {
      if (typeCase_ == 5) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInputOrBuilder getMultimapKeysSideInputOrBuilder() {
      if (typeCase_ == 5) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.getDefaultInstance();
    }

    public static final int MULTIMAP_KEYS_USER_STATE_FIELD_NUMBER = 6;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
     * @return Whether the multimapKeysUserState field is set.
     */
    @java.lang.Override
    public boolean hasMultimapKeysUserState() {
      return typeCase_ == 6;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
     * @return The multimapKeysUserState.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState getMultimapKeysUserState() {
      if (typeCase_ == 6) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserStateOrBuilder getMultimapKeysUserStateOrBuilder() {
      if (typeCase_ == 6) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.getDefaultInstance();
    }

    public static final int MULTIMAP_USER_STATE_FIELD_NUMBER = 7;
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
     * @return Whether the multimapUserState field is set.
     */
    @java.lang.Override
    public boolean hasMultimapUserState() {
      return typeCase_ == 7;
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
     * @return The multimapUserState.
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState getMultimapUserState() {
      if (typeCase_ == 7) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.getDefaultInstance();
    }
    /**
     * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserStateOrBuilder getMultimapUserStateOrBuilder() {
      if (typeCase_ == 7) {
         return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_;
      }
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (typeCase_ == 1) {
        output.writeMessage(1, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_);
      }
      if (typeCase_ == 2) {
        output.writeMessage(2, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_);
      }
      if (typeCase_ == 3) {
        output.writeMessage(3, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_);
      }
      if (typeCase_ == 4) {
        output.writeMessage(4, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_);
      }
      if (typeCase_ == 5) {
        output.writeMessage(5, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_);
      }
      if (typeCase_ == 6) {
        output.writeMessage(6, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_);
      }
      if (typeCase_ == 7) {
        output.writeMessage(7, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (typeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_);
      }
      if (typeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_);
      }
      if (typeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_);
      }
      if (typeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_);
      }
      if (typeCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_);
      }
      if (typeCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_);
      }
      if (typeCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey) obj;

      if (!getTypeCase().equals(other.getTypeCase())) return false;
      switch (typeCase_) {
        case 1:
          if (!getRunner()
              .equals(other.getRunner())) return false;
          break;
        case 2:
          if (!getMultimapSideInput()
              .equals(other.getMultimapSideInput())) return false;
          break;
        case 3:
          if (!getBagUserState()
              .equals(other.getBagUserState())) return false;
          break;
        case 4:
          if (!getIterableSideInput()
              .equals(other.getIterableSideInput())) return false;
          break;
        case 5:
          if (!getMultimapKeysSideInput()
              .equals(other.getMultimapKeysSideInput())) return false;
          break;
        case 6:
          if (!getMultimapKeysUserState()
              .equals(other.getMultimapKeysUserState())) return false;
          break;
        case 7:
          if (!getMultimapUserState()
              .equals(other.getMultimapUserState())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (typeCase_) {
        case 1:
          hash = (37 * hash) + RUNNER_FIELD_NUMBER;
          hash = (53 * hash) + getRunner().hashCode();
          break;
        case 2:
          hash = (37 * hash) + MULTIMAP_SIDE_INPUT_FIELD_NUMBER;
          hash = (53 * hash) + getMultimapSideInput().hashCode();
          break;
        case 3:
          hash = (37 * hash) + BAG_USER_STATE_FIELD_NUMBER;
          hash = (53 * hash) + getBagUserState().hashCode();
          break;
        case 4:
          hash = (37 * hash) + ITERABLE_SIDE_INPUT_FIELD_NUMBER;
          hash = (53 * hash) + getIterableSideInput().hashCode();
          break;
        case 5:
          hash = (37 * hash) + MULTIMAP_KEYS_SIDE_INPUT_FIELD_NUMBER;
          hash = (53 * hash) + getMultimapKeysSideInput().hashCode();
          break;
        case 6:
          hash = (37 * hash) + MULTIMAP_KEYS_USER_STATE_FIELD_NUMBER;
          hash = (53 * hash) + getMultimapKeysUserState().hashCode();
          break;
        case 7:
          hash = (37 * hash) + MULTIMAP_USER_STATE_FIELD_NUMBER;
          hash = (53 * hash) + getMultimapUserState().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateKey)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        typeCase_ = 0;
        type_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey(this);
        if (typeCase_ == 1) {
          if (runnerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = runnerBuilder_.build();
          }
        }
        if (typeCase_ == 2) {
          if (multimapSideInputBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = multimapSideInputBuilder_.build();
          }
        }
        if (typeCase_ == 3) {
          if (bagUserStateBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = bagUserStateBuilder_.build();
          }
        }
        if (typeCase_ == 4) {
          if (iterableSideInputBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = iterableSideInputBuilder_.build();
          }
        }
        if (typeCase_ == 5) {
          if (multimapKeysSideInputBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = multimapKeysSideInputBuilder_.build();
          }
        }
        if (typeCase_ == 6) {
          if (multimapKeysUserStateBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = multimapKeysUserStateBuilder_.build();
          }
        }
        if (typeCase_ == 7) {
          if (multimapUserStateBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = multimapUserStateBuilder_.build();
          }
        }
        result.typeCase_ = typeCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.getDefaultInstance()) return this;
        switch (other.getTypeCase()) {
          case RUNNER: {
            mergeRunner(other.getRunner());
            break;
          }
          case MULTIMAP_SIDE_INPUT: {
            mergeMultimapSideInput(other.getMultimapSideInput());
            break;
          }
          case BAG_USER_STATE: {
            mergeBagUserState(other.getBagUserState());
            break;
          }
          case ITERABLE_SIDE_INPUT: {
            mergeIterableSideInput(other.getIterableSideInput());
            break;
          }
          case MULTIMAP_KEYS_SIDE_INPUT: {
            mergeMultimapKeysSideInput(other.getMultimapKeysSideInput());
            break;
          }
          case MULTIMAP_KEYS_USER_STATE: {
            mergeMultimapKeysUserState(other.getMultimapKeysUserState());
            break;
          }
          case MULTIMAP_USER_STATE: {
            mergeMultimapUserState(other.getMultimapUserState());
            break;
          }
          case TYPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int typeCase_ = 0;
      private java.lang.Object type_;
      public TypeCase
          getTypeCase() {
        return TypeCase.forNumber(
            typeCase_);
      }

      public Builder clearType() {
        typeCase_ = 0;
        type_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.RunnerOrBuilder> runnerBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
       * @return Whether the runner field is set.
       */
      @java.lang.Override
      public boolean hasRunner() {
        return typeCase_ == 1;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
       * @return The runner.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner getRunner() {
        if (runnerBuilder_ == null) {
          if (typeCase_ == 1) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.getDefaultInstance();
        } else {
          if (typeCase_ == 1) {
            return runnerBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
       */
      public Builder setRunner(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner value) {
        if (runnerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          runnerBuilder_.setMessage(value);
        }
        typeCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
       */
      public Builder setRunner(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.Builder builderForValue) {
        if (runnerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          runnerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
       */
      public Builder mergeRunner(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner value) {
        if (runnerBuilder_ == null) {
          if (typeCase_ == 1 &&
              type_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.getDefaultInstance()) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 1) {
            runnerBuilder_.mergeFrom(value);
          } else {
            runnerBuilder_.setMessage(value);
          }
        }
        typeCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
       */
      public Builder clearRunner() {
        if (runnerBuilder_ == null) {
          if (typeCase_ == 1) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 1) {
            typeCase_ = 0;
            type_ = null;
          }
          runnerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.Builder getRunnerBuilder() {
        return getRunnerFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.RunnerOrBuilder getRunnerOrBuilder() {
        if ((typeCase_ == 1) && (runnerBuilder_ != null)) {
          return runnerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 1) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.Runner runner = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.RunnerOrBuilder> 
          getRunnerFieldBuilder() {
        if (runnerBuilder_ == null) {
          if (!(typeCase_ == 1)) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.getDefaultInstance();
          }
          runnerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.RunnerOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.Runner) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 1;
        onChanged();;
        return runnerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInputOrBuilder> multimapSideInputBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
       * @return Whether the multimapSideInput field is set.
       */
      @java.lang.Override
      public boolean hasMultimapSideInput() {
        return typeCase_ == 2;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
       * @return The multimapSideInput.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput getMultimapSideInput() {
        if (multimapSideInputBuilder_ == null) {
          if (typeCase_ == 2) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.getDefaultInstance();
        } else {
          if (typeCase_ == 2) {
            return multimapSideInputBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
       */
      public Builder setMultimapSideInput(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput value) {
        if (multimapSideInputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          multimapSideInputBuilder_.setMessage(value);
        }
        typeCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
       */
      public Builder setMultimapSideInput(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.Builder builderForValue) {
        if (multimapSideInputBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          multimapSideInputBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
       */
      public Builder mergeMultimapSideInput(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput value) {
        if (multimapSideInputBuilder_ == null) {
          if (typeCase_ == 2 &&
              type_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.getDefaultInstance()) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 2) {
            multimapSideInputBuilder_.mergeFrom(value);
          } else {
            multimapSideInputBuilder_.setMessage(value);
          }
        }
        typeCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
       */
      public Builder clearMultimapSideInput() {
        if (multimapSideInputBuilder_ == null) {
          if (typeCase_ == 2) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 2) {
            typeCase_ = 0;
            type_ = null;
          }
          multimapSideInputBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.Builder getMultimapSideInputBuilder() {
        return getMultimapSideInputFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInputOrBuilder getMultimapSideInputOrBuilder() {
        if ((typeCase_ == 2) && (multimapSideInputBuilder_ != null)) {
          return multimapSideInputBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 2) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput multimap_side_input = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInputOrBuilder> 
          getMultimapSideInputFieldBuilder() {
        if (multimapSideInputBuilder_ == null) {
          if (!(typeCase_ == 2)) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.getDefaultInstance();
          }
          multimapSideInputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInputOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapSideInput) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 2;
        onChanged();;
        return multimapSideInputBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserStateOrBuilder> bagUserStateBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
       * @return Whether the bagUserState field is set.
       */
      @java.lang.Override
      public boolean hasBagUserState() {
        return typeCase_ == 3;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
       * @return The bagUserState.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState getBagUserState() {
        if (bagUserStateBuilder_ == null) {
          if (typeCase_ == 3) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.getDefaultInstance();
        } else {
          if (typeCase_ == 3) {
            return bagUserStateBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
       */
      public Builder setBagUserState(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState value) {
        if (bagUserStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          bagUserStateBuilder_.setMessage(value);
        }
        typeCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
       */
      public Builder setBagUserState(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.Builder builderForValue) {
        if (bagUserStateBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          bagUserStateBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
       */
      public Builder mergeBagUserState(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState value) {
        if (bagUserStateBuilder_ == null) {
          if (typeCase_ == 3 &&
              type_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.getDefaultInstance()) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 3) {
            bagUserStateBuilder_.mergeFrom(value);
          } else {
            bagUserStateBuilder_.setMessage(value);
          }
        }
        typeCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
       */
      public Builder clearBagUserState() {
        if (bagUserStateBuilder_ == null) {
          if (typeCase_ == 3) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 3) {
            typeCase_ = 0;
            type_ = null;
          }
          bagUserStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.Builder getBagUserStateBuilder() {
        return getBagUserStateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserStateOrBuilder getBagUserStateOrBuilder() {
        if ((typeCase_ == 3) && (bagUserStateBuilder_ != null)) {
          return bagUserStateBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 3) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.BagUserState bag_user_state = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserStateOrBuilder> 
          getBagUserStateFieldBuilder() {
        if (bagUserStateBuilder_ == null) {
          if (!(typeCase_ == 3)) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.getDefaultInstance();
          }
          bagUserStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserStateOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.BagUserState) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 3;
        onChanged();;
        return bagUserStateBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInputOrBuilder> iterableSideInputBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
       * @return Whether the iterableSideInput field is set.
       */
      @java.lang.Override
      public boolean hasIterableSideInput() {
        return typeCase_ == 4;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
       * @return The iterableSideInput.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput getIterableSideInput() {
        if (iterableSideInputBuilder_ == null) {
          if (typeCase_ == 4) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.getDefaultInstance();
        } else {
          if (typeCase_ == 4) {
            return iterableSideInputBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
       */
      public Builder setIterableSideInput(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput value) {
        if (iterableSideInputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          iterableSideInputBuilder_.setMessage(value);
        }
        typeCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
       */
      public Builder setIterableSideInput(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.Builder builderForValue) {
        if (iterableSideInputBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          iterableSideInputBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
       */
      public Builder mergeIterableSideInput(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput value) {
        if (iterableSideInputBuilder_ == null) {
          if (typeCase_ == 4 &&
              type_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.getDefaultInstance()) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 4) {
            iterableSideInputBuilder_.mergeFrom(value);
          } else {
            iterableSideInputBuilder_.setMessage(value);
          }
        }
        typeCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
       */
      public Builder clearIterableSideInput() {
        if (iterableSideInputBuilder_ == null) {
          if (typeCase_ == 4) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 4) {
            typeCase_ = 0;
            type_ = null;
          }
          iterableSideInputBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.Builder getIterableSideInputBuilder() {
        return getIterableSideInputFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInputOrBuilder getIterableSideInputOrBuilder() {
        if ((typeCase_ == 4) && (iterableSideInputBuilder_ != null)) {
          return iterableSideInputBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 4) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.IterableSideInput iterable_side_input = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInputOrBuilder> 
          getIterableSideInputFieldBuilder() {
        if (iterableSideInputBuilder_ == null) {
          if (!(typeCase_ == 4)) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.getDefaultInstance();
          }
          iterableSideInputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInputOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.IterableSideInput) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 4;
        onChanged();;
        return iterableSideInputBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInputOrBuilder> multimapKeysSideInputBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
       * @return Whether the multimapKeysSideInput field is set.
       */
      @java.lang.Override
      public boolean hasMultimapKeysSideInput() {
        return typeCase_ == 5;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
       * @return The multimapKeysSideInput.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput getMultimapKeysSideInput() {
        if (multimapKeysSideInputBuilder_ == null) {
          if (typeCase_ == 5) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.getDefaultInstance();
        } else {
          if (typeCase_ == 5) {
            return multimapKeysSideInputBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
       */
      public Builder setMultimapKeysSideInput(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput value) {
        if (multimapKeysSideInputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          multimapKeysSideInputBuilder_.setMessage(value);
        }
        typeCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
       */
      public Builder setMultimapKeysSideInput(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.Builder builderForValue) {
        if (multimapKeysSideInputBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          multimapKeysSideInputBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
       */
      public Builder mergeMultimapKeysSideInput(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput value) {
        if (multimapKeysSideInputBuilder_ == null) {
          if (typeCase_ == 5 &&
              type_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.getDefaultInstance()) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 5) {
            multimapKeysSideInputBuilder_.mergeFrom(value);
          } else {
            multimapKeysSideInputBuilder_.setMessage(value);
          }
        }
        typeCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
       */
      public Builder clearMultimapKeysSideInput() {
        if (multimapKeysSideInputBuilder_ == null) {
          if (typeCase_ == 5) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 5) {
            typeCase_ = 0;
            type_ = null;
          }
          multimapKeysSideInputBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.Builder getMultimapKeysSideInputBuilder() {
        return getMultimapKeysSideInputFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInputOrBuilder getMultimapKeysSideInputOrBuilder() {
        if ((typeCase_ == 5) && (multimapKeysSideInputBuilder_ != null)) {
          return multimapKeysSideInputBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 5) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysSideInput multimap_keys_side_input = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInputOrBuilder> 
          getMultimapKeysSideInputFieldBuilder() {
        if (multimapKeysSideInputBuilder_ == null) {
          if (!(typeCase_ == 5)) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.getDefaultInstance();
          }
          multimapKeysSideInputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInputOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysSideInput) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 5;
        onChanged();;
        return multimapKeysSideInputBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserStateOrBuilder> multimapKeysUserStateBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
       * @return Whether the multimapKeysUserState field is set.
       */
      @java.lang.Override
      public boolean hasMultimapKeysUserState() {
        return typeCase_ == 6;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
       * @return The multimapKeysUserState.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState getMultimapKeysUserState() {
        if (multimapKeysUserStateBuilder_ == null) {
          if (typeCase_ == 6) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.getDefaultInstance();
        } else {
          if (typeCase_ == 6) {
            return multimapKeysUserStateBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
       */
      public Builder setMultimapKeysUserState(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState value) {
        if (multimapKeysUserStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          multimapKeysUserStateBuilder_.setMessage(value);
        }
        typeCase_ = 6;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
       */
      public Builder setMultimapKeysUserState(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.Builder builderForValue) {
        if (multimapKeysUserStateBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          multimapKeysUserStateBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 6;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
       */
      public Builder mergeMultimapKeysUserState(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState value) {
        if (multimapKeysUserStateBuilder_ == null) {
          if (typeCase_ == 6 &&
              type_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.getDefaultInstance()) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 6) {
            multimapKeysUserStateBuilder_.mergeFrom(value);
          } else {
            multimapKeysUserStateBuilder_.setMessage(value);
          }
        }
        typeCase_ = 6;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
       */
      public Builder clearMultimapKeysUserState() {
        if (multimapKeysUserStateBuilder_ == null) {
          if (typeCase_ == 6) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 6) {
            typeCase_ = 0;
            type_ = null;
          }
          multimapKeysUserStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.Builder getMultimapKeysUserStateBuilder() {
        return getMultimapKeysUserStateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserStateOrBuilder getMultimapKeysUserStateOrBuilder() {
        if ((typeCase_ == 6) && (multimapKeysUserStateBuilder_ != null)) {
          return multimapKeysUserStateBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 6) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapKeysUserState multimap_keys_user_state = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserStateOrBuilder> 
          getMultimapKeysUserStateFieldBuilder() {
        if (multimapKeysUserStateBuilder_ == null) {
          if (!(typeCase_ == 6)) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.getDefaultInstance();
          }
          multimapKeysUserStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserStateOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapKeysUserState) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 6;
        onChanged();;
        return multimapKeysUserStateBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserStateOrBuilder> multimapUserStateBuilder_;
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
       * @return Whether the multimapUserState field is set.
       */
      @java.lang.Override
      public boolean hasMultimapUserState() {
        return typeCase_ == 7;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
       * @return The multimapUserState.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState getMultimapUserState() {
        if (multimapUserStateBuilder_ == null) {
          if (typeCase_ == 7) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.getDefaultInstance();
        } else {
          if (typeCase_ == 7) {
            return multimapUserStateBuilder_.getMessage();
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
       */
      public Builder setMultimapUserState(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState value) {
        if (multimapUserStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          multimapUserStateBuilder_.setMessage(value);
        }
        typeCase_ = 7;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
       */
      public Builder setMultimapUserState(
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.Builder builderForValue) {
        if (multimapUserStateBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          multimapUserStateBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 7;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
       */
      public Builder mergeMultimapUserState(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState value) {
        if (multimapUserStateBuilder_ == null) {
          if (typeCase_ == 7 &&
              type_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.getDefaultInstance()) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.newBuilder((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 7) {
            multimapUserStateBuilder_.mergeFrom(value);
          } else {
            multimapUserStateBuilder_.setMessage(value);
          }
        }
        typeCase_ = 7;
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
       */
      public Builder clearMultimapUserState() {
        if (multimapUserStateBuilder_ == null) {
          if (typeCase_ == 7) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 7) {
            typeCase_ = 0;
            type_ = null;
          }
          multimapUserStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
       */
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.Builder getMultimapUserStateBuilder() {
        return getMultimapUserStateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserStateOrBuilder getMultimapUserStateOrBuilder() {
        if ((typeCase_ == 7) && (multimapUserStateBuilder_ != null)) {
          return multimapUserStateBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 7) {
            return (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_;
          }
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.beam.model.fn_execution.v1.StateKey.MultimapUserState multimap_user_state = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserStateOrBuilder> 
          getMultimapUserStateFieldBuilder() {
        if (multimapUserStateBuilder_ == null) {
          if (!(typeCase_ == 7)) {
            type_ = org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.getDefaultInstance();
          }
          multimapUserStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserStateOrBuilder>(
                  (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey.MultimapUserState) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 7;
        onChanged();;
        return multimapUserStateBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateKey)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateKey)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateKey>
        PARSER = new com.google.protobuf.AbstractParser<StateKey>() {
      @java.lang.Override
      public StateKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StateKey(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StateKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateGetRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateGetRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Optional) If specified, signals to the runner that the response
     * should resume from the following continuation token.
     * If unspecified, signals to the runner that the response should start
     * from the beginning of the logical continuable stream.
     * </pre>
     *
     * <code>bytes continuation_token = 1;</code>
     * @return The continuationToken.
     */
    com.google.protobuf.ByteString getContinuationToken();
  }
  /**
   * <pre>
   * A request to get state.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateGetRequest}
   */
  public static final class StateGetRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateGetRequest)
      StateGetRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateGetRequest.newBuilder() to construct.
    private StateGetRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateGetRequest() {
      continuationToken_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateGetRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StateGetRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {

              continuationToken_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.Builder.class);
    }

    public static final int CONTINUATION_TOKEN_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString continuationToken_;
    /**
     * <pre>
     * (Optional) If specified, signals to the runner that the response
     * should resume from the following continuation token.
     * If unspecified, signals to the runner that the response should start
     * from the beginning of the logical continuable stream.
     * </pre>
     *
     * <code>bytes continuation_token = 1;</code>
     * @return The continuationToken.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getContinuationToken() {
      return continuationToken_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!continuationToken_.isEmpty()) {
        output.writeBytes(1, continuationToken_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!continuationToken_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, continuationToken_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) obj;

      if (!getContinuationToken()
          .equals(other.getContinuationToken())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONTINUATION_TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getContinuationToken().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A request to get state.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateGetRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateGetRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        continuationToken_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest(this);
        result.continuationToken_ = continuationToken_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest.getDefaultInstance()) return this;
        if (other.getContinuationToken() != com.google.protobuf.ByteString.EMPTY) {
          setContinuationToken(other.getContinuationToken());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.ByteString continuationToken_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * (Optional) If specified, signals to the runner that the response
       * should resume from the following continuation token.
       * If unspecified, signals to the runner that the response should start
       * from the beginning of the logical continuable stream.
       * </pre>
       *
       * <code>bytes continuation_token = 1;</code>
       * @return The continuationToken.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getContinuationToken() {
        return continuationToken_;
      }
      /**
       * <pre>
       * (Optional) If specified, signals to the runner that the response
       * should resume from the following continuation token.
       * If unspecified, signals to the runner that the response should start
       * from the beginning of the logical continuable stream.
       * </pre>
       *
       * <code>bytes continuation_token = 1;</code>
       * @param value The continuationToken to set.
       * @return This builder for chaining.
       */
      public Builder setContinuationToken(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        continuationToken_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) If specified, signals to the runner that the response
       * should resume from the following continuation token.
       * If unspecified, signals to the runner that the response should start
       * from the beginning of the logical continuable stream.
       * </pre>
       *
       * <code>bytes continuation_token = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearContinuationToken() {
        
        continuationToken_ = getDefaultInstance().getContinuationToken();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateGetRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateGetRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateGetRequest>
        PARSER = new com.google.protobuf.AbstractParser<StateGetRequest>() {
      @java.lang.Override
      public StateGetRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StateGetRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StateGetRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateGetRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateGetResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateGetResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Optional) If specified, represents a token which can be used with the
     * state API to get the next chunk of this logical byte stream. The end of
     * the logical byte stream is signalled by this field being unset.
     * </pre>
     *
     * <code>bytes continuation_token = 1;</code>
     * @return The continuationToken.
     */
    com.google.protobuf.ByteString getContinuationToken();

    /**
     * <pre>
     * Represents a part of a logical byte stream. Elements within
     * the logical byte stream are encoded in the nested context and
     * concatenated together.
     * </pre>
     *
     * <code>bytes data = 2;</code>
     * @return The data.
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * <pre>
   * A response to get state representing a logical byte stream which can be
   * continued using the state API.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateGetResponse}
   */
  public static final class StateGetResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateGetResponse)
      StateGetResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateGetResponse.newBuilder() to construct.
    private StateGetResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateGetResponse() {
      continuationToken_ = com.google.protobuf.ByteString.EMPTY;
      data_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateGetResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StateGetResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {

              continuationToken_ = input.readBytes();
              break;
            }
            case 18: {

              data_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.Builder.class);
    }

    public static final int CONTINUATION_TOKEN_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString continuationToken_;
    /**
     * <pre>
     * (Optional) If specified, represents a token which can be used with the
     * state API to get the next chunk of this logical byte stream. The end of
     * the logical byte stream is signalled by this field being unset.
     * </pre>
     *
     * <code>bytes continuation_token = 1;</code>
     * @return The continuationToken.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getContinuationToken() {
      return continuationToken_;
    }

    public static final int DATA_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString data_;
    /**
     * <pre>
     * Represents a part of a logical byte stream. Elements within
     * the logical byte stream are encoded in the nested context and
     * concatenated together.
     * </pre>
     *
     * <code>bytes data = 2;</code>
     * @return The data.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!continuationToken_.isEmpty()) {
        output.writeBytes(1, continuationToken_);
      }
      if (!data_.isEmpty()) {
        output.writeBytes(2, data_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!continuationToken_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, continuationToken_);
      }
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, data_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) obj;

      if (!getContinuationToken()
          .equals(other.getContinuationToken())) return false;
      if (!getData()
          .equals(other.getData())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONTINUATION_TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getContinuationToken().hashCode();
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A response to get state representing a logical byte stream which can be
     * continued using the state API.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateGetResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateGetResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        continuationToken_ = com.google.protobuf.ByteString.EMPTY;

        data_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse(this);
        result.continuationToken_ = continuationToken_;
        result.data_ = data_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse.getDefaultInstance()) return this;
        if (other.getContinuationToken() != com.google.protobuf.ByteString.EMPTY) {
          setContinuationToken(other.getContinuationToken());
        }
        if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.ByteString continuationToken_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * (Optional) If specified, represents a token which can be used with the
       * state API to get the next chunk of this logical byte stream. The end of
       * the logical byte stream is signalled by this field being unset.
       * </pre>
       *
       * <code>bytes continuation_token = 1;</code>
       * @return The continuationToken.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getContinuationToken() {
        return continuationToken_;
      }
      /**
       * <pre>
       * (Optional) If specified, represents a token which can be used with the
       * state API to get the next chunk of this logical byte stream. The end of
       * the logical byte stream is signalled by this field being unset.
       * </pre>
       *
       * <code>bytes continuation_token = 1;</code>
       * @param value The continuationToken to set.
       * @return This builder for chaining.
       */
      public Builder setContinuationToken(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        continuationToken_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) If specified, represents a token which can be used with the
       * state API to get the next chunk of this logical byte stream. The end of
       * the logical byte stream is signalled by this field being unset.
       * </pre>
       *
       * <code>bytes continuation_token = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearContinuationToken() {
        
        continuationToken_ = getDefaultInstance().getContinuationToken();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Represents a part of a logical byte stream. Elements within
       * the logical byte stream are encoded in the nested context and
       * concatenated together.
       * </pre>
       *
       * <code>bytes data = 2;</code>
       * @return The data.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <pre>
       * Represents a part of a logical byte stream. Elements within
       * the logical byte stream are encoded in the nested context and
       * concatenated together.
       * </pre>
       *
       * <code>bytes data = 2;</code>
       * @param value The data to set.
       * @return This builder for chaining.
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Represents a part of a logical byte stream. Elements within
       * the logical byte stream are encoded in the nested context and
       * concatenated together.
       * </pre>
       *
       * <code>bytes data = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearData() {
        
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateGetResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateGetResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateGetResponse>
        PARSER = new com.google.protobuf.AbstractParser<StateGetResponse>() {
      @java.lang.Override
      public StateGetResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StateGetResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StateGetResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateGetResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateGetResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateAppendRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateAppendRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Represents a part of a logical byte stream. Elements within
     * the logical byte stream are encoded in the nested context and
     * multiple append requests are concatenated together.
     * </pre>
     *
     * <code>bytes data = 1;</code>
     * @return The data.
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * <pre>
   * A request to append state.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateAppendRequest}
   */
  public static final class StateAppendRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateAppendRequest)
      StateAppendRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateAppendRequest.newBuilder() to construct.
    private StateAppendRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateAppendRequest() {
      data_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateAppendRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StateAppendRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {

              data_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.Builder.class);
    }

    public static final int DATA_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString data_;
    /**
     * <pre>
     * Represents a part of a logical byte stream. Elements within
     * the logical byte stream are encoded in the nested context and
     * multiple append requests are concatenated together.
     * </pre>
     *
     * <code>bytes data = 1;</code>
     * @return The data.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!data_.isEmpty()) {
        output.writeBytes(1, data_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, data_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) obj;

      if (!getData()
          .equals(other.getData())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A request to append state.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateAppendRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateAppendRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        data_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest(this);
        result.data_ = data_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest.getDefaultInstance()) return this;
        if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Represents a part of a logical byte stream. Elements within
       * the logical byte stream are encoded in the nested context and
       * multiple append requests are concatenated together.
       * </pre>
       *
       * <code>bytes data = 1;</code>
       * @return The data.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <pre>
       * Represents a part of a logical byte stream. Elements within
       * the logical byte stream are encoded in the nested context and
       * multiple append requests are concatenated together.
       * </pre>
       *
       * <code>bytes data = 1;</code>
       * @param value The data to set.
       * @return This builder for chaining.
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Represents a part of a logical byte stream. Elements within
       * the logical byte stream are encoded in the nested context and
       * multiple append requests are concatenated together.
       * </pre>
       *
       * <code>bytes data = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearData() {
        
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateAppendRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateAppendRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateAppendRequest>
        PARSER = new com.google.protobuf.AbstractParser<StateAppendRequest>() {
      @java.lang.Override
      public StateAppendRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StateAppendRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StateAppendRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateAppendRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateAppendResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateAppendResponse)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * A response to append state.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateAppendResponse}
   */
  public static final class StateAppendResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateAppendResponse)
      StateAppendResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateAppendResponse.newBuilder() to construct.
    private StateAppendResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateAppendResponse() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateAppendResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StateAppendResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A response to append state.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateAppendResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateAppendResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateAppendResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateAppendResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateAppendResponse>
        PARSER = new com.google.protobuf.AbstractParser<StateAppendResponse>() {
      @java.lang.Override
      public StateAppendResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StateAppendResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StateAppendResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateAppendResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateAppendResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateClearRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateClearRequest)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * A request to clear state.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateClearRequest}
   */
  public static final class StateClearRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateClearRequest)
      StateClearRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateClearRequest.newBuilder() to construct.
    private StateClearRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateClearRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateClearRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StateClearRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A request to clear state.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateClearRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateClearRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateClearRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateClearRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateClearRequest>
        PARSER = new com.google.protobuf.AbstractParser<StateClearRequest>() {
      @java.lang.Override
      public StateClearRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StateClearRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StateClearRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateClearRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateClearResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StateClearResponse)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * A response to clear state.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateClearResponse}
   */
  public static final class StateClearResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StateClearResponse)
      StateClearResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateClearResponse.newBuilder() to construct.
    private StateClearResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateClearResponse() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateClearResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StateClearResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A response to clear state.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StateClearResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StateClearResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StateClearResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StateClearResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateClearResponse>
        PARSER = new com.google.protobuf.AbstractParser<StateClearResponse>() {
      @java.lang.Override
      public StateClearResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StateClearResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StateClearResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateClearResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StateClearResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LogEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.LogEntry)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) The severity of the log statement.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum severity = 1;</code>
     * @return The enum numeric value on the wire for severity.
     */
    int getSeverityValue();
    /**
     * <pre>
     * (Required) The severity of the log statement.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum severity = 1;</code>
     * @return The severity.
     */
    org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum getSeverity();

    /**
     * <pre>
     * (Required) The time at which this log statement occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 2;</code>
     * @return Whether the timestamp field is set.
     */
    boolean hasTimestamp();
    /**
     * <pre>
     * (Required) The time at which this log statement occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 2;</code>
     * @return The timestamp.
     */
    com.google.protobuf.Timestamp getTimestamp();
    /**
     * <pre>
     * (Required) The time at which this log statement occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 2;</code>
     */
    com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder();

    /**
     * <pre>
     * (Required) A human readable message.
     * </pre>
     *
     * <code>string message = 3;</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <pre>
     * (Required) A human readable message.
     * </pre>
     *
     * <code>string message = 3;</code>
     * @return The bytes for message.
     */
    com.google.protobuf.ByteString
        getMessageBytes();

    /**
     * <pre>
     * (Optional) An optional trace of the functions involved. For example, in
     * Java this can include multiple causes and multiple suppressed exceptions.
     * </pre>
     *
     * <code>string trace = 4;</code>
     * @return The trace.
     */
    java.lang.String getTrace();
    /**
     * <pre>
     * (Optional) An optional trace of the functions involved. For example, in
     * Java this can include multiple causes and multiple suppressed exceptions.
     * </pre>
     *
     * <code>string trace = 4;</code>
     * @return The bytes for trace.
     */
    com.google.protobuf.ByteString
        getTraceBytes();

    /**
     * <pre>
     * (Optional) A reference to the instruction this log statement is associated
     * with.
     * </pre>
     *
     * <code>string instruction_id = 5;</code>
     * @return The instructionId.
     */
    java.lang.String getInstructionId();
    /**
     * <pre>
     * (Optional) A reference to the instruction this log statement is associated
     * with.
     * </pre>
     *
     * <code>string instruction_id = 5;</code>
     * @return The bytes for instructionId.
     */
    com.google.protobuf.ByteString
        getInstructionIdBytes();

    /**
     * <pre>
     * (Optional) A reference to the transform this log statement is
     * associated with.
     * </pre>
     *
     * <code>string transform_id = 6;</code>
     * @return The transformId.
     */
    java.lang.String getTransformId();
    /**
     * <pre>
     * (Optional) A reference to the transform this log statement is
     * associated with.
     * </pre>
     *
     * <code>string transform_id = 6;</code>
     * @return The bytes for transformId.
     */
    com.google.protobuf.ByteString
        getTransformIdBytes();

    /**
     * <pre>
     * (Optional) Human-readable name of the function or method being invoked,
     * with optional context such as the class or package name. The format can
     * vary by language. For example:
     *   qual.if.ied.Class.method (Java)
     *   dir/package.func (Go)
     *   module.function (Python)
     *   file.cc:382 (C++)
     * </pre>
     *
     * <code>string log_location = 7;</code>
     * @return The logLocation.
     */
    java.lang.String getLogLocation();
    /**
     * <pre>
     * (Optional) Human-readable name of the function or method being invoked,
     * with optional context such as the class or package name. The format can
     * vary by language. For example:
     *   qual.if.ied.Class.method (Java)
     *   dir/package.func (Go)
     *   module.function (Python)
     *   file.cc:382 (C++)
     * </pre>
     *
     * <code>string log_location = 7;</code>
     * @return The bytes for logLocation.
     */
    com.google.protobuf.ByteString
        getLogLocationBytes();

    /**
     * <pre>
     * (Optional) The name of the thread this log statement is associated with.
     * </pre>
     *
     * <code>string thread = 8;</code>
     * @return The thread.
     */
    java.lang.String getThread();
    /**
     * <pre>
     * (Optional) The name of the thread this log statement is associated with.
     * </pre>
     *
     * <code>string thread = 8;</code>
     * @return The bytes for thread.
     */
    com.google.protobuf.ByteString
        getThreadBytes();
  }
  /**
   * <pre>
   * A log entry
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.LogEntry}
   */
  public static final class LogEntry extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.LogEntry)
      LogEntryOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LogEntry.newBuilder() to construct.
    private LogEntry(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LogEntry() {
      severity_ = 0;
      message_ = "";
      trace_ = "";
      instructionId_ = "";
      transformId_ = "";
      logLocation_ = "";
      thread_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LogEntry();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LogEntry(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              severity_ = rawValue;
              break;
            }
            case 18: {
              com.google.protobuf.Timestamp.Builder subBuilder = null;
              if (timestamp_ != null) {
                subBuilder = timestamp_.toBuilder();
              }
              timestamp_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timestamp_);
                timestamp_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              message_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              trace_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              instructionId_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              transformId_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              logLocation_ = s;
              break;
            }
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();

              thread_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder.class);
    }

    public interface ListOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.LogEntry.List)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry> 
          getLogEntriesList();
      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry getLogEntries(int index);
      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      int getLogEntriesCount();
      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder> 
          getLogEntriesOrBuilderList();
      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder getLogEntriesOrBuilder(
          int index);
    }
    /**
     * <pre>
     * A list of log entries, enables buffering and batching of multiple
     * log messages using the logging API.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.LogEntry.List}
     */
    public static final class List extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.LogEntry.List)
        ListOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use List.newBuilder() to construct.
      private List(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private List() {
        logEntries_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new List();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private List(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  logEntries_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry>();
                  mutable_bitField0_ |= 0x00000001;
                }
                logEntries_.add(
                    input.readMessage(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.parser(), extensionRegistry));
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) != 0)) {
            logEntries_ = java.util.Collections.unmodifiableList(logEntries_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List.Builder.class);
      }

      public static final int LOG_ENTRIES_FIELD_NUMBER = 1;
      private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry> logEntries_;
      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry> getLogEntriesList() {
        return logEntries_;
      }
      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      @java.lang.Override
      public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder> 
          getLogEntriesOrBuilderList() {
        return logEntries_;
      }
      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      @java.lang.Override
      public int getLogEntriesCount() {
        return logEntries_.size();
      }
      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry getLogEntries(int index) {
        return logEntries_.get(index);
      }
      /**
       * <pre>
       * (Required) One or or more log messages.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder getLogEntriesOrBuilder(
          int index) {
        return logEntries_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < logEntries_.size(); i++) {
          output.writeMessage(1, logEntries_.get(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < logEntries_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, logEntries_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List) obj;

        if (!getLogEntriesList()
            .equals(other.getLogEntriesList())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getLogEntriesCount() > 0) {
          hash = (37 * hash) + LOG_ENTRIES_FIELD_NUMBER;
          hash = (53 * hash) + getLogEntriesList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * A list of log entries, enables buffering and batching of multiple
       * log messages using the logging API.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.LogEntry.List}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.LogEntry.List)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.ListOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getLogEntriesFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (logEntriesBuilder_ == null) {
            logEntries_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            logEntriesBuilder_.clear();
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List(this);
          int from_bitField0_ = bitField0_;
          if (logEntriesBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              logEntries_ = java.util.Collections.unmodifiableList(logEntries_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.logEntries_ = logEntries_;
          } else {
            result.logEntries_ = logEntriesBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List.getDefaultInstance()) return this;
          if (logEntriesBuilder_ == null) {
            if (!other.logEntries_.isEmpty()) {
              if (logEntries_.isEmpty()) {
                logEntries_ = other.logEntries_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureLogEntriesIsMutable();
                logEntries_.addAll(other.logEntries_);
              }
              onChanged();
            }
          } else {
            if (!other.logEntries_.isEmpty()) {
              if (logEntriesBuilder_.isEmpty()) {
                logEntriesBuilder_.dispose();
                logEntriesBuilder_ = null;
                logEntries_ = other.logEntries_;
                bitField0_ = (bitField0_ & ~0x00000001);
                logEntriesBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getLogEntriesFieldBuilder() : null;
              } else {
                logEntriesBuilder_.addAllMessages(other.logEntries_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry> logEntries_ =
          java.util.Collections.emptyList();
        private void ensureLogEntriesIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            logEntries_ = new java.util.ArrayList<org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry>(logEntries_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder> logEntriesBuilder_;

        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry> getLogEntriesList() {
          if (logEntriesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(logEntries_);
          } else {
            return logEntriesBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public int getLogEntriesCount() {
          if (logEntriesBuilder_ == null) {
            return logEntries_.size();
          } else {
            return logEntriesBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry getLogEntries(int index) {
          if (logEntriesBuilder_ == null) {
            return logEntries_.get(index);
          } else {
            return logEntriesBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public Builder setLogEntries(
            int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry value) {
          if (logEntriesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureLogEntriesIsMutable();
            logEntries_.set(index, value);
            onChanged();
          } else {
            logEntriesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public Builder setLogEntries(
            int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder builderForValue) {
          if (logEntriesBuilder_ == null) {
            ensureLogEntriesIsMutable();
            logEntries_.set(index, builderForValue.build());
            onChanged();
          } else {
            logEntriesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public Builder addLogEntries(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry value) {
          if (logEntriesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureLogEntriesIsMutable();
            logEntries_.add(value);
            onChanged();
          } else {
            logEntriesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public Builder addLogEntries(
            int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry value) {
          if (logEntriesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureLogEntriesIsMutable();
            logEntries_.add(index, value);
            onChanged();
          } else {
            logEntriesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public Builder addLogEntries(
            org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder builderForValue) {
          if (logEntriesBuilder_ == null) {
            ensureLogEntriesIsMutable();
            logEntries_.add(builderForValue.build());
            onChanged();
          } else {
            logEntriesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public Builder addLogEntries(
            int index, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder builderForValue) {
          if (logEntriesBuilder_ == null) {
            ensureLogEntriesIsMutable();
            logEntries_.add(index, builderForValue.build());
            onChanged();
          } else {
            logEntriesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public Builder addAllLogEntries(
            java.lang.Iterable<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry> values) {
          if (logEntriesBuilder_ == null) {
            ensureLogEntriesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, logEntries_);
            onChanged();
          } else {
            logEntriesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public Builder clearLogEntries() {
          if (logEntriesBuilder_ == null) {
            logEntries_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            logEntriesBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public Builder removeLogEntries(int index) {
          if (logEntriesBuilder_ == null) {
            ensureLogEntriesIsMutable();
            logEntries_.remove(index);
            onChanged();
          } else {
            logEntriesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder getLogEntriesBuilder(
            int index) {
          return getLogEntriesFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder getLogEntriesOrBuilder(
            int index) {
          if (logEntriesBuilder_ == null) {
            return logEntries_.get(index);  } else {
            return logEntriesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public java.util.List<? extends org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder> 
             getLogEntriesOrBuilderList() {
          if (logEntriesBuilder_ != null) {
            return logEntriesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(logEntries_);
          }
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder addLogEntriesBuilder() {
          return getLogEntriesFieldBuilder().addBuilder(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.getDefaultInstance());
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder addLogEntriesBuilder(
            int index) {
          return getLogEntriesFieldBuilder().addBuilder(
              index, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.getDefaultInstance());
        }
        /**
         * <pre>
         * (Required) One or or more log messages.
         * </pre>
         *
         * <code>repeated .org.apache.beam.model.fn_execution.v1.LogEntry log_entries = 1;</code>
         */
        public java.util.List<org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder> 
             getLogEntriesBuilderList() {
          return getLogEntriesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder> 
            getLogEntriesFieldBuilder() {
          if (logEntriesBuilder_ == null) {
            logEntriesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder>(
                    logEntries_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            logEntries_ = null;
          }
          return logEntriesBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.LogEntry.List)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.LogEntry.List)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<List>
          PARSER = new com.google.protobuf.AbstractParser<List>() {
        @java.lang.Override
        public List parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new List(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<List> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<List> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.List getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface SeverityOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.LogEntry.Severity)
        com.google.protobuf.MessageOrBuilder {
    }
    /**
     * <pre>
     * The severity of the event described in a log entry, expressed as one of the
     * severity levels listed below. For your reference, the levels are
     * assigned the listed numeric values. The effect of using numeric values
     * other than those listed is undefined.
     * If you are writing log entries, you should map other severity encodings to
     * one of these standard levels. For example, you might map all of
     * Java's FINE, FINER, and FINEST levels to `Severity.DEBUG`.
     * This list is intentionally not comprehensive; the intent is to provide a
     * common set of "good enough" severity levels so that logging front ends
     * can provide filtering and searching across log types. Users of the API are
     * free not to use all severity levels in their log messages.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.LogEntry.Severity}
     */
    public static final class Severity extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.LogEntry.Severity)
        SeverityOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Severity.newBuilder() to construct.
      private Severity(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Severity() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Severity();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Severity(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Builder.class);
      }

      /**
       * Protobuf enum {@code org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum}
       */
      public enum Enum
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Unspecified level information. Will be logged at the TRACE level.
         * </pre>
         *
         * <code>UNSPECIFIED = 0;</code>
         */
        UNSPECIFIED(0),
        /**
         * <code>TRACE = 1;</code>
         */
        TRACE(1),
        /**
         * <pre>
         * Debugging information.
         * </pre>
         *
         * <code>DEBUG = 2;</code>
         */
        DEBUG(2),
        /**
         * <pre>
         * Normal events.
         * </pre>
         *
         * <code>INFO = 3;</code>
         */
        INFO(3),
        /**
         * <pre>
         * Normal but significant events, such as start up, shut down, or
         * configuration.
         * </pre>
         *
         * <code>NOTICE = 4;</code>
         */
        NOTICE(4),
        /**
         * <pre>
         * Warning events might cause problems.
         * </pre>
         *
         * <code>WARN = 5;</code>
         */
        WARN(5),
        /**
         * <pre>
         * Error events are likely to cause problems.
         * </pre>
         *
         * <code>ERROR = 6;</code>
         */
        ERROR(6),
        /**
         * <pre>
         * Critical events cause severe problems or brief outages and may
         * indicate that a person must take action.
         * </pre>
         *
         * <code>CRITICAL = 7;</code>
         */
        CRITICAL(7),
        UNRECOGNIZED(-1),
        ;

        /**
         * <pre>
         * Unspecified level information. Will be logged at the TRACE level.
         * </pre>
         *
         * <code>UNSPECIFIED = 0;</code>
         */
        public static final int UNSPECIFIED_VALUE = 0;
        /**
         * <code>TRACE = 1;</code>
         */
        public static final int TRACE_VALUE = 1;
        /**
         * <pre>
         * Debugging information.
         * </pre>
         *
         * <code>DEBUG = 2;</code>
         */
        public static final int DEBUG_VALUE = 2;
        /**
         * <pre>
         * Normal events.
         * </pre>
         *
         * <code>INFO = 3;</code>
         */
        public static final int INFO_VALUE = 3;
        /**
         * <pre>
         * Normal but significant events, such as start up, shut down, or
         * configuration.
         * </pre>
         *
         * <code>NOTICE = 4;</code>
         */
        public static final int NOTICE_VALUE = 4;
        /**
         * <pre>
         * Warning events might cause problems.
         * </pre>
         *
         * <code>WARN = 5;</code>
         */
        public static final int WARN_VALUE = 5;
        /**
         * <pre>
         * Error events are likely to cause problems.
         * </pre>
         *
         * <code>ERROR = 6;</code>
         */
        public static final int ERROR_VALUE = 6;
        /**
         * <pre>
         * Critical events cause severe problems or brief outages and may
         * indicate that a person must take action.
         * </pre>
         *
         * <code>CRITICAL = 7;</code>
         */
        public static final int CRITICAL_VALUE = 7;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Enum valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static Enum forNumber(int value) {
          switch (value) {
            case 0: return UNSPECIFIED;
            case 1: return TRACE;
            case 2: return DEBUG;
            case 3: return INFO;
            case 4: return NOTICE;
            case 5: return WARN;
            case 6: return ERROR;
            case 7: return CRITICAL;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Enum>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Enum> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Enum>() {
                public Enum findValueByNumber(int number) {
                  return Enum.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException(
                "Can't get the descriptor of an unrecognized enum value.");
          }
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.getDescriptor().getEnumTypes().get(0);
        }

        private static final Enum[] VALUES = values();

        public static Enum valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Enum(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum)
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity)) {
          return super.equals(obj);
        }
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity) obj;

        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * The severity of the event described in a log entry, expressed as one of the
       * severity levels listed below. For your reference, the levels are
       * assigned the listed numeric values. The effect of using numeric values
       * other than those listed is undefined.
       * If you are writing log entries, you should map other severity encodings to
       * one of these standard levels. For example, you might map all of
       * Java's FINE, FINER, and FINEST levels to `Severity.DEBUG`.
       * This list is intentionally not comprehensive; the intent is to provide a
       * common set of "good enough" severity levels so that logging front ends
       * can provide filtering and searching across log types. Users of the API are
       * free not to use all severity levels in their log messages.
       * </pre>
       *
       * Protobuf type {@code org.apache.beam.model.fn_execution.v1.LogEntry.Severity}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.LogEntry.Severity)
          org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.SeverityOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Builder.class);
        }

        // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_descriptor;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity getDefaultInstanceForType() {
          return org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.getDefaultInstance();
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity build() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity buildPartial() {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity(this);
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity) {
            return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity other) {
          if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.getDefaultInstance()) return this;
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.LogEntry.Severity)
      }

      // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.LogEntry.Severity)
      private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity();
      }

      public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Severity>
          PARSER = new com.google.protobuf.AbstractParser<Severity>() {
        @java.lang.Override
        public Severity parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Severity(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Severity> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Severity> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int SEVERITY_FIELD_NUMBER = 1;
    private int severity_;
    /**
     * <pre>
     * (Required) The severity of the log statement.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum severity = 1;</code>
     * @return The enum numeric value on the wire for severity.
     */
    @java.lang.Override public int getSeverityValue() {
      return severity_;
    }
    /**
     * <pre>
     * (Required) The severity of the log statement.
     * </pre>
     *
     * <code>.org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum severity = 1;</code>
     * @return The severity.
     */
    @java.lang.Override public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum getSeverity() {
      @SuppressWarnings("deprecation")
      org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum result = org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum.valueOf(severity_);
      return result == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum.UNRECOGNIZED : result;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 2;
    private com.google.protobuf.Timestamp timestamp_;
    /**
     * <pre>
     * (Required) The time at which this log statement occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 2;</code>
     * @return Whether the timestamp field is set.
     */
    @java.lang.Override
    public boolean hasTimestamp() {
      return timestamp_ != null;
    }
    /**
     * <pre>
     * (Required) The time at which this log statement occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 2;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getTimestamp() {
      return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
    }
    /**
     * <pre>
     * (Required) The time at which this log statement occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder() {
      return getTimestamp();
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private volatile java.lang.Object message_;
    /**
     * <pre>
     * (Required) A human readable message.
     * </pre>
     *
     * <code>string message = 3;</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        message_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) A human readable message.
     * </pre>
     *
     * <code>string message = 3;</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRACE_FIELD_NUMBER = 4;
    private volatile java.lang.Object trace_;
    /**
     * <pre>
     * (Optional) An optional trace of the functions involved. For example, in
     * Java this can include multiple causes and multiple suppressed exceptions.
     * </pre>
     *
     * <code>string trace = 4;</code>
     * @return The trace.
     */
    @java.lang.Override
    public java.lang.String getTrace() {
      java.lang.Object ref = trace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        trace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) An optional trace of the functions involved. For example, in
     * Java this can include multiple causes and multiple suppressed exceptions.
     * </pre>
     *
     * <code>string trace = 4;</code>
     * @return The bytes for trace.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTraceBytes() {
      java.lang.Object ref = trace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        trace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INSTRUCTION_ID_FIELD_NUMBER = 5;
    private volatile java.lang.Object instructionId_;
    /**
     * <pre>
     * (Optional) A reference to the instruction this log statement is associated
     * with.
     * </pre>
     *
     * <code>string instruction_id = 5;</code>
     * @return The instructionId.
     */
    @java.lang.Override
    public java.lang.String getInstructionId() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instructionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) A reference to the instruction this log statement is associated
     * with.
     * </pre>
     *
     * <code>string instruction_id = 5;</code>
     * @return The bytes for instructionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInstructionIdBytes() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instructionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRANSFORM_ID_FIELD_NUMBER = 6;
    private volatile java.lang.Object transformId_;
    /**
     * <pre>
     * (Optional) A reference to the transform this log statement is
     * associated with.
     * </pre>
     *
     * <code>string transform_id = 6;</code>
     * @return The transformId.
     */
    @java.lang.Override
    public java.lang.String getTransformId() {
      java.lang.Object ref = transformId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transformId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) A reference to the transform this log statement is
     * associated with.
     * </pre>
     *
     * <code>string transform_id = 6;</code>
     * @return The bytes for transformId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTransformIdBytes() {
      java.lang.Object ref = transformId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transformId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOG_LOCATION_FIELD_NUMBER = 7;
    private volatile java.lang.Object logLocation_;
    /**
     * <pre>
     * (Optional) Human-readable name of the function or method being invoked,
     * with optional context such as the class or package name. The format can
     * vary by language. For example:
     *   qual.if.ied.Class.method (Java)
     *   dir/package.func (Go)
     *   module.function (Python)
     *   file.cc:382 (C++)
     * </pre>
     *
     * <code>string log_location = 7;</code>
     * @return The logLocation.
     */
    @java.lang.Override
    public java.lang.String getLogLocation() {
      java.lang.Object ref = logLocation_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        logLocation_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) Human-readable name of the function or method being invoked,
     * with optional context such as the class or package name. The format can
     * vary by language. For example:
     *   qual.if.ied.Class.method (Java)
     *   dir/package.func (Go)
     *   module.function (Python)
     *   file.cc:382 (C++)
     * </pre>
     *
     * <code>string log_location = 7;</code>
     * @return The bytes for logLocation.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLogLocationBytes() {
      java.lang.Object ref = logLocation_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        logLocation_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int THREAD_FIELD_NUMBER = 8;
    private volatile java.lang.Object thread_;
    /**
     * <pre>
     * (Optional) The name of the thread this log statement is associated with.
     * </pre>
     *
     * <code>string thread = 8;</code>
     * @return The thread.
     */
    @java.lang.Override
    public java.lang.String getThread() {
      java.lang.Object ref = thread_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        thread_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) The name of the thread this log statement is associated with.
     * </pre>
     *
     * <code>string thread = 8;</code>
     * @return The bytes for thread.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getThreadBytes() {
      java.lang.Object ref = thread_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        thread_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (severity_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum.UNSPECIFIED.getNumber()) {
        output.writeEnum(1, severity_);
      }
      if (timestamp_ != null) {
        output.writeMessage(2, getTimestamp());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(message_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, message_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(trace_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, trace_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, instructionId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, transformId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(logLocation_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, logLocation_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(thread_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, thread_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (severity_ != org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum.UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, severity_);
      }
      if (timestamp_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTimestamp());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(message_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, message_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(trace_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, trace_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(instructionId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, instructionId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transformId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, transformId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(logLocation_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, logLocation_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(thread_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, thread_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry) obj;

      if (severity_ != other.severity_) return false;
      if (hasTimestamp() != other.hasTimestamp()) return false;
      if (hasTimestamp()) {
        if (!getTimestamp()
            .equals(other.getTimestamp())) return false;
      }
      if (!getMessage()
          .equals(other.getMessage())) return false;
      if (!getTrace()
          .equals(other.getTrace())) return false;
      if (!getInstructionId()
          .equals(other.getInstructionId())) return false;
      if (!getTransformId()
          .equals(other.getTransformId())) return false;
      if (!getLogLocation()
          .equals(other.getLogLocation())) return false;
      if (!getThread()
          .equals(other.getThread())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SEVERITY_FIELD_NUMBER;
      hash = (53 * hash) + severity_;
      if (hasTimestamp()) {
        hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getTimestamp().hashCode();
      }
      hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getMessage().hashCode();
      hash = (37 * hash) + TRACE_FIELD_NUMBER;
      hash = (53 * hash) + getTrace().hashCode();
      hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInstructionId().hashCode();
      hash = (37 * hash) + TRANSFORM_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTransformId().hashCode();
      hash = (37 * hash) + LOG_LOCATION_FIELD_NUMBER;
      hash = (53 * hash) + getLogLocation().hashCode();
      hash = (37 * hash) + THREAD_FIELD_NUMBER;
      hash = (53 * hash) + getThread().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A log entry
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.LogEntry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.LogEntry)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        severity_ = 0;

        if (timestampBuilder_ == null) {
          timestamp_ = null;
        } else {
          timestamp_ = null;
          timestampBuilder_ = null;
        }
        message_ = "";

        trace_ = "";

        instructionId_ = "";

        transformId_ = "";

        logLocation_ = "";

        thread_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry(this);
        result.severity_ = severity_;
        if (timestampBuilder_ == null) {
          result.timestamp_ = timestamp_;
        } else {
          result.timestamp_ = timestampBuilder_.build();
        }
        result.message_ = message_;
        result.trace_ = trace_;
        result.instructionId_ = instructionId_;
        result.transformId_ = transformId_;
        result.logLocation_ = logLocation_;
        result.thread_ = thread_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.getDefaultInstance()) return this;
        if (other.severity_ != 0) {
          setSeverityValue(other.getSeverityValue());
        }
        if (other.hasTimestamp()) {
          mergeTimestamp(other.getTimestamp());
        }
        if (!other.getMessage().isEmpty()) {
          message_ = other.message_;
          onChanged();
        }
        if (!other.getTrace().isEmpty()) {
          trace_ = other.trace_;
          onChanged();
        }
        if (!other.getInstructionId().isEmpty()) {
          instructionId_ = other.instructionId_;
          onChanged();
        }
        if (!other.getTransformId().isEmpty()) {
          transformId_ = other.transformId_;
          onChanged();
        }
        if (!other.getLogLocation().isEmpty()) {
          logLocation_ = other.logLocation_;
          onChanged();
        }
        if (!other.getThread().isEmpty()) {
          thread_ = other.thread_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int severity_ = 0;
      /**
       * <pre>
       * (Required) The severity of the log statement.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum severity = 1;</code>
       * @return The enum numeric value on the wire for severity.
       */
      @java.lang.Override public int getSeverityValue() {
        return severity_;
      }
      /**
       * <pre>
       * (Required) The severity of the log statement.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum severity = 1;</code>
       * @param value The enum numeric value on the wire for severity to set.
       * @return This builder for chaining.
       */
      public Builder setSeverityValue(int value) {
        
        severity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The severity of the log statement.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum severity = 1;</code>
       * @return The severity.
       */
      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum getSeverity() {
        @SuppressWarnings("deprecation")
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum result = org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum.valueOf(severity_);
        return result == null ? org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * (Required) The severity of the log statement.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum severity = 1;</code>
       * @param value The severity to set.
       * @return This builder for chaining.
       */
      public Builder setSeverity(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry.Severity.Enum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        severity_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The severity of the log statement.
       * </pre>
       *
       * <code>.org.apache.beam.model.fn_execution.v1.LogEntry.Severity.Enum severity = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeverity() {
        
        severity_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Timestamp timestamp_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> timestampBuilder_;
      /**
       * <pre>
       * (Required) The time at which this log statement occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 2;</code>
       * @return Whether the timestamp field is set.
       */
      public boolean hasTimestamp() {
        return timestampBuilder_ != null || timestamp_ != null;
      }
      /**
       * <pre>
       * (Required) The time at which this log statement occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 2;</code>
       * @return The timestamp.
       */
      public com.google.protobuf.Timestamp getTimestamp() {
        if (timestampBuilder_ == null) {
          return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
        } else {
          return timestampBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * (Required) The time at which this log statement occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 2;</code>
       */
      public Builder setTimestamp(com.google.protobuf.Timestamp value) {
        if (timestampBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timestamp_ = value;
          onChanged();
        } else {
          timestampBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The time at which this log statement occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 2;</code>
       */
      public Builder setTimestamp(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (timestampBuilder_ == null) {
          timestamp_ = builderForValue.build();
          onChanged();
        } else {
          timestampBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The time at which this log statement occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 2;</code>
       */
      public Builder mergeTimestamp(com.google.protobuf.Timestamp value) {
        if (timestampBuilder_ == null) {
          if (timestamp_ != null) {
            timestamp_ =
              com.google.protobuf.Timestamp.newBuilder(timestamp_).mergeFrom(value).buildPartial();
          } else {
            timestamp_ = value;
          }
          onChanged();
        } else {
          timestampBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The time at which this log statement occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 2;</code>
       */
      public Builder clearTimestamp() {
        if (timestampBuilder_ == null) {
          timestamp_ = null;
          onChanged();
        } else {
          timestamp_ = null;
          timestampBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * (Required) The time at which this log statement occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 2;</code>
       */
      public com.google.protobuf.Timestamp.Builder getTimestampBuilder() {
        
        onChanged();
        return getTimestampFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * (Required) The time at which this log statement occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 2;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder() {
        if (timestampBuilder_ != null) {
          return timestampBuilder_.getMessageOrBuilder();
        } else {
          return timestamp_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
        }
      }
      /**
       * <pre>
       * (Required) The time at which this log statement occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          getTimestampFieldBuilder() {
        if (timestampBuilder_ == null) {
          timestampBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getTimestamp(),
                  getParentForChildren(),
                  isClean());
          timestamp_ = null;
        }
        return timestampBuilder_;
      }

      private java.lang.Object message_ = "";
      /**
       * <pre>
       * (Required) A human readable message.
       * </pre>
       *
       * <code>string message = 3;</code>
       * @return The message.
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) A human readable message.
       * </pre>
       *
       * <code>string message = 3;</code>
       * @return The bytes for message.
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) A human readable message.
       * </pre>
       *
       * <code>string message = 3;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A human readable message.
       * </pre>
       *
       * <code>string message = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) A human readable message.
       * </pre>
       *
       * <code>string message = 3;</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        message_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object trace_ = "";
      /**
       * <pre>
       * (Optional) An optional trace of the functions involved. For example, in
       * Java this can include multiple causes and multiple suppressed exceptions.
       * </pre>
       *
       * <code>string trace = 4;</code>
       * @return The trace.
       */
      public java.lang.String getTrace() {
        java.lang.Object ref = trace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          trace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) An optional trace of the functions involved. For example, in
       * Java this can include multiple causes and multiple suppressed exceptions.
       * </pre>
       *
       * <code>string trace = 4;</code>
       * @return The bytes for trace.
       */
      public com.google.protobuf.ByteString
          getTraceBytes() {
        java.lang.Object ref = trace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          trace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) An optional trace of the functions involved. For example, in
       * Java this can include multiple causes and multiple suppressed exceptions.
       * </pre>
       *
       * <code>string trace = 4;</code>
       * @param value The trace to set.
       * @return This builder for chaining.
       */
      public Builder setTrace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        trace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) An optional trace of the functions involved. For example, in
       * Java this can include multiple causes and multiple suppressed exceptions.
       * </pre>
       *
       * <code>string trace = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTrace() {
        
        trace_ = getDefaultInstance().getTrace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) An optional trace of the functions involved. For example, in
       * Java this can include multiple causes and multiple suppressed exceptions.
       * </pre>
       *
       * <code>string trace = 4;</code>
       * @param value The bytes for trace to set.
       * @return This builder for chaining.
       */
      public Builder setTraceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        trace_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object instructionId_ = "";
      /**
       * <pre>
       * (Optional) A reference to the instruction this log statement is associated
       * with.
       * </pre>
       *
       * <code>string instruction_id = 5;</code>
       * @return The instructionId.
       */
      public java.lang.String getInstructionId() {
        java.lang.Object ref = instructionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instructionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) A reference to the instruction this log statement is associated
       * with.
       * </pre>
       *
       * <code>string instruction_id = 5;</code>
       * @return The bytes for instructionId.
       */
      public com.google.protobuf.ByteString
          getInstructionIdBytes() {
        java.lang.Object ref = instructionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instructionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) A reference to the instruction this log statement is associated
       * with.
       * </pre>
       *
       * <code>string instruction_id = 5;</code>
       * @param value The instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instructionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) A reference to the instruction this log statement is associated
       * with.
       * </pre>
       *
       * <code>string instruction_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearInstructionId() {
        
        instructionId_ = getDefaultInstance().getInstructionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) A reference to the instruction this log statement is associated
       * with.
       * </pre>
       *
       * <code>string instruction_id = 5;</code>
       * @param value The bytes for instructionId to set.
       * @return This builder for chaining.
       */
      public Builder setInstructionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instructionId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object transformId_ = "";
      /**
       * <pre>
       * (Optional) A reference to the transform this log statement is
       * associated with.
       * </pre>
       *
       * <code>string transform_id = 6;</code>
       * @return The transformId.
       */
      public java.lang.String getTransformId() {
        java.lang.Object ref = transformId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transformId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) A reference to the transform this log statement is
       * associated with.
       * </pre>
       *
       * <code>string transform_id = 6;</code>
       * @return The bytes for transformId.
       */
      public com.google.protobuf.ByteString
          getTransformIdBytes() {
        java.lang.Object ref = transformId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transformId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) A reference to the transform this log statement is
       * associated with.
       * </pre>
       *
       * <code>string transform_id = 6;</code>
       * @param value The transformId to set.
       * @return This builder for chaining.
       */
      public Builder setTransformId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        transformId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) A reference to the transform this log statement is
       * associated with.
       * </pre>
       *
       * <code>string transform_id = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransformId() {
        
        transformId_ = getDefaultInstance().getTransformId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) A reference to the transform this log statement is
       * associated with.
       * </pre>
       *
       * <code>string transform_id = 6;</code>
       * @param value The bytes for transformId to set.
       * @return This builder for chaining.
       */
      public Builder setTransformIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        transformId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object logLocation_ = "";
      /**
       * <pre>
       * (Optional) Human-readable name of the function or method being invoked,
       * with optional context such as the class or package name. The format can
       * vary by language. For example:
       *   qual.if.ied.Class.method (Java)
       *   dir/package.func (Go)
       *   module.function (Python)
       *   file.cc:382 (C++)
       * </pre>
       *
       * <code>string log_location = 7;</code>
       * @return The logLocation.
       */
      public java.lang.String getLogLocation() {
        java.lang.Object ref = logLocation_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          logLocation_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Human-readable name of the function or method being invoked,
       * with optional context such as the class or package name. The format can
       * vary by language. For example:
       *   qual.if.ied.Class.method (Java)
       *   dir/package.func (Go)
       *   module.function (Python)
       *   file.cc:382 (C++)
       * </pre>
       *
       * <code>string log_location = 7;</code>
       * @return The bytes for logLocation.
       */
      public com.google.protobuf.ByteString
          getLogLocationBytes() {
        java.lang.Object ref = logLocation_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          logLocation_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Human-readable name of the function or method being invoked,
       * with optional context such as the class or package name. The format can
       * vary by language. For example:
       *   qual.if.ied.Class.method (Java)
       *   dir/package.func (Go)
       *   module.function (Python)
       *   file.cc:382 (C++)
       * </pre>
       *
       * <code>string log_location = 7;</code>
       * @param value The logLocation to set.
       * @return This builder for chaining.
       */
      public Builder setLogLocation(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        logLocation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Human-readable name of the function or method being invoked,
       * with optional context such as the class or package name. The format can
       * vary by language. For example:
       *   qual.if.ied.Class.method (Java)
       *   dir/package.func (Go)
       *   module.function (Python)
       *   file.cc:382 (C++)
       * </pre>
       *
       * <code>string log_location = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearLogLocation() {
        
        logLocation_ = getDefaultInstance().getLogLocation();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Human-readable name of the function or method being invoked,
       * with optional context such as the class or package name. The format can
       * vary by language. For example:
       *   qual.if.ied.Class.method (Java)
       *   dir/package.func (Go)
       *   module.function (Python)
       *   file.cc:382 (C++)
       * </pre>
       *
       * <code>string log_location = 7;</code>
       * @param value The bytes for logLocation to set.
       * @return This builder for chaining.
       */
      public Builder setLogLocationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        logLocation_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object thread_ = "";
      /**
       * <pre>
       * (Optional) The name of the thread this log statement is associated with.
       * </pre>
       *
       * <code>string thread = 8;</code>
       * @return The thread.
       */
      public java.lang.String getThread() {
        java.lang.Object ref = thread_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          thread_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) The name of the thread this log statement is associated with.
       * </pre>
       *
       * <code>string thread = 8;</code>
       * @return The bytes for thread.
       */
      public com.google.protobuf.ByteString
          getThreadBytes() {
        java.lang.Object ref = thread_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          thread_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) The name of the thread this log statement is associated with.
       * </pre>
       *
       * <code>string thread = 8;</code>
       * @param value The thread to set.
       * @return This builder for chaining.
       */
      public Builder setThread(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        thread_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) The name of the thread this log statement is associated with.
       * </pre>
       *
       * <code>string thread = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearThread() {
        
        thread_ = getDefaultInstance().getThread();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) The name of the thread this log statement is associated with.
       * </pre>
       *
       * <code>string thread = 8;</code>
       * @param value The bytes for thread to set.
       * @return This builder for chaining.
       */
      public Builder setThreadBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        thread_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.LogEntry)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.LogEntry)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LogEntry>
        PARSER = new com.google.protobuf.AbstractParser<LogEntry>() {
      @java.lang.Override
      public LogEntry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LogEntry(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LogEntry> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LogEntry> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogEntry getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LogControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.LogControl)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.LogControl}
   */
  public static final class LogControl extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.LogControl)
      LogControlOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LogControl.newBuilder() to construct.
    private LogControl(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LogControl() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LogControl();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LogControl(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogControl_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogControl_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.LogControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.LogControl)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControlOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogControl_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogControl_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_LogControl_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.LogControl)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.LogControl)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LogControl>
        PARSER = new com.google.protobuf.AbstractParser<LogControl>() {
      @java.lang.Override
      public LogControl parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LogControl(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LogControl> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LogControl> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.LogControl getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StartWorkerRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StartWorkerRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string worker_id = 1;</code>
     * @return The workerId.
     */
    java.lang.String getWorkerId();
    /**
     * <code>string worker_id = 1;</code>
     * @return The bytes for workerId.
     */
    com.google.protobuf.ByteString
        getWorkerIdBytes();

    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
     * @return Whether the controlEndpoint field is set.
     */
    boolean hasControlEndpoint();
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
     * @return The controlEndpoint.
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getControlEndpoint();
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getControlEndpointOrBuilder();

    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
     * @return Whether the loggingEndpoint field is set.
     */
    boolean hasLoggingEndpoint();
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
     * @return The loggingEndpoint.
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getLoggingEndpoint();
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getLoggingEndpointOrBuilder();

    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
     * @return Whether the artifactEndpoint field is set.
     */
    boolean hasArtifactEndpoint();
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
     * @return The artifactEndpoint.
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getArtifactEndpoint();
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getArtifactEndpointOrBuilder();

    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
     * @return Whether the provisionEndpoint field is set.
     */
    boolean hasProvisionEndpoint();
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
     * @return The provisionEndpoint.
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getProvisionEndpoint();
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
     */
    org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getProvisionEndpointOrBuilder();

    /**
     * <code>map&lt;string, string&gt; params = 10;</code>
     */
    int getParamsCount();
    /**
     * <code>map&lt;string, string&gt; params = 10;</code>
     */
    boolean containsParams(
        java.lang.String key);
    /**
     * Use {@link #getParamsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getParams();
    /**
     * <code>map&lt;string, string&gt; params = 10;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getParamsMap();
    /**
     * <code>map&lt;string, string&gt; params = 10;</code>
     */

    /* nullable */
java.lang.String getParamsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; params = 10;</code>
     */

    java.lang.String getParamsOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StartWorkerRequest}
   */
  public static final class StartWorkerRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StartWorkerRequest)
      StartWorkerRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StartWorkerRequest.newBuilder() to construct.
    private StartWorkerRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StartWorkerRequest() {
      workerId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StartWorkerRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StartWorkerRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              workerId_ = s;
              break;
            }
            case 18: {
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder subBuilder = null;
              if (controlEndpoint_ != null) {
                subBuilder = controlEndpoint_.toBuilder();
              }
              controlEndpoint_ = input.readMessage(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(controlEndpoint_);
                controlEndpoint_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder subBuilder = null;
              if (loggingEndpoint_ != null) {
                subBuilder = loggingEndpoint_.toBuilder();
              }
              loggingEndpoint_ = input.readMessage(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(loggingEndpoint_);
                loggingEndpoint_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder subBuilder = null;
              if (artifactEndpoint_ != null) {
                subBuilder = artifactEndpoint_.toBuilder();
              }
              artifactEndpoint_ = input.readMessage(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(artifactEndpoint_);
                artifactEndpoint_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder subBuilder = null;
              if (provisionEndpoint_ != null) {
                subBuilder = provisionEndpoint_.toBuilder();
              }
              provisionEndpoint_ = input.readMessage(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(provisionEndpoint_);
                provisionEndpoint_ = subBuilder.buildPartial();
              }

              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                params_ = com.google.protobuf.MapField.newMapField(
                    ParamsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              params__ = input.readMessage(
                  ParamsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              params_.getMutableMap().put(
                  params__.getKey(), params__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 10:
          return internalGetParams();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest.Builder.class);
    }

    public static final int WORKER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object workerId_;
    /**
     * <code>string worker_id = 1;</code>
     * @return The workerId.
     */
    @java.lang.Override
    public java.lang.String getWorkerId() {
      java.lang.Object ref = workerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        workerId_ = s;
        return s;
      }
    }
    /**
     * <code>string worker_id = 1;</code>
     * @return The bytes for workerId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getWorkerIdBytes() {
      java.lang.Object ref = workerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        workerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONTROL_ENDPOINT_FIELD_NUMBER = 2;
    private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor controlEndpoint_;
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
     * @return Whether the controlEndpoint field is set.
     */
    @java.lang.Override
    public boolean hasControlEndpoint() {
      return controlEndpoint_ != null;
    }
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
     * @return The controlEndpoint.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getControlEndpoint() {
      return controlEndpoint_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : controlEndpoint_;
    }
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getControlEndpointOrBuilder() {
      return getControlEndpoint();
    }

    public static final int LOGGING_ENDPOINT_FIELD_NUMBER = 3;
    private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor loggingEndpoint_;
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
     * @return Whether the loggingEndpoint field is set.
     */
    @java.lang.Override
    public boolean hasLoggingEndpoint() {
      return loggingEndpoint_ != null;
    }
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
     * @return The loggingEndpoint.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getLoggingEndpoint() {
      return loggingEndpoint_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : loggingEndpoint_;
    }
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getLoggingEndpointOrBuilder() {
      return getLoggingEndpoint();
    }

    public static final int ARTIFACT_ENDPOINT_FIELD_NUMBER = 4;
    private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor artifactEndpoint_;
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
     * @return Whether the artifactEndpoint field is set.
     */
    @java.lang.Override
    public boolean hasArtifactEndpoint() {
      return artifactEndpoint_ != null;
    }
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
     * @return The artifactEndpoint.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getArtifactEndpoint() {
      return artifactEndpoint_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : artifactEndpoint_;
    }
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getArtifactEndpointOrBuilder() {
      return getArtifactEndpoint();
    }

    public static final int PROVISION_ENDPOINT_FIELD_NUMBER = 5;
    private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor provisionEndpoint_;
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
     * @return Whether the provisionEndpoint field is set.
     */
    @java.lang.Override
    public boolean hasProvisionEndpoint() {
      return provisionEndpoint_ != null;
    }
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
     * @return The provisionEndpoint.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getProvisionEndpoint() {
      return provisionEndpoint_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : provisionEndpoint_;
    }
    /**
     * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getProvisionEndpointOrBuilder() {
      return getProvisionEndpoint();
    }

    public static final int PARAMS_FIELD_NUMBER = 10;
    private static final class ParamsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_ParamsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> params_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetParams() {
      if (params_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ParamsDefaultEntryHolder.defaultEntry);
      }
      return params_;
    }

    public int getParamsCount() {
      return internalGetParams().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; params = 10;</code>
     */

    @java.lang.Override
    public boolean containsParams(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetParams().getMap().containsKey(key);
    }
    /**
     * Use {@link #getParamsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getParams() {
      return getParamsMap();
    }
    /**
     * <code>map&lt;string, string&gt; params = 10;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getParamsMap() {
      return internalGetParams().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; params = 10;</code>
     */
    @java.lang.Override

    public java.lang.String getParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParams().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; params = 10;</code>
     */
    @java.lang.Override

    public java.lang.String getParamsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParams().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(workerId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, workerId_);
      }
      if (controlEndpoint_ != null) {
        output.writeMessage(2, getControlEndpoint());
      }
      if (loggingEndpoint_ != null) {
        output.writeMessage(3, getLoggingEndpoint());
      }
      if (artifactEndpoint_ != null) {
        output.writeMessage(4, getArtifactEndpoint());
      }
      if (provisionEndpoint_ != null) {
        output.writeMessage(5, getProvisionEndpoint());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetParams(),
          ParamsDefaultEntryHolder.defaultEntry,
          10);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(workerId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, workerId_);
      }
      if (controlEndpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getControlEndpoint());
      }
      if (loggingEndpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLoggingEndpoint());
      }
      if (artifactEndpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getArtifactEndpoint());
      }
      if (provisionEndpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getProvisionEndpoint());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetParams().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        params__ = ParamsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, params__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest) obj;

      if (!getWorkerId()
          .equals(other.getWorkerId())) return false;
      if (hasControlEndpoint() != other.hasControlEndpoint()) return false;
      if (hasControlEndpoint()) {
        if (!getControlEndpoint()
            .equals(other.getControlEndpoint())) return false;
      }
      if (hasLoggingEndpoint() != other.hasLoggingEndpoint()) return false;
      if (hasLoggingEndpoint()) {
        if (!getLoggingEndpoint()
            .equals(other.getLoggingEndpoint())) return false;
      }
      if (hasArtifactEndpoint() != other.hasArtifactEndpoint()) return false;
      if (hasArtifactEndpoint()) {
        if (!getArtifactEndpoint()
            .equals(other.getArtifactEndpoint())) return false;
      }
      if (hasProvisionEndpoint() != other.hasProvisionEndpoint()) return false;
      if (hasProvisionEndpoint()) {
        if (!getProvisionEndpoint()
            .equals(other.getProvisionEndpoint())) return false;
      }
      if (!internalGetParams().equals(
          other.internalGetParams())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + WORKER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getWorkerId().hashCode();
      if (hasControlEndpoint()) {
        hash = (37 * hash) + CONTROL_ENDPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getControlEndpoint().hashCode();
      }
      if (hasLoggingEndpoint()) {
        hash = (37 * hash) + LOGGING_ENDPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getLoggingEndpoint().hashCode();
      }
      if (hasArtifactEndpoint()) {
        hash = (37 * hash) + ARTIFACT_ENDPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getArtifactEndpoint().hashCode();
      }
      if (hasProvisionEndpoint()) {
        hash = (37 * hash) + PROVISION_ENDPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getProvisionEndpoint().hashCode();
      }
      if (!internalGetParams().getMap().isEmpty()) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetParams().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StartWorkerRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StartWorkerRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 10:
            return internalGetParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 10:
            return internalGetMutableParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        workerId_ = "";

        if (controlEndpointBuilder_ == null) {
          controlEndpoint_ = null;
        } else {
          controlEndpoint_ = null;
          controlEndpointBuilder_ = null;
        }
        if (loggingEndpointBuilder_ == null) {
          loggingEndpoint_ = null;
        } else {
          loggingEndpoint_ = null;
          loggingEndpointBuilder_ = null;
        }
        if (artifactEndpointBuilder_ == null) {
          artifactEndpoint_ = null;
        } else {
          artifactEndpoint_ = null;
          artifactEndpointBuilder_ = null;
        }
        if (provisionEndpointBuilder_ == null) {
          provisionEndpoint_ = null;
        } else {
          provisionEndpoint_ = null;
          provisionEndpointBuilder_ = null;
        }
        internalGetMutableParams().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest(this);
        int from_bitField0_ = bitField0_;
        result.workerId_ = workerId_;
        if (controlEndpointBuilder_ == null) {
          result.controlEndpoint_ = controlEndpoint_;
        } else {
          result.controlEndpoint_ = controlEndpointBuilder_.build();
        }
        if (loggingEndpointBuilder_ == null) {
          result.loggingEndpoint_ = loggingEndpoint_;
        } else {
          result.loggingEndpoint_ = loggingEndpointBuilder_.build();
        }
        if (artifactEndpointBuilder_ == null) {
          result.artifactEndpoint_ = artifactEndpoint_;
        } else {
          result.artifactEndpoint_ = artifactEndpointBuilder_.build();
        }
        if (provisionEndpointBuilder_ == null) {
          result.provisionEndpoint_ = provisionEndpoint_;
        } else {
          result.provisionEndpoint_ = provisionEndpointBuilder_.build();
        }
        result.params_ = internalGetParams();
        result.params_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest.getDefaultInstance()) return this;
        if (!other.getWorkerId().isEmpty()) {
          workerId_ = other.workerId_;
          onChanged();
        }
        if (other.hasControlEndpoint()) {
          mergeControlEndpoint(other.getControlEndpoint());
        }
        if (other.hasLoggingEndpoint()) {
          mergeLoggingEndpoint(other.getLoggingEndpoint());
        }
        if (other.hasArtifactEndpoint()) {
          mergeArtifactEndpoint(other.getArtifactEndpoint());
        }
        if (other.hasProvisionEndpoint()) {
          mergeProvisionEndpoint(other.getProvisionEndpoint());
        }
        internalGetMutableParams().mergeFrom(
            other.internalGetParams());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object workerId_ = "";
      /**
       * <code>string worker_id = 1;</code>
       * @return The workerId.
       */
      public java.lang.String getWorkerId() {
        java.lang.Object ref = workerId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          workerId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string worker_id = 1;</code>
       * @return The bytes for workerId.
       */
      public com.google.protobuf.ByteString
          getWorkerIdBytes() {
        java.lang.Object ref = workerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          workerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string worker_id = 1;</code>
       * @param value The workerId to set.
       * @return This builder for chaining.
       */
      public Builder setWorkerId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        workerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string worker_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearWorkerId() {
        
        workerId_ = getDefaultInstance().getWorkerId();
        onChanged();
        return this;
      }
      /**
       * <code>string worker_id = 1;</code>
       * @param value The bytes for workerId to set.
       * @return This builder for chaining.
       */
      public Builder setWorkerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        workerId_ = value;
        onChanged();
        return this;
      }

      private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor controlEndpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> controlEndpointBuilder_;
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
       * @return Whether the controlEndpoint field is set.
       */
      public boolean hasControlEndpoint() {
        return controlEndpointBuilder_ != null || controlEndpoint_ != null;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
       * @return The controlEndpoint.
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getControlEndpoint() {
        if (controlEndpointBuilder_ == null) {
          return controlEndpoint_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : controlEndpoint_;
        } else {
          return controlEndpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
       */
      public Builder setControlEndpoint(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (controlEndpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          controlEndpoint_ = value;
          onChanged();
        } else {
          controlEndpointBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
       */
      public Builder setControlEndpoint(
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder builderForValue) {
        if (controlEndpointBuilder_ == null) {
          controlEndpoint_ = builderForValue.build();
          onChanged();
        } else {
          controlEndpointBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
       */
      public Builder mergeControlEndpoint(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (controlEndpointBuilder_ == null) {
          if (controlEndpoint_ != null) {
            controlEndpoint_ =
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.newBuilder(controlEndpoint_).mergeFrom(value).buildPartial();
          } else {
            controlEndpoint_ = value;
          }
          onChanged();
        } else {
          controlEndpointBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
       */
      public Builder clearControlEndpoint() {
        if (controlEndpointBuilder_ == null) {
          controlEndpoint_ = null;
          onChanged();
        } else {
          controlEndpoint_ = null;
          controlEndpointBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder getControlEndpointBuilder() {
        
        onChanged();
        return getControlEndpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getControlEndpointOrBuilder() {
        if (controlEndpointBuilder_ != null) {
          return controlEndpointBuilder_.getMessageOrBuilder();
        } else {
          return controlEndpoint_ == null ?
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : controlEndpoint_;
        }
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor control_endpoint = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> 
          getControlEndpointFieldBuilder() {
        if (controlEndpointBuilder_ == null) {
          controlEndpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder>(
                  getControlEndpoint(),
                  getParentForChildren(),
                  isClean());
          controlEndpoint_ = null;
        }
        return controlEndpointBuilder_;
      }

      private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor loggingEndpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> loggingEndpointBuilder_;
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
       * @return Whether the loggingEndpoint field is set.
       */
      public boolean hasLoggingEndpoint() {
        return loggingEndpointBuilder_ != null || loggingEndpoint_ != null;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
       * @return The loggingEndpoint.
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getLoggingEndpoint() {
        if (loggingEndpointBuilder_ == null) {
          return loggingEndpoint_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : loggingEndpoint_;
        } else {
          return loggingEndpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
       */
      public Builder setLoggingEndpoint(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (loggingEndpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          loggingEndpoint_ = value;
          onChanged();
        } else {
          loggingEndpointBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
       */
      public Builder setLoggingEndpoint(
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder builderForValue) {
        if (loggingEndpointBuilder_ == null) {
          loggingEndpoint_ = builderForValue.build();
          onChanged();
        } else {
          loggingEndpointBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
       */
      public Builder mergeLoggingEndpoint(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (loggingEndpointBuilder_ == null) {
          if (loggingEndpoint_ != null) {
            loggingEndpoint_ =
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.newBuilder(loggingEndpoint_).mergeFrom(value).buildPartial();
          } else {
            loggingEndpoint_ = value;
          }
          onChanged();
        } else {
          loggingEndpointBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
       */
      public Builder clearLoggingEndpoint() {
        if (loggingEndpointBuilder_ == null) {
          loggingEndpoint_ = null;
          onChanged();
        } else {
          loggingEndpoint_ = null;
          loggingEndpointBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder getLoggingEndpointBuilder() {
        
        onChanged();
        return getLoggingEndpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getLoggingEndpointOrBuilder() {
        if (loggingEndpointBuilder_ != null) {
          return loggingEndpointBuilder_.getMessageOrBuilder();
        } else {
          return loggingEndpoint_ == null ?
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : loggingEndpoint_;
        }
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor logging_endpoint = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> 
          getLoggingEndpointFieldBuilder() {
        if (loggingEndpointBuilder_ == null) {
          loggingEndpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder>(
                  getLoggingEndpoint(),
                  getParentForChildren(),
                  isClean());
          loggingEndpoint_ = null;
        }
        return loggingEndpointBuilder_;
      }

      private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor artifactEndpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> artifactEndpointBuilder_;
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
       * @return Whether the artifactEndpoint field is set.
       */
      public boolean hasArtifactEndpoint() {
        return artifactEndpointBuilder_ != null || artifactEndpoint_ != null;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
       * @return The artifactEndpoint.
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getArtifactEndpoint() {
        if (artifactEndpointBuilder_ == null) {
          return artifactEndpoint_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : artifactEndpoint_;
        } else {
          return artifactEndpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
       */
      public Builder setArtifactEndpoint(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (artifactEndpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          artifactEndpoint_ = value;
          onChanged();
        } else {
          artifactEndpointBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
       */
      public Builder setArtifactEndpoint(
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder builderForValue) {
        if (artifactEndpointBuilder_ == null) {
          artifactEndpoint_ = builderForValue.build();
          onChanged();
        } else {
          artifactEndpointBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
       */
      public Builder mergeArtifactEndpoint(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (artifactEndpointBuilder_ == null) {
          if (artifactEndpoint_ != null) {
            artifactEndpoint_ =
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.newBuilder(artifactEndpoint_).mergeFrom(value).buildPartial();
          } else {
            artifactEndpoint_ = value;
          }
          onChanged();
        } else {
          artifactEndpointBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
       */
      public Builder clearArtifactEndpoint() {
        if (artifactEndpointBuilder_ == null) {
          artifactEndpoint_ = null;
          onChanged();
        } else {
          artifactEndpoint_ = null;
          artifactEndpointBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder getArtifactEndpointBuilder() {
        
        onChanged();
        return getArtifactEndpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getArtifactEndpointOrBuilder() {
        if (artifactEndpointBuilder_ != null) {
          return artifactEndpointBuilder_.getMessageOrBuilder();
        } else {
          return artifactEndpoint_ == null ?
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : artifactEndpoint_;
        }
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor artifact_endpoint = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> 
          getArtifactEndpointFieldBuilder() {
        if (artifactEndpointBuilder_ == null) {
          artifactEndpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder>(
                  getArtifactEndpoint(),
                  getParentForChildren(),
                  isClean());
          artifactEndpoint_ = null;
        }
        return artifactEndpointBuilder_;
      }

      private org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor provisionEndpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> provisionEndpointBuilder_;
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
       * @return Whether the provisionEndpoint field is set.
       */
      public boolean hasProvisionEndpoint() {
        return provisionEndpointBuilder_ != null || provisionEndpoint_ != null;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
       * @return The provisionEndpoint.
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor getProvisionEndpoint() {
        if (provisionEndpointBuilder_ == null) {
          return provisionEndpoint_ == null ? org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : provisionEndpoint_;
        } else {
          return provisionEndpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
       */
      public Builder setProvisionEndpoint(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (provisionEndpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          provisionEndpoint_ = value;
          onChanged();
        } else {
          provisionEndpointBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
       */
      public Builder setProvisionEndpoint(
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder builderForValue) {
        if (provisionEndpointBuilder_ == null) {
          provisionEndpoint_ = builderForValue.build();
          onChanged();
        } else {
          provisionEndpointBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
       */
      public Builder mergeProvisionEndpoint(org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor value) {
        if (provisionEndpointBuilder_ == null) {
          if (provisionEndpoint_ != null) {
            provisionEndpoint_ =
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.newBuilder(provisionEndpoint_).mergeFrom(value).buildPartial();
          } else {
            provisionEndpoint_ = value;
          }
          onChanged();
        } else {
          provisionEndpointBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
       */
      public Builder clearProvisionEndpoint() {
        if (provisionEndpointBuilder_ == null) {
          provisionEndpoint_ = null;
          onChanged();
        } else {
          provisionEndpoint_ = null;
          provisionEndpointBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder getProvisionEndpointBuilder() {
        
        onChanged();
        return getProvisionEndpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
       */
      public org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder getProvisionEndpointOrBuilder() {
        if (provisionEndpointBuilder_ != null) {
          return provisionEndpointBuilder_.getMessageOrBuilder();
        } else {
          return provisionEndpoint_ == null ?
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.getDefaultInstance() : provisionEndpoint_;
        }
      }
      /**
       * <code>.org.apache.beam.model.pipeline.v1.ApiServiceDescriptor provision_endpoint = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder> 
          getProvisionEndpointFieldBuilder() {
        if (provisionEndpointBuilder_ == null) {
          provisionEndpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptor.Builder, org.apache.beam.model.pipeline.v1.Endpoints.ApiServiceDescriptorOrBuilder>(
                  getProvisionEndpoint(),
                  getParentForChildren(),
                  isClean());
          provisionEndpoint_ = null;
        }
        return provisionEndpointBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> params_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetParams() {
        if (params_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ParamsDefaultEntryHolder.defaultEntry);
        }
        return params_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableParams() {
        onChanged();;
        if (params_ == null) {
          params_ = com.google.protobuf.MapField.newMapField(
              ParamsDefaultEntryHolder.defaultEntry);
        }
        if (!params_.isMutable()) {
          params_ = params_.copy();
        }
        return params_;
      }

      public int getParamsCount() {
        return internalGetParams().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; params = 10;</code>
       */

      @java.lang.Override
      public boolean containsParams(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetParams().getMap().containsKey(key);
      }
      /**
       * Use {@link #getParamsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getParams() {
        return getParamsMap();
      }
      /**
       * <code>map&lt;string, string&gt; params = 10;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getParamsMap() {
        return internalGetParams().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; params = 10;</code>
       */
      @java.lang.Override

      public java.lang.String getParamsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetParams().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; params = 10;</code>
       */
      @java.lang.Override

      public java.lang.String getParamsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetParams().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearParams() {
        internalGetMutableParams().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; params = 10;</code>
       */

      public Builder removeParams(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableParams().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableParams() {
        return internalGetMutableParams().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; params = 10;</code>
       */
      public Builder putParams(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableParams().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; params = 10;</code>
       */

      public Builder putAllParams(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableParams().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StartWorkerRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StartWorkerRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StartWorkerRequest>
        PARSER = new com.google.protobuf.AbstractParser<StartWorkerRequest>() {
      @java.lang.Override
      public StartWorkerRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StartWorkerRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StartWorkerRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StartWorkerRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StartWorkerResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StartWorkerResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string error = 1;</code>
     * @return The error.
     */
    java.lang.String getError();
    /**
     * <code>string error = 1;</code>
     * @return The bytes for error.
     */
    com.google.protobuf.ByteString
        getErrorBytes();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StartWorkerResponse}
   */
  public static final class StartWorkerResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StartWorkerResponse)
      StartWorkerResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StartWorkerResponse.newBuilder() to construct.
    private StartWorkerResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StartWorkerResponse() {
      error_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StartWorkerResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StartWorkerResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse.Builder.class);
    }

    public static final int ERROR_FIELD_NUMBER = 1;
    private volatile java.lang.Object error_;
    /**
     * <code>string error = 1;</code>
     * @return The error.
     */
    @java.lang.Override
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <code>string error = 1;</code>
     * @return The bytes for error.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, error_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, error_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse) obj;

      if (!getError()
          .equals(other.getError())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StartWorkerResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StartWorkerResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        error_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse(this);
        result.error_ = error_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse.getDefaultInstance()) return this;
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <code>string error = 1;</code>
       * @return The error.
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string error = 1;</code>
       * @return The bytes for error.
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string error = 1;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string error = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <code>string error = 1;</code>
       * @param value The bytes for error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StartWorkerResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StartWorkerResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StartWorkerResponse>
        PARSER = new com.google.protobuf.AbstractParser<StartWorkerResponse>() {
      @java.lang.Override
      public StartWorkerResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StartWorkerResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StartWorkerResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StartWorkerResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StartWorkerResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StopWorkerRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StopWorkerRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string worker_id = 1;</code>
     * @return The workerId.
     */
    java.lang.String getWorkerId();
    /**
     * <code>string worker_id = 1;</code>
     * @return The bytes for workerId.
     */
    com.google.protobuf.ByteString
        getWorkerIdBytes();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StopWorkerRequest}
   */
  public static final class StopWorkerRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StopWorkerRequest)
      StopWorkerRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StopWorkerRequest.newBuilder() to construct.
    private StopWorkerRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StopWorkerRequest() {
      workerId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StopWorkerRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StopWorkerRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              workerId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest.Builder.class);
    }

    public static final int WORKER_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object workerId_;
    /**
     * <code>string worker_id = 1;</code>
     * @return The workerId.
     */
    @java.lang.Override
    public java.lang.String getWorkerId() {
      java.lang.Object ref = workerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        workerId_ = s;
        return s;
      }
    }
    /**
     * <code>string worker_id = 1;</code>
     * @return The bytes for workerId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getWorkerIdBytes() {
      java.lang.Object ref = workerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        workerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(workerId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, workerId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(workerId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, workerId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest) obj;

      if (!getWorkerId()
          .equals(other.getWorkerId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + WORKER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getWorkerId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StopWorkerRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StopWorkerRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        workerId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest(this);
        result.workerId_ = workerId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest.getDefaultInstance()) return this;
        if (!other.getWorkerId().isEmpty()) {
          workerId_ = other.workerId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object workerId_ = "";
      /**
       * <code>string worker_id = 1;</code>
       * @return The workerId.
       */
      public java.lang.String getWorkerId() {
        java.lang.Object ref = workerId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          workerId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string worker_id = 1;</code>
       * @return The bytes for workerId.
       */
      public com.google.protobuf.ByteString
          getWorkerIdBytes() {
        java.lang.Object ref = workerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          workerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string worker_id = 1;</code>
       * @param value The workerId to set.
       * @return This builder for chaining.
       */
      public Builder setWorkerId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        workerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string worker_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearWorkerId() {
        
        workerId_ = getDefaultInstance().getWorkerId();
        onChanged();
        return this;
      }
      /**
       * <code>string worker_id = 1;</code>
       * @param value The bytes for workerId to set.
       * @return This builder for chaining.
       */
      public Builder setWorkerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        workerId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StopWorkerRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StopWorkerRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StopWorkerRequest>
        PARSER = new com.google.protobuf.AbstractParser<StopWorkerRequest>() {
      @java.lang.Override
      public StopWorkerRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StopWorkerRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StopWorkerRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StopWorkerRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StopWorkerResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.StopWorkerResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string error = 1;</code>
     * @return The error.
     */
    java.lang.String getError();
    /**
     * <code>string error = 1;</code>
     * @return The bytes for error.
     */
    com.google.protobuf.ByteString
        getErrorBytes();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StopWorkerResponse}
   */
  public static final class StopWorkerResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.StopWorkerResponse)
      StopWorkerResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StopWorkerResponse.newBuilder() to construct.
    private StopWorkerResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StopWorkerResponse() {
      error_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StopWorkerResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StopWorkerResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse.Builder.class);
    }

    public static final int ERROR_FIELD_NUMBER = 1;
    private volatile java.lang.Object error_;
    /**
     * <code>string error = 1;</code>
     * @return The error.
     */
    @java.lang.Override
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <code>string error = 1;</code>
     * @return The bytes for error.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, error_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, error_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse) obj;

      if (!getError()
          .equals(other.getError())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.StopWorkerResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.StopWorkerResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        error_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse(this);
        result.error_ = error_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse.getDefaultInstance()) return this;
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <code>string error = 1;</code>
       * @return The error.
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string error = 1;</code>
       * @return The bytes for error.
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string error = 1;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string error = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <code>string error = 1;</code>
       * @param value The bytes for error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.StopWorkerResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.StopWorkerResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StopWorkerResponse>
        PARSER = new com.google.protobuf.AbstractParser<StopWorkerResponse>() {
      @java.lang.Override
      public StopWorkerResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StopWorkerResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StopWorkerResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StopWorkerResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.StopWorkerResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WorkerStatusRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.WorkerStatusRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) Unique ID identifying this request.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * (Required) Unique ID identifying this request.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();
  }
  /**
   * <pre>
   * Request from runner to SDK Harness asking for its status. For more details see
   * https://s.apache.org/beam-fn-api-harness-status
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.WorkerStatusRequest}
   */
  public static final class WorkerStatusRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.WorkerStatusRequest)
      WorkerStatusRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WorkerStatusRequest.newBuilder() to construct.
    private WorkerStatusRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WorkerStatusRequest() {
      id_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new WorkerStatusRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WorkerStatusRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * (Required) Unique ID identifying this request.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) Unique ID identifying this request.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest) obj;

      if (!getId()
          .equals(other.getId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Request from runner to SDK Harness asking for its status. For more details see
     * https://s.apache.org/beam-fn-api-harness-status
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.WorkerStatusRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.WorkerStatusRequest)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest(this);
        result.id_ = id_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest.getDefaultInstance()) return this;
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * (Required) Unique ID identifying this request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) Unique ID identifying this request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) Unique ID identifying this request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Unique ID identifying this request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Unique ID identifying this request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.WorkerStatusRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.WorkerStatusRequest)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WorkerStatusRequest>
        PARSER = new com.google.protobuf.AbstractParser<WorkerStatusRequest>() {
      @java.lang.Override
      public WorkerStatusRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorkerStatusRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WorkerStatusRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WorkerStatusRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WorkerStatusResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.fn_execution.v1.WorkerStatusResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) Unique ID from the original request.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * (Required) Unique ID from the original request.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * (Optional) Error message if exception encountered generating the status response.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The error.
     */
    java.lang.String getError();
    /**
     * <pre>
     * (Optional) Error message if exception encountered generating the status response.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The bytes for error.
     */
    com.google.protobuf.ByteString
        getErrorBytes();

    /**
     * <pre>
     * (Optional) Status debugging info reported by SDK harness worker. Content and
     * format is not strongly enforced but should be print-friendly and
     * appropriate as an HTTP response body for end user. For details of the preferred
     * info to include in the message see
     * https://s.apache.org/beam-fn-api-harness-status
     * </pre>
     *
     * <code>string status_info = 3;</code>
     * @return The statusInfo.
     */
    java.lang.String getStatusInfo();
    /**
     * <pre>
     * (Optional) Status debugging info reported by SDK harness worker. Content and
     * format is not strongly enforced but should be print-friendly and
     * appropriate as an HTTP response body for end user. For details of the preferred
     * info to include in the message see
     * https://s.apache.org/beam-fn-api-harness-status
     * </pre>
     *
     * <code>string status_info = 3;</code>
     * @return The bytes for statusInfo.
     */
    com.google.protobuf.ByteString
        getStatusInfoBytes();
  }
  /**
   * <pre>
   * Response from SDK Harness to runner containing the debug related status info.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.fn_execution.v1.WorkerStatusResponse}
   */
  public static final class WorkerStatusResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.fn_execution.v1.WorkerStatusResponse)
      WorkerStatusResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WorkerStatusResponse.newBuilder() to construct.
    private WorkerStatusResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WorkerStatusResponse() {
      id_ = "";
      error_ = "";
      statusInfo_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new WorkerStatusResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WorkerStatusResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              statusInfo_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * (Required) Unique ID from the original request.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) Unique ID from the original request.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * (Optional) Error message if exception encountered generating the status response.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The error.
     */
    @java.lang.Override
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) Error message if exception encountered generating the status response.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The bytes for error.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATUS_INFO_FIELD_NUMBER = 3;
    private volatile java.lang.Object statusInfo_;
    /**
     * <pre>
     * (Optional) Status debugging info reported by SDK harness worker. Content and
     * format is not strongly enforced but should be print-friendly and
     * appropriate as an HTTP response body for end user. For details of the preferred
     * info to include in the message see
     * https://s.apache.org/beam-fn-api-harness-status
     * </pre>
     *
     * <code>string status_info = 3;</code>
     * @return The statusInfo.
     */
    @java.lang.Override
    public java.lang.String getStatusInfo() {
      java.lang.Object ref = statusInfo_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        statusInfo_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) Status debugging info reported by SDK harness worker. Content and
     * format is not strongly enforced but should be print-friendly and
     * appropriate as an HTTP response body for end user. For details of the preferred
     * info to include in the message see
     * https://s.apache.org/beam-fn-api-harness-status
     * </pre>
     *
     * <code>string status_info = 3;</code>
     * @return The bytes for statusInfo.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStatusInfoBytes() {
      java.lang.Object ref = statusInfo_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        statusInfo_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, error_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statusInfo_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, statusInfo_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, error_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statusInfo_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, statusInfo_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse other = (org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse) obj;

      if (!getId()
          .equals(other.getId())) return false;
      if (!getError()
          .equals(other.getError())) return false;
      if (!getStatusInfo()
          .equals(other.getStatusInfo())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      hash = (37 * hash) + STATUS_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getStatusInfo().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Response from SDK Harness to runner containing the debug related status info.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.fn_execution.v1.WorkerStatusResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.fn_execution.v1.WorkerStatusResponse)
        org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse.class, org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = "";

        error_ = "";

        statusInfo_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse getDefaultInstanceForType() {
        return org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse build() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse buildPartial() {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse result = new org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse(this);
        result.id_ = id_;
        result.error_ = error_;
        result.statusInfo_ = statusInfo_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse) {
          return mergeFrom((org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse other) {
        if (other == org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse.getDefaultInstance()) return this;
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        if (!other.getStatusInfo().isEmpty()) {
          statusInfo_ = other.statusInfo_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * (Required) Unique ID from the original request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) Unique ID from the original request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) Unique ID from the original request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Unique ID from the original request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Unique ID from the original request.
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * (Optional) Error message if exception encountered generating the status response.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return The error.
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Error message if exception encountered generating the status response.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return The bytes for error.
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Error message if exception encountered generating the status response.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Error message if exception encountered generating the status response.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Error message if exception encountered generating the status response.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @param value The bytes for error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object statusInfo_ = "";
      /**
       * <pre>
       * (Optional) Status debugging info reported by SDK harness worker. Content and
       * format is not strongly enforced but should be print-friendly and
       * appropriate as an HTTP response body for end user. For details of the preferred
       * info to include in the message see
       * https://s.apache.org/beam-fn-api-harness-status
       * </pre>
       *
       * <code>string status_info = 3;</code>
       * @return The statusInfo.
       */
      public java.lang.String getStatusInfo() {
        java.lang.Object ref = statusInfo_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          statusInfo_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Status debugging info reported by SDK harness worker. Content and
       * format is not strongly enforced but should be print-friendly and
       * appropriate as an HTTP response body for end user. For details of the preferred
       * info to include in the message see
       * https://s.apache.org/beam-fn-api-harness-status
       * </pre>
       *
       * <code>string status_info = 3;</code>
       * @return The bytes for statusInfo.
       */
      public com.google.protobuf.ByteString
          getStatusInfoBytes() {
        java.lang.Object ref = statusInfo_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          statusInfo_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) Status debugging info reported by SDK harness worker. Content and
       * format is not strongly enforced but should be print-friendly and
       * appropriate as an HTTP response body for end user. For details of the preferred
       * info to include in the message see
       * https://s.apache.org/beam-fn-api-harness-status
       * </pre>
       *
       * <code>string status_info = 3;</code>
       * @param value The statusInfo to set.
       * @return This builder for chaining.
       */
      public Builder setStatusInfo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        statusInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Status debugging info reported by SDK harness worker. Content and
       * format is not strongly enforced but should be print-friendly and
       * appropriate as an HTTP response body for end user. For details of the preferred
       * info to include in the message see
       * https://s.apache.org/beam-fn-api-harness-status
       * </pre>
       *
       * <code>string status_info = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStatusInfo() {
        
        statusInfo_ = getDefaultInstance().getStatusInfo();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Status debugging info reported by SDK harness worker. Content and
       * format is not strongly enforced but should be print-friendly and
       * appropriate as an HTTP response body for end user. For details of the preferred
       * info to include in the message see
       * https://s.apache.org/beam-fn-api-harness-status
       * </pre>
       *
       * <code>string status_info = 3;</code>
       * @param value The bytes for statusInfo to set.
       * @return This builder for chaining.
       */
      public Builder setStatusInfoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        statusInfo_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.fn_execution.v1.WorkerStatusResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.fn_execution.v1.WorkerStatusResponse)
    private static final org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse();
    }

    public static org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WorkerStatusResponse>
        PARSER = new com.google.protobuf.AbstractParser<WorkerStatusResponse>() {
      @java.lang.Override
      public WorkerStatusResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorkerStatusResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WorkerStatusResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WorkerStatusResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.fnexecution.v1.BeamFnApi.WorkerStatusResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_MonitoringDataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_MonitoringDataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_TransformsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_TransformsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_PcollectionsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_PcollectionsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_WindowingStrategiesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_WindowingStrategiesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_CodersEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_CodersEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_EnvironmentsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_EnvironmentsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_OutputWatermarksEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_OutputWatermarksEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_MonitoringDataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_MonitoringDataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_MonitoringDataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_MonitoringDataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_MonitoringInfoEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_MonitoringInfoEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplitsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplitsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_Elements_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_Elements_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_LogControl_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_LogControl_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_ParamsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_ParamsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n7org/apache/beam/model/fn_execution/v1/" +
      "beam_fn_api.proto\022%org.apache.beam.model" +
      ".fn_execution.v1\0327org/apache/beam/model/" +
      "pipeline/v1/beam_runner_api.proto\0321org/a" +
      "pache/beam/model/pipeline/v1/endpoints.p" +
      "roto\032/org/apache/beam/model/pipeline/v1/" +
      "metrics.proto\032 google/protobuf/descripto" +
      "r.proto\032\037google/protobuf/timestamp.proto" +
      "\032\036google/protobuf/duration.proto\"{\n\016Remo" +
      "teGrpcPort\022W\n\026api_service_descriptor\030\001 \001" +
      "(\01327.org.apache.beam.model.pipeline.v1.A" +
      "piServiceDescriptor\022\020\n\010coder_id\030\002 \001(\t\"I\n" +
      "!GetProcessBundleDescriptorRequest\022$\n\034pr" +
      "ocess_bundle_descriptor_id\030\001 \001(\t\"\321\005\n\022Ins" +
      "tructionRequest\022\026\n\016instruction_id\030\001 \001(\t\022" +
      "V\n\016process_bundle\030\351\007 \001(\0132;.org.apache.be" +
      "am.model.fn_execution.v1.ProcessBundleRe" +
      "questH\000\022g\n\027process_bundle_progress\030\352\007 \001(" +
      "\0132C.org.apache.beam.model.fn_execution.v" +
      "1.ProcessBundleProgressRequestH\000\022a\n\024proc" +
      "ess_bundle_split\030\353\007 \001(\0132@.org.apache.bea" +
      "m.model.fn_execution.v1.ProcessBundleSpl" +
      "itRequestH\000\022X\n\017finalize_bundle\030\354\007 \001(\0132<." +
      "org.apache.beam.model.fn_execution.v1.Fi" +
      "nalizeBundleRequestH\000\022b\n\020monitoring_info" +
      "s\030\355\007 \001(\0132E.org.apache.beam.model.fn_exec" +
      "ution.v1.MonitoringInfosMetadataRequestH" +
      "\000\022i\n\030harness_monitoring_infos\030\356\007 \001(\0132D.o" +
      "rg.apache.beam.model.fn_execution.v1.Har" +
      "nessMonitoringInfosRequestH\000\022K\n\010register" +
      "\030\350\007 \001(\01326.org.apache.beam.model.fn_execu" +
      "tion.v1.RegisterRequestH\000B\t\n\007request\"\351\005\n" +
      "\023InstructionResponse\022\026\n\016instruction_id\030\001" +
      " \001(\t\022\r\n\005error\030\002 \001(\t\022W\n\016process_bundle\030\351\007" +
      " \001(\0132<.org.apache.beam.model.fn_executio" +
      "n.v1.ProcessBundleResponseH\000\022h\n\027process_" +
      "bundle_progress\030\352\007 \001(\0132D.org.apache.beam" +
      ".model.fn_execution.v1.ProcessBundleProg" +
      "ressResponseH\000\022b\n\024process_bundle_split\030\353" +
      "\007 \001(\0132A.org.apache.beam.model.fn_executi" +
      "on.v1.ProcessBundleSplitResponseH\000\022Y\n\017fi" +
      "nalize_bundle\030\354\007 \001(\0132=.org.apache.beam.m" +
      "odel.fn_execution.v1.FinalizeBundleRespo" +
      "nseH\000\022c\n\020monitoring_infos\030\355\007 \001(\0132F.org.a" +
      "pache.beam.model.fn_execution.v1.Monitor" +
      "ingInfosMetadataResponseH\000\022j\n\030harness_mo" +
      "nitoring_infos\030\356\007 \001(\0132E.org.apache.beam." +
      "model.fn_execution.v1.HarnessMonitoringI" +
      "nfosResponseH\000\022L\n\010register\030\350\007 \001(\01327.org." +
      "apache.beam.model.fn_execution.v1.Regist" +
      "erResponseH\000B\n\n\010response\"\037\n\035HarnessMonit" +
      "oringInfosRequest\"\313\001\n\036HarnessMonitoringI" +
      "nfosResponse\022r\n\017monitoring_data\030\001 \003(\0132Y." +
      "org.apache.beam.model.fn_execution.v1.Ha" +
      "rnessMonitoringInfosResponse.MonitoringD" +
      "ataEntry\0325\n\023MonitoringDataEntry\022\013\n\003key\030\001" +
      " \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"t\n\017RegisterReque" +
      "st\022a\n\031process_bundle_descriptor\030\001 \003(\0132>." +
      "org.apache.beam.model.fn_execution.v1.Pr" +
      "ocessBundleDescriptor\"\022\n\020RegisterRespons" +
      "e\"\341\t\n\027ProcessBundleDescriptor\022\n\n\002id\030\001 \001(" +
      "\t\022b\n\ntransforms\030\002 \003(\0132N.org.apache.beam." +
      "model.fn_execution.v1.ProcessBundleDescr" +
      "iptor.TransformsEntry\022f\n\014pcollections\030\003 " +
      "\003(\0132P.org.apache.beam.model.fn_execution" +
      ".v1.ProcessBundleDescriptor.Pcollections" +
      "Entry\022u\n\024windowing_strategies\030\004 \003(\0132W.or" +
      "g.apache.beam.model.fn_execution.v1.Proc" +
      "essBundleDescriptor.WindowingStrategiesE" +
      "ntry\022Z\n\006coders\030\005 \003(\0132J.org.apache.beam.m" +
      "odel.fn_execution.v1.ProcessBundleDescri" +
      "ptor.CodersEntry\022f\n\014environments\030\006 \003(\0132P" +
      ".org.apache.beam.model.fn_execution.v1.P" +
      "rocessBundleDescriptor.EnvironmentsEntry" +
      "\022]\n\034state_api_service_descriptor\030\007 \001(\01327" +
      ".org.apache.beam.model.pipeline.v1.ApiSe" +
      "rviceDescriptor\022]\n\034timer_api_service_des" +
      "criptor\030\010 \001(\01327.org.apache.beam.model.pi" +
      "peline.v1.ApiServiceDescriptor\032`\n\017Transf" +
      "ormsEntry\022\013\n\003key\030\001 \001(\t\022<\n\005value\030\002 \001(\0132-." +
      "org.apache.beam.model.pipeline.v1.PTrans" +
      "form:\0028\001\032c\n\021PcollectionsEntry\022\013\n\003key\030\001 \001" +
      "(\t\022=\n\005value\030\002 \001(\0132..org.apache.beam.mode" +
      "l.pipeline.v1.PCollection:\0028\001\032p\n\030Windowi" +
      "ngStrategiesEntry\022\013\n\003key\030\001 \001(\t\022C\n\005value\030" +
      "\002 \001(\01324.org.apache.beam.model.pipeline.v" +
      "1.WindowingStrategy:\0028\001\032W\n\013CodersEntry\022\013" +
      "\n\003key\030\001 \001(\t\0227\n\005value\030\002 \001(\0132(.org.apache." +
      "beam.model.pipeline.v1.Coder:\0028\001\032c\n\021Envi" +
      "ronmentsEntry\022\013\n\003key\030\001 \001(\t\022=\n\005value\030\002 \001(" +
      "\0132..org.apache.beam.model.pipeline.v1.En" +
      "vironment:\0028\001\"\323\002\n\021BundleApplication\022\024\n\014t" +
      "ransform_id\030\001 \001(\t\022\020\n\010input_id\030\002 \001(\t\022\017\n\007e" +
      "lement\030\003 \001(\014\022i\n\021output_watermarks\030\004 \003(\0132" +
      "N.org.apache.beam.model.fn_execution.v1." +
      "BundleApplication.OutputWatermarksEntry\022" +
      "E\n\nis_bounded\030\005 \001(\01621.org.apache.beam.mo" +
      "del.pipeline.v1.IsBounded.Enum\032S\n\025Output" +
      "WatermarksEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 " +
      "\001(\0132\032.google.protobuf.Timestamp:\0028\001\"\242\001\n\030" +
      "DelayedBundleApplication\022M\n\013application\030" +
      "\001 \001(\01328.org.apache.beam.model.fn_executi" +
      "on.v1.BundleApplication\0227\n\024requested_tim" +
      "e_delay\030\002 \001(\0132\031.google.protobuf.Duration" +
      "\"\232\004\n\024ProcessBundleRequest\022$\n\034process_bun" +
      "dle_descriptor_id\030\001 \001(\t\022\\\n\014cache_tokens\030" +
      "\002 \003(\0132F.org.apache.beam.model.fn_executi" +
      "on.v1.ProcessBundleRequest.CacheToken\022A\n" +
      "\010elements\030\003 \001(\0132/.org.apache.beam.model." +
      "fn_execution.v1.Elements\032\272\002\n\nCacheToken\022" +
      "f\n\nuser_state\030\001 \001(\0132P.org.apache.beam.mo" +
      "del.fn_execution.v1.ProcessBundleRequest" +
      ".CacheToken.UserStateH\000\022f\n\nside_input\030\002 " +
      "\001(\0132P.org.apache.beam.model.fn_execution" +
      ".v1.ProcessBundleRequest.CacheToken.Side" +
      "InputH\000\022\r\n\005token\030\n \001(\014\032\013\n\tUserState\0328\n\tS" +
      "ideInput\022\024\n\014transform_id\030\001 \001(\t\022\025\n\rside_i" +
      "nput_id\030\002 \001(\tB\006\n\004type\"\307\003\n\025ProcessBundleR" +
      "esponse\022W\n\016residual_roots\030\002 \003(\0132?.org.ap" +
      "ache.beam.model.fn_execution.v1.DelayedB" +
      "undleApplication\022K\n\020monitoring_infos\030\003 \003" +
      "(\01321.org.apache.beam.model.pipeline.v1.M" +
      "onitoringInfo\022\035\n\025requires_finalization\030\004" +
      " \001(\010\022i\n\017monitoring_data\030\005 \003(\0132P.org.apac" +
      "he.beam.model.fn_execution.v1.ProcessBun" +
      "dleResponse.MonitoringDataEntry\022A\n\010eleme" +
      "nts\030\006 \001(\0132/.org.apache.beam.model.fn_exe" +
      "cution.v1.Elements\0325\n\023MonitoringDataEntr" +
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001J\004\010\001\020\002\"" +
      "6\n\034ProcessBundleProgressRequest\022\026\n\016instr" +
      "uction_id\030\001 \001(\t\"<\n\036MonitoringInfosMetada" +
      "taRequest\022\032\n\022monitoring_info_id\030\001 \003(\t\"\250\002" +
      "\n\035ProcessBundleProgressResponse\022K\n\020monit" +
      "oring_infos\030\003 \003(\01321.org.apache.beam.mode" +
      "l.pipeline.v1.MonitoringInfo\022q\n\017monitori" +
      "ng_data\030\005 \003(\0132X.org.apache.beam.model.fn" +
      "_execution.v1.ProcessBundleProgressRespo" +
      "nse.MonitoringDataEntry\0325\n\023MonitoringDat" +
      "aEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001J\004" +
      "\010\001\020\002J\004\010\002\020\003J\004\010\004\020\005\"\200\002\n\037MonitoringInfosMeta" +
      "dataResponse\022s\n\017monitoring_info\030\001 \003(\0132Z." +
      "org.apache.beam.model.fn_execution.v1.Mo" +
      "nitoringInfosMetadataResponse.Monitoring" +
      "InfoEntry\032h\n\023MonitoringInfoEntry\022\013\n\003key\030" +
      "\001 \001(\t\022@\n\005value\030\002 \001(\01321.org.apache.beam.m" +
      "odel.pipeline.v1.MonitoringInfo:\0028\001\"\225\003\n\031" +
      "ProcessBundleSplitRequest\022\026\n\016instruction" +
      "_id\030\001 \001(\t\022k\n\016desired_splits\030\003 \003(\0132S.org." +
      "apache.beam.model.fn_execution.v1.Proces" +
      "sBundleSplitRequest.DesiredSplitsEntry\032m" +
      "\n\014DesiredSplit\022\035\n\025fraction_of_remainder\030" +
      "\001 \001(\001\022\034\n\024allowed_split_points\030\003 \003(\003\022 \n\030e" +
      "stimated_input_elements\030\002 \001(\003\032\203\001\n\022Desire" +
      "dSplitsEntry\022\013\n\003key\030\001 \001(\t\022\\\n\005value\030\002 \001(\013" +
      "2M.org.apache.beam.model.fn_execution.v1" +
      ".ProcessBundleSplitRequest.DesiredSplit:" +
      "\0028\001\"\222\003\n\032ProcessBundleSplitResponse\022O\n\rpr" +
      "imary_roots\030\001 \003(\01328.org.apache.beam.mode" +
      "l.fn_execution.v1.BundleApplication\022W\n\016r" +
      "esidual_roots\030\002 \003(\0132?.org.apache.beam.mo" +
      "del.fn_execution.v1.DelayedBundleApplica" +
      "tion\022f\n\016channel_splits\030\003 \003(\0132N.org.apach" +
      "e.beam.model.fn_execution.v1.ProcessBund" +
      "leSplitResponse.ChannelSplit\032b\n\014ChannelS" +
      "plit\022\024\n\014transform_id\030\001 \001(\t\022\034\n\024last_prima" +
      "ry_element\030\002 \001(\003\022\036\n\026first_residual_eleme" +
      "nt\030\003 \001(\003\"/\n\025FinalizeBundleRequest\022\026\n\016ins" +
      "truction_id\030\001 \001(\t\"\030\n\026FinalizeBundleRespo" +
      "nse\"\335\002\n\010Elements\022B\n\004data\030\001 \003(\01324.org.apa" +
      "che.beam.model.fn_execution.v1.Elements." +
      "Data\022F\n\006timers\030\002 \003(\01326.org.apache.beam.m" +
      "odel.fn_execution.v1.Elements.Timers\032S\n\004" +
      "Data\022\026\n\016instruction_id\030\001 \001(\t\022\024\n\014transfor" +
      "m_id\030\002 \001(\t\022\014\n\004data\030\003 \001(\014\022\017\n\007is_last\030\004 \001(" +
      "\010\032p\n\006Timers\022\026\n\016instruction_id\030\001 \001(\t\022\024\n\014t" +
      "ransform_id\030\002 \001(\t\022\027\n\017timer_family_id\030\003 \001" +
      "(\t\022\016\n\006timers\030\004 \001(\014\022\017\n\007is_last\030\005 \001(\010\"\343\002\n\014" +
      "StateRequest\022\n\n\002id\030\001 \001(\t\022\026\n\016instruction_" +
      "id\030\002 \001(\t\022B\n\tstate_key\030\003 \001(\0132/.org.apache" +
      ".beam.model.fn_execution.v1.StateKey\022F\n\003" +
      "get\030\350\007 \001(\01326.org.apache.beam.model.fn_ex" +
      "ecution.v1.StateGetRequestH\000\022L\n\006append\030\351" +
      "\007 \001(\01329.org.apache.beam.model.fn_executi" +
      "on.v1.StateAppendRequestH\000\022J\n\005clear\030\352\007 \001" +
      "(\01328.org.apache.beam.model.fn_execution." +
      "v1.StateClearRequestH\000B\t\n\007request\"\233\002\n\rSt" +
      "ateResponse\022\n\n\002id\030\001 \001(\t\022\r\n\005error\030\002 \001(\t\022G" +
      "\n\003get\030\350\007 \001(\01327.org.apache.beam.model.fn_" +
      "execution.v1.StateGetResponseH\000\022M\n\006appen" +
      "d\030\351\007 \001(\0132:.org.apache.beam.model.fn_exec" +
      "ution.v1.StateAppendResponseH\000\022K\n\005clear\030" +
      "\352\007 \001(\01329.org.apache.beam.model.fn_execut" +
      "ion.v1.StateClearResponseH\000B\n\n\010response\"" +
      "\373\t\n\010StateKey\022H\n\006runner\030\001 \001(\01326.org.apach" +
      "e.beam.model.fn_execution.v1.StateKey.Ru" +
      "nnerH\000\022`\n\023multimap_side_input\030\002 \001(\0132A.or" +
      "g.apache.beam.model.fn_execution.v1.Stat" +
      "eKey.MultimapSideInputH\000\022V\n\016bag_user_sta" +
      "te\030\003 \001(\0132<.org.apache.beam.model.fn_exec" +
      "ution.v1.StateKey.BagUserStateH\000\022`\n\023iter" +
      "able_side_input\030\004 \001(\0132A.org.apache.beam." +
      "model.fn_execution.v1.StateKey.IterableS" +
      "ideInputH\000\022i\n\030multimap_keys_side_input\030\005" +
      " \001(\0132E.org.apache.beam.model.fn_executio" +
      "n.v1.StateKey.MultimapKeysSideInputH\000\022i\n" +
      "\030multimap_keys_user_state\030\006 \001(\0132E.org.ap" +
      "ache.beam.model.fn_execution.v1.StateKey" +
      ".MultimapKeysUserStateH\000\022`\n\023multimap_use" +
      "r_state\030\007 \001(\0132A.org.apache.beam.model.fn" +
      "_execution.v1.StateKey.MultimapUserState" +
      "H\000\032\025\n\006Runner\022\013\n\003key\030\001 \001(\014\032P\n\021IterableSid" +
      "eInput\022\024\n\014transform_id\030\001 \001(\t\022\025\n\rside_inp" +
      "ut_id\030\002 \001(\t\022\016\n\006window\030\003 \001(\014\032]\n\021MultimapS" +
      "ideInput\022\024\n\014transform_id\030\001 \001(\t\022\025\n\rside_i" +
      "nput_id\030\002 \001(\t\022\016\n\006window\030\003 \001(\014\022\013\n\003key\030\004 \001" +
      "(\014\032T\n\025MultimapKeysSideInput\022\024\n\014transform" +
      "_id\030\001 \001(\t\022\025\n\rside_input_id\030\002 \001(\t\022\016\n\006wind" +
      "ow\030\003 \001(\014\032X\n\014BagUserState\022\024\n\014transform_id" +
      "\030\001 \001(\t\022\025\n\ruser_state_id\030\002 \001(\t\022\016\n\006window\030" +
      "\003 \001(\014\022\013\n\003key\030\004 \001(\014\032a\n\025MultimapKeysUserSt" +
      "ate\022\024\n\014transform_id\030\001 \001(\t\022\025\n\ruser_state_" +
      "id\030\002 \001(\t\022\016\n\006window\030\003 \001(\014\022\013\n\003key\030\004 \001(\014\032n\n" +
      "\021MultimapUserState\022\024\n\014transform_id\030\001 \001(\t" +
      "\022\025\n\ruser_state_id\030\002 \001(\t\022\016\n\006window\030\003 \001(\014\022" +
      "\013\n\003key\030\004 \001(\014\022\017\n\007map_key\030\005 \001(\014B\006\n\004type\"-\n" +
      "\017StateGetRequest\022\032\n\022continuation_token\030\001" +
      " \001(\014\"<\n\020StateGetResponse\022\032\n\022continuation" +
      "_token\030\001 \001(\014\022\014\n\004data\030\002 \001(\014\"\"\n\022StateAppen" +
      "dRequest\022\014\n\004data\030\001 \001(\014\"\025\n\023StateAppendRes" +
      "ponse\"\023\n\021StateClearRequest\"\024\n\022StateClear" +
      "Response\"\300\003\n\010LogEntry\022O\n\010severity\030\001 \001(\0162" +
      "=.org.apache.beam.model.fn_execution.v1." +
      "LogEntry.Severity.Enum\022-\n\ttimestamp\030\002 \001(" +
      "\0132\032.google.protobuf.Timestamp\022\017\n\007message" +
      "\030\003 \001(\t\022\r\n\005trace\030\004 \001(\t\022\026\n\016instruction_id\030" +
      "\005 \001(\t\022\024\n\014transform_id\030\006 \001(\t\022\024\n\014log_locat" +
      "ion\030\007 \001(\t\022\016\n\006thread\030\010 \001(\t\032L\n\004List\022D\n\013log" +
      "_entries\030\001 \003(\0132/.org.apache.beam.model.f" +
      "n_execution.v1.LogEntry\032r\n\010Severity\"f\n\004E" +
      "num\022\017\n\013UNSPECIFIED\020\000\022\t\n\005TRACE\020\001\022\t\n\005DEBUG" +
      "\020\002\022\010\n\004INFO\020\003\022\n\n\006NOTICE\020\004\022\010\n\004WARN\020\005\022\t\n\005ER" +
      "ROR\020\006\022\014\n\010CRITICAL\020\007\"\014\n\nLogControl\"\374\003\n\022St" +
      "artWorkerRequest\022\021\n\tworker_id\030\001 \001(\t\022Q\n\020c" +
      "ontrol_endpoint\030\002 \001(\01327.org.apache.beam." +
      "model.pipeline.v1.ApiServiceDescriptor\022Q" +
      "\n\020logging_endpoint\030\003 \001(\01327.org.apache.be" +
      "am.model.pipeline.v1.ApiServiceDescripto" +
      "r\022R\n\021artifact_endpoint\030\004 \001(\01327.org.apach" +
      "e.beam.model.pipeline.v1.ApiServiceDescr" +
      "iptor\022S\n\022provision_endpoint\030\005 \001(\01327.org." +
      "apache.beam.model.pipeline.v1.ApiService" +
      "Descriptor\022U\n\006params\030\n \003(\0132E.org.apache." +
      "beam.model.fn_execution.v1.StartWorkerRe" +
      "quest.ParamsEntry\032-\n\013ParamsEntry\022\013\n\003key\030" +
      "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"$\n\023StartWorkerR" +
      "esponse\022\r\n\005error\030\001 \001(\t\"&\n\021StopWorkerRequ" +
      "est\022\021\n\tworker_id\030\001 \001(\t\"#\n\022StopWorkerResp" +
      "onse\022\r\n\005error\030\001 \001(\t\"!\n\023WorkerStatusReque" +
      "st\022\n\n\002id\030\001 \001(\t\"F\n\024WorkerStatusResponse\022\n" +
      "\n\002id\030\001 \001(\t\022\r\n\005error\030\002 \001(\t\022\023\n\013status_info" +
      "\030\003 \001(\t2\303\002\n\rBeamFnControl\022\206\001\n\007Control\022:.o" +
      "rg.apache.beam.model.fn_execution.v1.Ins" +
      "tructionResponse\0329.org.apache.beam.model" +
      ".fn_execution.v1.InstructionRequest\"\000(\0010" +
      "\001\022\250\001\n\032GetProcessBundleDescriptor\022H.org.a" +
      "pache.beam.model.fn_execution.v1.GetProc" +
      "essBundleDescriptorRequest\032>.org.apache." +
      "beam.model.fn_execution.v1.ProcessBundle" +
      "Descriptor\"\0002|\n\nBeamFnData\022n\n\004Data\022/.org" +
      ".apache.beam.model.fn_execution.v1.Eleme" +
      "nts\032/.org.apache.beam.model.fn_execution" +
      ".v1.Elements\"\000(\0010\0012\207\001\n\013BeamFnState\022x\n\005St" +
      "ate\0223.org.apache.beam.model.fn_execution" +
      ".v1.StateRequest\0324.org.apache.beam.model" +
      ".fn_execution.v1.StateResponse\"\000(\0010\0012\211\001\n" +
      "\rBeamFnLogging\022x\n\007Logging\0224.org.apache.b" +
      "eam.model.fn_execution.v1.LogEntry.List\032" +
      "1.org.apache.beam.model.fn_execution.v1." +
      "LogControl\"\000(\0010\0012\251\002\n\030BeamFnExternalWorke" +
      "rPool\022\206\001\n\013StartWorker\0229.org.apache.beam." +
      "model.fn_execution.v1.StartWorkerRequest" +
      "\032:.org.apache.beam.model.fn_execution.v1" +
      ".StartWorkerResponse\"\000\022\203\001\n\nStopWorker\0228." +
      "org.apache.beam.model.fn_execution.v1.St" +
      "opWorkerRequest\0329.org.apache.beam.model." +
      "fn_execution.v1.StopWorkerResponse\"\0002\244\001\n" +
      "\022BeamFnWorkerStatus\022\215\001\n\014WorkerStatus\022;.o" +
      "rg.apache.beam.model.fn_execution.v1.Wor" +
      "kerStatusResponse\032:.org.apache.beam.mode" +
      "l.fn_execution.v1.WorkerStatusRequest\"\000(" +
      "\0010\001B\201\001\n$org.apache.beam.model.fnexecutio" +
      "n.v1B\tBeamFnApiZNgithub.com/apache/beam/" +
      "sdks/v2/go/pkg/beam/model/fnexecution_v1" +
      ";fnexecution_v1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.apache.beam.model.pipeline.v1.RunnerApi.getDescriptor(),
          org.apache.beam.model.pipeline.v1.Endpoints.getDescriptor(),
          org.apache.beam.model.pipeline.v1.MetricsApi.getDescriptor(),
          com.google.protobuf.DescriptorProtos.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
          com.google.protobuf.DurationProto.getDescriptor(),
        });
    internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_RemoteGrpcPort_descriptor,
        new java.lang.String[] { "ApiServiceDescriptor", "CoderId", });
    internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_GetProcessBundleDescriptorRequest_descriptor,
        new java.lang.String[] { "ProcessBundleDescriptorId", });
    internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_InstructionRequest_descriptor,
        new java.lang.String[] { "InstructionId", "ProcessBundle", "ProcessBundleProgress", "ProcessBundleSplit", "FinalizeBundle", "MonitoringInfos", "HarnessMonitoringInfos", "Register", "Request", });
    internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_InstructionResponse_descriptor,
        new java.lang.String[] { "InstructionId", "Error", "ProcessBundle", "ProcessBundleProgress", "ProcessBundleSplit", "FinalizeBundle", "MonitoringInfos", "HarnessMonitoringInfos", "Register", "Response", });
    internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosRequest_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_descriptor,
        new java.lang.String[] { "MonitoringData", });
    internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_MonitoringDataEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_MonitoringDataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_HarnessMonitoringInfosResponse_MonitoringDataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_RegisterRequest_descriptor,
        new java.lang.String[] { "ProcessBundleDescriptor", });
    internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_RegisterResponse_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor,
        new java.lang.String[] { "Id", "Transforms", "Pcollections", "WindowingStrategies", "Coders", "Environments", "StateApiServiceDescriptor", "TimerApiServiceDescriptor", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_TransformsEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_TransformsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_TransformsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_PcollectionsEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_PcollectionsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_PcollectionsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_WindowingStrategiesEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor.getNestedTypes().get(2);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_WindowingStrategiesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_WindowingStrategiesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_CodersEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor.getNestedTypes().get(3);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_CodersEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_CodersEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_EnvironmentsEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_descriptor.getNestedTypes().get(4);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_EnvironmentsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleDescriptor_EnvironmentsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_descriptor,
        new java.lang.String[] { "TransformId", "InputId", "Element", "OutputWatermarks", "IsBounded", });
    internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_OutputWatermarksEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_OutputWatermarksEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_BundleApplication_OutputWatermarksEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_DelayedBundleApplication_descriptor,
        new java.lang.String[] { "Application", "RequestedTimeDelay", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_descriptor,
        new java.lang.String[] { "ProcessBundleDescriptorId", "CacheTokens", "Elements", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_descriptor,
        new java.lang.String[] { "UserState", "SideInput", "Token", "Type", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_UserState_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleRequest_CacheToken_SideInput_descriptor,
        new java.lang.String[] { "TransformId", "SideInputId", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_descriptor,
        new java.lang.String[] { "ResidualRoots", "MonitoringInfos", "RequiresFinalization", "MonitoringData", "Elements", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_MonitoringDataEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_MonitoringDataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleResponse_MonitoringDataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressRequest_descriptor,
        new java.lang.String[] { "InstructionId", });
    internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataRequest_descriptor,
        new java.lang.String[] { "MonitoringInfoId", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_descriptor,
        new java.lang.String[] { "MonitoringInfos", "MonitoringData", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_MonitoringDataEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_MonitoringDataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleProgressResponse_MonitoringDataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_descriptor,
        new java.lang.String[] { "MonitoringInfo", });
    internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_MonitoringInfoEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_MonitoringInfoEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_MonitoringInfosMetadataResponse_MonitoringInfoEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_descriptor,
        new java.lang.String[] { "InstructionId", "DesiredSplits", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplit_descriptor,
        new java.lang.String[] { "FractionOfRemainder", "AllowedSplitPoints", "EstimatedInputElements", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplitsEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplitsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitRequest_DesiredSplitsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_descriptor,
        new java.lang.String[] { "PrimaryRoots", "ResidualRoots", "ChannelSplits", });
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_ProcessBundleSplitResponse_ChannelSplit_descriptor,
        new java.lang.String[] { "TransformId", "LastPrimaryElement", "FirstResidualElement", });
    internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleRequest_descriptor,
        new java.lang.String[] { "InstructionId", });
    internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_FinalizeBundleResponse_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_fn_execution_v1_Elements_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_org_apache_beam_model_fn_execution_v1_Elements_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_Elements_descriptor,
        new java.lang.String[] { "Data", "Timers", });
    internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_Elements_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_Elements_Data_descriptor,
        new java.lang.String[] { "InstructionId", "TransformId", "Data", "IsLast", });
    internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_Elements_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_Elements_Timers_descriptor,
        new java.lang.String[] { "InstructionId", "TransformId", "TimerFamilyId", "Timers", "IsLast", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateRequest_descriptor,
        new java.lang.String[] { "Id", "InstructionId", "StateKey", "Get", "Append", "Clear", "Request", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateResponse_descriptor,
        new java.lang.String[] { "Id", "Error", "Get", "Append", "Clear", "Response", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor,
        new java.lang.String[] { "Runner", "MultimapSideInput", "BagUserState", "IterableSideInput", "MultimapKeysSideInput", "MultimapKeysUserState", "MultimapUserState", "Type", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateKey_Runner_descriptor,
        new java.lang.String[] { "Key", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateKey_IterableSideInput_descriptor,
        new java.lang.String[] { "TransformId", "SideInputId", "Window", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor.getNestedTypes().get(2);
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapSideInput_descriptor,
        new java.lang.String[] { "TransformId", "SideInputId", "Window", "Key", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor.getNestedTypes().get(3);
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysSideInput_descriptor,
        new java.lang.String[] { "TransformId", "SideInputId", "Window", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor.getNestedTypes().get(4);
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateKey_BagUserState_descriptor,
        new java.lang.String[] { "TransformId", "UserStateId", "Window", "Key", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor.getNestedTypes().get(5);
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapKeysUserState_descriptor,
        new java.lang.String[] { "TransformId", "UserStateId", "Window", "Key", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_StateKey_descriptor.getNestedTypes().get(6);
    internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateKey_MultimapUserState_descriptor,
        new java.lang.String[] { "TransformId", "UserStateId", "Window", "Key", "MapKey", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateGetRequest_descriptor,
        new java.lang.String[] { "ContinuationToken", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_descriptor =
      getDescriptor().getMessageTypes().get(26);
    internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateGetResponse_descriptor,
        new java.lang.String[] { "ContinuationToken", "Data", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_descriptor =
      getDescriptor().getMessageTypes().get(27);
    internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateAppendRequest_descriptor,
        new java.lang.String[] { "Data", });
    internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_descriptor =
      getDescriptor().getMessageTypes().get(28);
    internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateAppendResponse_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_descriptor =
      getDescriptor().getMessageTypes().get(29);
    internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateClearRequest_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_descriptor =
      getDescriptor().getMessageTypes().get(30);
    internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StateClearResponse_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_descriptor =
      getDescriptor().getMessageTypes().get(31);
    internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_descriptor,
        new java.lang.String[] { "Severity", "Timestamp", "Message", "Trace", "InstructionId", "TransformId", "LogLocation", "Thread", });
    internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_List_descriptor,
        new java.lang.String[] { "LogEntries", });
    internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_descriptor.getNestedTypes().get(1);
    internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_LogEntry_Severity_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_fn_execution_v1_LogControl_descriptor =
      getDescriptor().getMessageTypes().get(32);
    internal_static_org_apache_beam_model_fn_execution_v1_LogControl_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_LogControl_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_descriptor =
      getDescriptor().getMessageTypes().get(33);
    internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_descriptor,
        new java.lang.String[] { "WorkerId", "ControlEndpoint", "LoggingEndpoint", "ArtifactEndpoint", "ProvisionEndpoint", "Params", });
    internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_ParamsEntry_descriptor =
      internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_ParamsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerRequest_ParamsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_descriptor =
      getDescriptor().getMessageTypes().get(34);
    internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StartWorkerResponse_descriptor,
        new java.lang.String[] { "Error", });
    internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_descriptor =
      getDescriptor().getMessageTypes().get(35);
    internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerRequest_descriptor,
        new java.lang.String[] { "WorkerId", });
    internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_descriptor =
      getDescriptor().getMessageTypes().get(36);
    internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_StopWorkerResponse_descriptor,
        new java.lang.String[] { "Error", });
    internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_descriptor =
      getDescriptor().getMessageTypes().get(37);
    internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusRequest_descriptor,
        new java.lang.String[] { "Id", });
    internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_descriptor =
      getDescriptor().getMessageTypes().get(38);
    internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_fn_execution_v1_WorkerStatusResponse_descriptor,
        new java.lang.String[] { "Id", "Error", "StatusInfo", });
    org.apache.beam.model.pipeline.v1.RunnerApi.getDescriptor();
    org.apache.beam.model.pipeline.v1.Endpoints.getDescriptor();
    org.apache.beam.model.pipeline.v1.MetricsApi.getDescriptor();
    com.google.protobuf.DescriptorProtos.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
    com.google.protobuf.DurationProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
