// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/apache/beam/model/pipeline/v1/metrics.proto

package org.apache.beam.model.pipeline.v1;

public final class MetricsApi {
  private MetricsApi() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(org.apache.beam.model.pipeline.v1.MetricsApi.labelProps);
    registry.add(org.apache.beam.model.pipeline.v1.MetricsApi.monitoringInfoSpec);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MonitoringInfoSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.MonitoringInfoSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Defines the semantic meaning of the metric or monitored state.
     * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
     * state.
     * </pre>
     *
     * <code>string urn = 1;</code>
     * @return The urn.
     */
    java.lang.String getUrn();
    /**
     * <pre>
     * Defines the semantic meaning of the metric or monitored state.
     * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
     * state.
     * </pre>
     *
     * <code>string urn = 1;</code>
     * @return The bytes for urn.
     */
    com.google.protobuf.ByteString
        getUrnBytes();

    /**
     * <pre>
     * Defines the required encoding and aggregation method for the payload.
     * See MonitoringInfoTypeUrns.Enum for the set of well known types.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The type.
     */
    java.lang.String getType();
    /**
     * <pre>
     * Defines the required encoding and aggregation method for the payload.
     * See MonitoringInfoTypeUrns.Enum for the set of well known types.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The bytes for type.
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <pre>
     * The list of required labels for the specified urn and type.
     * </pre>
     *
     * <code>repeated string required_labels = 3;</code>
     * @return A list containing the requiredLabels.
     */
    java.util.List<java.lang.String>
        getRequiredLabelsList();
    /**
     * <pre>
     * The list of required labels for the specified urn and type.
     * </pre>
     *
     * <code>repeated string required_labels = 3;</code>
     * @return The count of requiredLabels.
     */
    int getRequiredLabelsCount();
    /**
     * <pre>
     * The list of required labels for the specified urn and type.
     * </pre>
     *
     * <code>repeated string required_labels = 3;</code>
     * @param index The index of the element to return.
     * @return The requiredLabels at the given index.
     */
    java.lang.String getRequiredLabels(int index);
    /**
     * <pre>
     * The list of required labels for the specified urn and type.
     * </pre>
     *
     * <code>repeated string required_labels = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the requiredLabels at the given index.
     */
    com.google.protobuf.ByteString
        getRequiredLabelsBytes(int index);

    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.Annotation> 
        getAnnotationsList();
    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    org.apache.beam.model.pipeline.v1.MetricsApi.Annotation getAnnotations(int index);
    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    int getAnnotationsCount();
    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    java.util.List<? extends org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder> 
        getAnnotationsOrBuilderList();
    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder getAnnotationsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A specification for describing a well known MonitoringInfo.
   * All specifications are uniquely identified by the urn.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfoSpec}
   */
  public static final class MonitoringInfoSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.MonitoringInfoSpec)
      MonitoringInfoSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitoringInfoSpec.newBuilder() to construct.
    private MonitoringInfoSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitoringInfoSpec() {
      urn_ = "";
      type_ = "";
      requiredLabels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      annotations_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitoringInfoSpec();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitoringInfoSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              urn_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              type_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                requiredLabels_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              requiredLabels_.add(s);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                annotations_ = new java.util.ArrayList<org.apache.beam.model.pipeline.v1.MetricsApi.Annotation>();
                mutable_bitField0_ |= 0x00000002;
              }
              annotations_.add(
                  input.readMessage(org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          requiredLabels_ = requiredLabels_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          annotations_ = java.util.Collections.unmodifiableList(annotations_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec.Builder.class);
    }

    public static final int URN_FIELD_NUMBER = 1;
    private volatile java.lang.Object urn_;
    /**
     * <pre>
     * Defines the semantic meaning of the metric or monitored state.
     * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
     * state.
     * </pre>
     *
     * <code>string urn = 1;</code>
     * @return The urn.
     */
    @java.lang.Override
    public java.lang.String getUrn() {
      java.lang.Object ref = urn_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        urn_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Defines the semantic meaning of the metric or monitored state.
     * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
     * state.
     * </pre>
     *
     * <code>string urn = 1;</code>
     * @return The bytes for urn.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrnBytes() {
      java.lang.Object ref = urn_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        urn_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private volatile java.lang.Object type_;
    /**
     * <pre>
     * Defines the required encoding and aggregation method for the payload.
     * See MonitoringInfoTypeUrns.Enum for the set of well known types.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The type.
     */
    @java.lang.Override
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        type_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Defines the required encoding and aggregation method for the payload.
     * See MonitoringInfoTypeUrns.Enum for the set of well known types.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The bytes for type.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REQUIRED_LABELS_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList requiredLabels_;
    /**
     * <pre>
     * The list of required labels for the specified urn and type.
     * </pre>
     *
     * <code>repeated string required_labels = 3;</code>
     * @return A list containing the requiredLabels.
     */
    public com.google.protobuf.ProtocolStringList
        getRequiredLabelsList() {
      return requiredLabels_;
    }
    /**
     * <pre>
     * The list of required labels for the specified urn and type.
     * </pre>
     *
     * <code>repeated string required_labels = 3;</code>
     * @return The count of requiredLabels.
     */
    public int getRequiredLabelsCount() {
      return requiredLabels_.size();
    }
    /**
     * <pre>
     * The list of required labels for the specified urn and type.
     * </pre>
     *
     * <code>repeated string required_labels = 3;</code>
     * @param index The index of the element to return.
     * @return The requiredLabels at the given index.
     */
    public java.lang.String getRequiredLabels(int index) {
      return requiredLabels_.get(index);
    }
    /**
     * <pre>
     * The list of required labels for the specified urn and type.
     * </pre>
     *
     * <code>repeated string required_labels = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the requiredLabels at the given index.
     */
    public com.google.protobuf.ByteString
        getRequiredLabelsBytes(int index) {
      return requiredLabels_.getByteString(index);
    }

    public static final int ANNOTATIONS_FIELD_NUMBER = 4;
    private java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.Annotation> annotations_;
    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.Annotation> getAnnotationsList() {
      return annotations_;
    }
    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder> 
        getAnnotationsOrBuilderList() {
      return annotations_;
    }
    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    @java.lang.Override
    public int getAnnotationsCount() {
      return annotations_.size();
    }
    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.Annotation getAnnotations(int index) {
      return annotations_.get(index);
    }
    /**
     * <pre>
     * Extra non functional parts of the spec for descriptive purposes.
     * i.e. description, units, etc.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder getAnnotationsOrBuilder(
        int index) {
      return annotations_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(urn_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, urn_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(type_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, type_);
      }
      for (int i = 0; i < requiredLabels_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, requiredLabels_.getRaw(i));
      }
      for (int i = 0; i < annotations_.size(); i++) {
        output.writeMessage(4, annotations_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(urn_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, urn_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(type_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, type_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < requiredLabels_.size(); i++) {
          dataSize += computeStringSizeNoTag(requiredLabels_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getRequiredLabelsList().size();
      }
      for (int i = 0; i < annotations_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, annotations_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec other = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec) obj;

      if (!getUrn()
          .equals(other.getUrn())) return false;
      if (!getType()
          .equals(other.getType())) return false;
      if (!getRequiredLabelsList()
          .equals(other.getRequiredLabelsList())) return false;
      if (!getAnnotationsList()
          .equals(other.getAnnotationsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + URN_FIELD_NUMBER;
      hash = (53 * hash) + getUrn().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getType().hashCode();
      if (getRequiredLabelsCount() > 0) {
        hash = (37 * hash) + REQUIRED_LABELS_FIELD_NUMBER;
        hash = (53 * hash) + getRequiredLabelsList().hashCode();
      }
      if (getAnnotationsCount() > 0) {
        hash = (37 * hash) + ANNOTATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getAnnotationsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A specification for describing a well known MonitoringInfo.
     * All specifications are uniquely identified by the urn.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfoSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.MonitoringInfoSpec)
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAnnotationsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        urn_ = "";

        type_ = "";

        requiredLabels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (annotationsBuilder_ == null) {
          annotations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          annotationsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec build() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec buildPartial() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec result = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec(this);
        int from_bitField0_ = bitField0_;
        result.urn_ = urn_;
        result.type_ = type_;
        if (((bitField0_ & 0x00000001) != 0)) {
          requiredLabels_ = requiredLabels_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.requiredLabels_ = requiredLabels_;
        if (annotationsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            annotations_ = java.util.Collections.unmodifiableList(annotations_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.annotations_ = annotations_;
        } else {
          result.annotations_ = annotationsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec other) {
        if (other == org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec.getDefaultInstance()) return this;
        if (!other.getUrn().isEmpty()) {
          urn_ = other.urn_;
          onChanged();
        }
        if (!other.getType().isEmpty()) {
          type_ = other.type_;
          onChanged();
        }
        if (!other.requiredLabels_.isEmpty()) {
          if (requiredLabels_.isEmpty()) {
            requiredLabels_ = other.requiredLabels_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRequiredLabelsIsMutable();
            requiredLabels_.addAll(other.requiredLabels_);
          }
          onChanged();
        }
        if (annotationsBuilder_ == null) {
          if (!other.annotations_.isEmpty()) {
            if (annotations_.isEmpty()) {
              annotations_ = other.annotations_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAnnotationsIsMutable();
              annotations_.addAll(other.annotations_);
            }
            onChanged();
          }
        } else {
          if (!other.annotations_.isEmpty()) {
            if (annotationsBuilder_.isEmpty()) {
              annotationsBuilder_.dispose();
              annotationsBuilder_ = null;
              annotations_ = other.annotations_;
              bitField0_ = (bitField0_ & ~0x00000002);
              annotationsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getAnnotationsFieldBuilder() : null;
            } else {
              annotationsBuilder_.addAllMessages(other.annotations_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object urn_ = "";
      /**
       * <pre>
       * Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @return The urn.
       */
      public java.lang.String getUrn() {
        java.lang.Object ref = urn_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          urn_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @return The bytes for urn.
       */
      public com.google.protobuf.ByteString
          getUrnBytes() {
        java.lang.Object ref = urn_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          urn_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @param value The urn to set.
       * @return This builder for chaining.
       */
      public Builder setUrn(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        urn_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrn() {
        
        urn_ = getDefaultInstance().getUrn();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @param value The bytes for urn to set.
       * @return This builder for chaining.
       */
      public Builder setUrnBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        urn_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <pre>
       * Defines the required encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @return The type.
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Defines the required encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @return The bytes for type.
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Defines the required encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the required encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the required encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @param value The bytes for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        type_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList requiredLabels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureRequiredLabelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          requiredLabels_ = new com.google.protobuf.LazyStringArrayList(requiredLabels_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * The list of required labels for the specified urn and type.
       * </pre>
       *
       * <code>repeated string required_labels = 3;</code>
       * @return A list containing the requiredLabels.
       */
      public com.google.protobuf.ProtocolStringList
          getRequiredLabelsList() {
        return requiredLabels_.getUnmodifiableView();
      }
      /**
       * <pre>
       * The list of required labels for the specified urn and type.
       * </pre>
       *
       * <code>repeated string required_labels = 3;</code>
       * @return The count of requiredLabels.
       */
      public int getRequiredLabelsCount() {
        return requiredLabels_.size();
      }
      /**
       * <pre>
       * The list of required labels for the specified urn and type.
       * </pre>
       *
       * <code>repeated string required_labels = 3;</code>
       * @param index The index of the element to return.
       * @return The requiredLabels at the given index.
       */
      public java.lang.String getRequiredLabels(int index) {
        return requiredLabels_.get(index);
      }
      /**
       * <pre>
       * The list of required labels for the specified urn and type.
       * </pre>
       *
       * <code>repeated string required_labels = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the requiredLabels at the given index.
       */
      public com.google.protobuf.ByteString
          getRequiredLabelsBytes(int index) {
        return requiredLabels_.getByteString(index);
      }
      /**
       * <pre>
       * The list of required labels for the specified urn and type.
       * </pre>
       *
       * <code>repeated string required_labels = 3;</code>
       * @param index The index to set the value at.
       * @param value The requiredLabels to set.
       * @return This builder for chaining.
       */
      public Builder setRequiredLabels(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRequiredLabelsIsMutable();
        requiredLabels_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The list of required labels for the specified urn and type.
       * </pre>
       *
       * <code>repeated string required_labels = 3;</code>
       * @param value The requiredLabels to add.
       * @return This builder for chaining.
       */
      public Builder addRequiredLabels(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRequiredLabelsIsMutable();
        requiredLabels_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The list of required labels for the specified urn and type.
       * </pre>
       *
       * <code>repeated string required_labels = 3;</code>
       * @param values The requiredLabels to add.
       * @return This builder for chaining.
       */
      public Builder addAllRequiredLabels(
          java.lang.Iterable<java.lang.String> values) {
        ensureRequiredLabelsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, requiredLabels_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The list of required labels for the specified urn and type.
       * </pre>
       *
       * <code>repeated string required_labels = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearRequiredLabels() {
        requiredLabels_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The list of required labels for the specified urn and type.
       * </pre>
       *
       * <code>repeated string required_labels = 3;</code>
       * @param value The bytes of the requiredLabels to add.
       * @return This builder for chaining.
       */
      public Builder addRequiredLabelsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureRequiredLabelsIsMutable();
        requiredLabels_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.Annotation> annotations_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          annotations_ = new java.util.ArrayList<org.apache.beam.model.pipeline.v1.MetricsApi.Annotation>(annotations_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.MetricsApi.Annotation, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder, org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder> annotationsBuilder_;

      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.Annotation> getAnnotationsList() {
        if (annotationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotations_);
        } else {
          return annotationsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public int getAnnotationsCount() {
        if (annotationsBuilder_ == null) {
          return annotations_.size();
        } else {
          return annotationsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.Annotation getAnnotations(int index) {
        if (annotationsBuilder_ == null) {
          return annotations_.get(index);
        } else {
          return annotationsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public Builder setAnnotations(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationsIsMutable();
          annotations_.set(index, value);
          onChanged();
        } else {
          annotationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public Builder setAnnotations(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          annotations_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public Builder addAnnotations(org.apache.beam.model.pipeline.v1.MetricsApi.Annotation value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationsIsMutable();
          annotations_.add(value);
          onChanged();
        } else {
          annotationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public Builder addAnnotations(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation value) {
        if (annotationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationsIsMutable();
          annotations_.add(index, value);
          onChanged();
        } else {
          annotationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public Builder addAnnotations(
          org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          annotations_.add(builderForValue.build());
          onChanged();
        } else {
          annotationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public Builder addAnnotations(
          int index, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder builderForValue) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          annotations_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public Builder addAllAnnotations(
          java.lang.Iterable<? extends org.apache.beam.model.pipeline.v1.MetricsApi.Annotation> values) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotations_);
          onChanged();
        } else {
          annotationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public Builder clearAnnotations() {
        if (annotationsBuilder_ == null) {
          annotations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          annotationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public Builder removeAnnotations(int index) {
        if (annotationsBuilder_ == null) {
          ensureAnnotationsIsMutable();
          annotations_.remove(index);
          onChanged();
        } else {
          annotationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder getAnnotationsBuilder(
          int index) {
        return getAnnotationsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder getAnnotationsOrBuilder(
          int index) {
        if (annotationsBuilder_ == null) {
          return annotations_.get(index);  } else {
          return annotationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public java.util.List<? extends org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder> 
           getAnnotationsOrBuilderList() {
        if (annotationsBuilder_ != null) {
          return annotationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotations_);
        }
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder addAnnotationsBuilder() {
        return getAnnotationsFieldBuilder().addBuilder(
            org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.getDefaultInstance());
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder addAnnotationsBuilder(
          int index) {
        return getAnnotationsFieldBuilder().addBuilder(
            index, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.getDefaultInstance());
      }
      /**
       * <pre>
       * Extra non functional parts of the spec for descriptive purposes.
       * i.e. description, units, etc.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.Annotation annotations = 4;</code>
       */
      public java.util.List<org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder> 
           getAnnotationsBuilderList() {
        return getAnnotationsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.MetricsApi.Annotation, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder, org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder> 
          getAnnotationsFieldBuilder() {
        if (annotationsBuilder_ == null) {
          annotationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.MetricsApi.Annotation, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder, org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder>(
                  annotations_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          annotations_ = null;
        }
        return annotationsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoSpec)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoSpec)
    private static final org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec();
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitoringInfoSpec>
        PARSER = new com.google.protobuf.AbstractParser<MonitoringInfoSpec>() {
      @java.lang.Override
      public MonitoringInfoSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitoringInfoSpec(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitoringInfoSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitoringInfoSpec> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AnnotationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.Annotation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string key = 1;</code>
     * @return The key.
     */
    java.lang.String getKey();
    /**
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <code>string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * The key name and value string of MonitoringInfo annotations.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.Annotation}
   */
  public static final class Annotation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.Annotation)
      AnnotationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Annotation.newBuilder() to construct.
    private Annotation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Annotation() {
      key_ = "";
      value_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Annotation();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Annotation(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              key_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              value_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_Annotation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_Annotation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.class, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private volatile java.lang.Object key_;
    /**
     * <code>string key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        key_ = s;
        return s;
      }
    }
    /**
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private volatile java.lang.Object value_;
    /**
     * <code>string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.MetricsApi.Annotation)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.MetricsApi.Annotation other = (org.apache.beam.model.pipeline.v1.MetricsApi.Annotation) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.MetricsApi.Annotation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The key name and value string of MonitoringInfo annotations.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.Annotation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.Annotation)
        org.apache.beam.model.pipeline.v1.MetricsApi.AnnotationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_Annotation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_Annotation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.class, org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        key_ = "";

        value_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_Annotation_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.Annotation getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.Annotation build() {
        org.apache.beam.model.pipeline.v1.MetricsApi.Annotation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.Annotation buildPartial() {
        org.apache.beam.model.pipeline.v1.MetricsApi.Annotation result = new org.apache.beam.model.pipeline.v1.MetricsApi.Annotation(this);
        result.key_ = key_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.MetricsApi.Annotation) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.MetricsApi.Annotation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.MetricsApi.Annotation other) {
        if (other == org.apache.beam.model.pipeline.v1.MetricsApi.Annotation.getDefaultInstance()) return this;
        if (!other.getKey().isEmpty()) {
          key_ = other.key_;
          onChanged();
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.MetricsApi.Annotation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.MetricsApi.Annotation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object key_ = "";
      /**
       * <code>string key = 1;</code>
       * @return The key.
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <code>string key = 1;</code>
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        key_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <code>string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <code>string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        value_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.Annotation)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.Annotation)
    private static final org.apache.beam.model.pipeline.v1.MetricsApi.Annotation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.MetricsApi.Annotation();
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.Annotation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Annotation>
        PARSER = new com.google.protobuf.AbstractParser<Annotation>() {
      @java.lang.Override
      public Annotation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Annotation(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Annotation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Annotation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.Annotation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MonitoringInfoSpecsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * A set of well known MonitoringInfo specifications.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs}
   */
  public static final class MonitoringInfoSpecs extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs)
      MonitoringInfoSpecsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitoringInfoSpecs.newBuilder() to construct.
    private MonitoringInfoSpecs(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitoringInfoSpecs() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitoringInfoSpecs();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitoringInfoSpecs(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs.Enum}
     */
    public enum Enum
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Represents an integer counter where values are summed across bundles.
       * </pre>
       *
       * <code>USER_SUM_INT64 = 0 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_SUM_INT64(0),
      /**
       * <pre>
       * Represents a double counter where values are summed across bundles.
       * </pre>
       *
       * <code>USER_SUM_DOUBLE = 1 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_SUM_DOUBLE(1),
      /**
       * <pre>
       * Represents a distribution of an integer value where:
       *   - count: represents the number of values seen across all bundles
       *   - sum: represents the total of the value across all bundles
       *   - min: represents the smallest value seen across all bundles
       *   - max: represents the largest value seen across all bundles
       * </pre>
       *
       * <code>USER_DISTRIBUTION_INT64 = 2 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_DISTRIBUTION_INT64(2),
      /**
       * <pre>
       * Represents a distribution of a double value where:
       *   - count: represents the number of values seen across all bundles
       *   - sum: represents the total of the value across all bundles
       *   - min: represents the smallest value seen across all bundles
       *   - max: represents the largest value seen across all bundles
       * </pre>
       *
       * <code>USER_DISTRIBUTION_DOUBLE = 3 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_DISTRIBUTION_DOUBLE(3),
      /**
       * <pre>
       * Represents the latest seen integer value. The timestamp is used to
       * provide an "ordering" over multiple values to determine which is the
       * latest.
       * </pre>
       *
       * <code>USER_LATEST_INT64 = 4 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_LATEST_INT64(4),
      /**
       * <pre>
       * Represents the latest seen double value. The timestamp is used to
       * provide an "ordering" over multiple values to determine which is the
       * latest.
       * </pre>
       *
       * <code>USER_LATEST_DOUBLE = 5 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_LATEST_DOUBLE(5),
      /**
       * <pre>
       * Represents the largest set of integer values seen across bundles.
       * </pre>
       *
       * <code>USER_TOP_N_INT64 = 6 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_TOP_N_INT64(6),
      /**
       * <pre>
       * Represents the largest set of double values seen across bundles.
       * </pre>
       *
       * <code>USER_TOP_N_DOUBLE = 7 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_TOP_N_DOUBLE(7),
      /**
       * <pre>
       * Represents the smallest set of integer values seen across bundles.
       * </pre>
       *
       * <code>USER_BOTTOM_N_INT64 = 8 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_BOTTOM_N_INT64(8),
      /**
       * <pre>
       * Represents the smallest set of double values seen across bundles.
       * </pre>
       *
       * <code>USER_BOTTOM_N_DOUBLE = 9 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      USER_BOTTOM_N_DOUBLE(9),
      /**
       * <code>ELEMENT_COUNT = 10 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      ELEMENT_COUNT(10),
      /**
       * <code>SAMPLED_BYTE_SIZE = 11 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      SAMPLED_BYTE_SIZE(11),
      /**
       * <code>START_BUNDLE_MSECS = 12 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      START_BUNDLE_MSECS(12),
      /**
       * <code>PROCESS_BUNDLE_MSECS = 13 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      PROCESS_BUNDLE_MSECS(13),
      /**
       * <code>FINISH_BUNDLE_MSECS = 14 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      FINISH_BUNDLE_MSECS(14),
      /**
       * <code>TOTAL_MSECS = 15 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      TOTAL_MSECS(15),
      /**
       * <pre>
       * All values reported across all beam:metric:ptransform_progress:.*:v1
       * metrics are of the same magnitude.
       * </pre>
       *
       * <code>WORK_REMAINING = 16 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      WORK_REMAINING(16),
      /**
       * <pre>
       * All values reported across all beam:metric:ptransform_progress:.*:v1
       * metrics are of the same magnitude.
       * </pre>
       *
       * <code>WORK_COMPLETED = 17 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      WORK_COMPLETED(17),
      /**
       * <pre>
       * The (0-based) index of the latest item processed from the data channel.
       * This gives an indication of the SDKs progress through the data channel,
       * and is a lower bound on where it is able to split.
       * For an SDK that processes items sequentially, this is equivalently the
       * number of items fully processed (or -1 if processing has not yet started).
       * </pre>
       *
       * <code>DATA_CHANNEL_READ_INDEX = 18 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      DATA_CHANNEL_READ_INDEX(18),
      /**
       * <code>API_REQUEST_COUNT = 19 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      API_REQUEST_COUNT(19),
      /**
       * <code>API_REQUEST_LATENCIES = 20 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      API_REQUEST_LATENCIES(20),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Represents an integer counter where values are summed across bundles.
       * </pre>
       *
       * <code>USER_SUM_INT64 = 0 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_SUM_INT64_VALUE = 0;
      /**
       * <pre>
       * Represents a double counter where values are summed across bundles.
       * </pre>
       *
       * <code>USER_SUM_DOUBLE = 1 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_SUM_DOUBLE_VALUE = 1;
      /**
       * <pre>
       * Represents a distribution of an integer value where:
       *   - count: represents the number of values seen across all bundles
       *   - sum: represents the total of the value across all bundles
       *   - min: represents the smallest value seen across all bundles
       *   - max: represents the largest value seen across all bundles
       * </pre>
       *
       * <code>USER_DISTRIBUTION_INT64 = 2 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_DISTRIBUTION_INT64_VALUE = 2;
      /**
       * <pre>
       * Represents a distribution of a double value where:
       *   - count: represents the number of values seen across all bundles
       *   - sum: represents the total of the value across all bundles
       *   - min: represents the smallest value seen across all bundles
       *   - max: represents the largest value seen across all bundles
       * </pre>
       *
       * <code>USER_DISTRIBUTION_DOUBLE = 3 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_DISTRIBUTION_DOUBLE_VALUE = 3;
      /**
       * <pre>
       * Represents the latest seen integer value. The timestamp is used to
       * provide an "ordering" over multiple values to determine which is the
       * latest.
       * </pre>
       *
       * <code>USER_LATEST_INT64 = 4 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_LATEST_INT64_VALUE = 4;
      /**
       * <pre>
       * Represents the latest seen double value. The timestamp is used to
       * provide an "ordering" over multiple values to determine which is the
       * latest.
       * </pre>
       *
       * <code>USER_LATEST_DOUBLE = 5 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_LATEST_DOUBLE_VALUE = 5;
      /**
       * <pre>
       * Represents the largest set of integer values seen across bundles.
       * </pre>
       *
       * <code>USER_TOP_N_INT64 = 6 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_TOP_N_INT64_VALUE = 6;
      /**
       * <pre>
       * Represents the largest set of double values seen across bundles.
       * </pre>
       *
       * <code>USER_TOP_N_DOUBLE = 7 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_TOP_N_DOUBLE_VALUE = 7;
      /**
       * <pre>
       * Represents the smallest set of integer values seen across bundles.
       * </pre>
       *
       * <code>USER_BOTTOM_N_INT64 = 8 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_BOTTOM_N_INT64_VALUE = 8;
      /**
       * <pre>
       * Represents the smallest set of double values seen across bundles.
       * </pre>
       *
       * <code>USER_BOTTOM_N_DOUBLE = 9 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int USER_BOTTOM_N_DOUBLE_VALUE = 9;
      /**
       * <code>ELEMENT_COUNT = 10 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int ELEMENT_COUNT_VALUE = 10;
      /**
       * <code>SAMPLED_BYTE_SIZE = 11 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int SAMPLED_BYTE_SIZE_VALUE = 11;
      /**
       * <code>START_BUNDLE_MSECS = 12 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int START_BUNDLE_MSECS_VALUE = 12;
      /**
       * <code>PROCESS_BUNDLE_MSECS = 13 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int PROCESS_BUNDLE_MSECS_VALUE = 13;
      /**
       * <code>FINISH_BUNDLE_MSECS = 14 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int FINISH_BUNDLE_MSECS_VALUE = 14;
      /**
       * <code>TOTAL_MSECS = 15 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int TOTAL_MSECS_VALUE = 15;
      /**
       * <pre>
       * All values reported across all beam:metric:ptransform_progress:.*:v1
       * metrics are of the same magnitude.
       * </pre>
       *
       * <code>WORK_REMAINING = 16 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int WORK_REMAINING_VALUE = 16;
      /**
       * <pre>
       * All values reported across all beam:metric:ptransform_progress:.*:v1
       * metrics are of the same magnitude.
       * </pre>
       *
       * <code>WORK_COMPLETED = 17 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int WORK_COMPLETED_VALUE = 17;
      /**
       * <pre>
       * The (0-based) index of the latest item processed from the data channel.
       * This gives an indication of the SDKs progress through the data channel,
       * and is a lower bound on where it is able to split.
       * For an SDK that processes items sequentially, this is equivalently the
       * number of items fully processed (or -1 if processing has not yet started).
       * </pre>
       *
       * <code>DATA_CHANNEL_READ_INDEX = 18 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int DATA_CHANNEL_READ_INDEX_VALUE = 18;
      /**
       * <code>API_REQUEST_COUNT = 19 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int API_REQUEST_COUNT_VALUE = 19;
      /**
       * <code>API_REQUEST_LATENCIES = 20 [(.org.apache.beam.model.pipeline.v1.monitoring_info_spec) = { ... }</code>
       */
      public static final int API_REQUEST_LATENCIES_VALUE = 20;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Enum valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Enum forNumber(int value) {
        switch (value) {
          case 0: return USER_SUM_INT64;
          case 1: return USER_SUM_DOUBLE;
          case 2: return USER_DISTRIBUTION_INT64;
          case 3: return USER_DISTRIBUTION_DOUBLE;
          case 4: return USER_LATEST_INT64;
          case 5: return USER_LATEST_DOUBLE;
          case 6: return USER_TOP_N_INT64;
          case 7: return USER_TOP_N_DOUBLE;
          case 8: return USER_BOTTOM_N_INT64;
          case 9: return USER_BOTTOM_N_DOUBLE;
          case 10: return ELEMENT_COUNT;
          case 11: return SAMPLED_BYTE_SIZE;
          case 12: return START_BUNDLE_MSECS;
          case 13: return PROCESS_BUNDLE_MSECS;
          case 14: return FINISH_BUNDLE_MSECS;
          case 15: return TOTAL_MSECS;
          case 16: return WORK_REMAINING;
          case 17: return WORK_COMPLETED;
          case 18: return DATA_CHANNEL_READ_INDEX;
          case 19: return API_REQUEST_COUNT;
          case 20: return API_REQUEST_LATENCIES;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Enum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Enum> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Enum>() {
              public Enum findValueByNumber(int number) {
                return Enum.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs.getDescriptor().getEnumTypes().get(0);
      }

      private static final Enum[] VALUES = values();

      public static Enum valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Enum(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs.Enum)
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs other = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A set of well known MonitoringInfo specifications.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs)
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs build() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs buildPartial() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs result = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs other) {
        if (other == org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoSpecs)
    private static final org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs();
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitoringInfoSpecs>
        PARSER = new com.google.protobuf.AbstractParser<MonitoringInfoSpecs>() {
      @java.lang.Override
      public MonitoringInfoSpecs parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitoringInfoSpecs(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitoringInfoSpecs> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitoringInfoSpecs> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpecs getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MonitoringInfoLabelPropsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.MonitoringInfoLabelProps)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The label key to use in the MonitoringInfo labels map.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The label key to use in the MonitoringInfo labels map.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * <pre>
   * A set of properties for the MonitoringInfoLabel, this is useful to obtain
   * the proper label string for the MonitoringInfoLabel.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfoLabelProps}
   */
  public static final class MonitoringInfoLabelProps extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.MonitoringInfoLabelProps)
      MonitoringInfoLabelPropsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitoringInfoLabelProps.newBuilder() to construct.
    private MonitoringInfoLabelProps(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitoringInfoLabelProps() {
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitoringInfoLabelProps();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitoringInfoLabelProps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The label key to use in the MonitoringInfo labels map.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The label key to use in the MonitoringInfo labels map.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps other = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A set of properties for the MonitoringInfoLabel, this is useful to obtain
     * the proper label string for the MonitoringInfoLabel.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfoLabelProps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.MonitoringInfoLabelProps)
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelPropsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps build() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps buildPartial() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps result = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps(this);
        result.name_ = name_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps other) {
        if (other == org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The label key to use in the MonitoringInfo labels map.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The label key to use in the MonitoringInfo labels map.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The label key to use in the MonitoringInfo labels map.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The label key to use in the MonitoringInfo labels map.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The label key to use in the MonitoringInfo labels map.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoLabelProps)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoLabelProps)
    private static final org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps();
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitoringInfoLabelProps>
        PARSER = new com.google.protobuf.AbstractParser<MonitoringInfoLabelProps>() {
      @java.lang.Override
      public MonitoringInfoLabelProps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitoringInfoLabelProps(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitoringInfoLabelProps> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitoringInfoLabelProps> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MonitoringInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.MonitoringInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * (Required) Defines the semantic meaning of the metric or monitored state.
     * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
     * state.
     * </pre>
     *
     * <code>string urn = 1;</code>
     * @return The urn.
     */
    java.lang.String getUrn();
    /**
     * <pre>
     * (Required) Defines the semantic meaning of the metric or monitored state.
     * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
     * state.
     * </pre>
     *
     * <code>string urn = 1;</code>
     * @return The bytes for urn.
     */
    com.google.protobuf.ByteString
        getUrnBytes();

    /**
     * <pre>
     * (Required) Defines the encoding and aggregation method for the payload.
     * See MonitoringInfoTypeUrns.Enum for the set of well known types.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The type.
     */
    java.lang.String getType();
    /**
     * <pre>
     * (Required) Defines the encoding and aggregation method for the payload.
     * See MonitoringInfoTypeUrns.Enum for the set of well known types.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The bytes for type.
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <pre>
     * (Required) The metric or monitored state encoded as per the specification
     * defined by the type.
     * </pre>
     *
     * <code>bytes payload = 3;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();

    /**
     * <pre>
     * A set of key and value labels which define the scope of the metric. For
     * well known URNs, the set of required labels is provided by the associated
     * MonitoringInfoSpec.
     * Either a well defined entity id for matching the enum names in
     * the MonitoringInfoLabels enum or any arbitrary label
     * set by a custom metric or user metric.
     * A monitoring system is expected to be able to aggregate the metrics
     * together for all updates having the same URN and labels. Some systems such
     * as Stackdriver will be able to aggregate the metrics using a subset of the
     * provided labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    int getLabelsCount();
    /**
     * <pre>
     * A set of key and value labels which define the scope of the metric. For
     * well known URNs, the set of required labels is provided by the associated
     * MonitoringInfoSpec.
     * Either a well defined entity id for matching the enum names in
     * the MonitoringInfoLabels enum or any arbitrary label
     * set by a custom metric or user metric.
     * A monitoring system is expected to be able to aggregate the metrics
     * together for all updates having the same URN and labels. Some systems such
     * as Stackdriver will be able to aggregate the metrics using a subset of the
     * provided labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    boolean containsLabels(
        java.lang.String key);
    /**
     * Use {@link #getLabelsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getLabels();
    /**
     * <pre>
     * A set of key and value labels which define the scope of the metric. For
     * well known URNs, the set of required labels is provided by the associated
     * MonitoringInfoSpec.
     * Either a well defined entity id for matching the enum names in
     * the MonitoringInfoLabels enum or any arbitrary label
     * set by a custom metric or user metric.
     * A monitoring system is expected to be able to aggregate the metrics
     * together for all updates having the same URN and labels. Some systems such
     * as Stackdriver will be able to aggregate the metrics using a subset of the
     * provided labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getLabelsMap();
    /**
     * <pre>
     * A set of key and value labels which define the scope of the metric. For
     * well known URNs, the set of required labels is provided by the associated
     * MonitoringInfoSpec.
     * Either a well defined entity id for matching the enum names in
     * the MonitoringInfoLabels enum or any arbitrary label
     * set by a custom metric or user metric.
     * A monitoring system is expected to be able to aggregate the metrics
     * together for all updates having the same URN and labels. Some systems such
     * as Stackdriver will be able to aggregate the metrics using a subset of the
     * provided labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */

    /* nullable */
java.lang.String getLabelsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <pre>
     * A set of key and value labels which define the scope of the metric. For
     * well known URNs, the set of required labels is provided by the associated
     * MonitoringInfoSpec.
     * Either a well defined entity id for matching the enum names in
     * the MonitoringInfoLabels enum or any arbitrary label
     * set by a custom metric or user metric.
     * A monitoring system is expected to be able to aggregate the metrics
     * together for all updates having the same URN and labels. Some systems such
     * as Stackdriver will be able to aggregate the metrics using a subset of the
     * provided labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */

    java.lang.String getLabelsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * This indicates the start of the time range over which this value was
     * measured.
     * This is needed by some external metric aggregation services
     * to indicate when the reporter of the metric first began collecting the
     * cumulative value for the timeseries.
     * If the SDK Harness restarts, it should reset the start_time, and reset
     * the collection of cumulative metrics (i.e. start to count again from 0).
     * HarnessMonitoringInfos should set this start_time once, when the
     * MonitoringInfo is first reported.
     * ProcessBundle MonitoringInfos should set a start_time for each bundle.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return Whether the startTime field is set.
     */
    boolean hasStartTime();
    /**
     * <pre>
     * This indicates the start of the time range over which this value was
     * measured.
     * This is needed by some external metric aggregation services
     * to indicate when the reporter of the metric first began collecting the
     * cumulative value for the timeseries.
     * If the SDK Harness restarts, it should reset the start_time, and reset
     * the collection of cumulative metrics (i.e. start to count again from 0).
     * HarnessMonitoringInfos should set this start_time once, when the
     * MonitoringInfo is first reported.
     * ProcessBundle MonitoringInfos should set a start_time for each bundle.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return The startTime.
     */
    com.google.protobuf.Timestamp getStartTime();
    /**
     * <pre>
     * This indicates the start of the time range over which this value was
     * measured.
     * This is needed by some external metric aggregation services
     * to indicate when the reporter of the metric first began collecting the
     * cumulative value for the timeseries.
     * If the SDK Harness restarts, it should reset the start_time, and reset
     * the collection of cumulative metrics (i.e. start to count again from 0).
     * HarnessMonitoringInfos should set this start_time once, when the
     * MonitoringInfo is first reported.
     * ProcessBundle MonitoringInfos should set a start_time for each bundle.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfo}
   */
  public static final class MonitoringInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.MonitoringInfo)
      MonitoringInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitoringInfo.newBuilder() to construct.
    private MonitoringInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitoringInfo() {
      urn_ = "";
      type_ = "";
      payload_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitoringInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitoringInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              urn_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              type_ = s;
              break;
            }
            case 26: {

              payload_ = input.readBytes();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                labels_ = com.google.protobuf.MapField.newMapField(
                    LabelsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              labels__ = input.readMessage(
                  LabelsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              labels_.getMutableMap().put(
                  labels__.getKey(), labels__.getValue());
              break;
            }
            case 42: {
              com.google.protobuf.Timestamp.Builder subBuilder = null;
              if (startTime_ != null) {
                subBuilder = startTime_.toBuilder();
              }
              startTime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(startTime_);
                startTime_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.beam.model.pipeline.v1.MonitoringInfo.MonitoringInfoLabels}
     */
    public enum MonitoringInfoLabels
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * The values used for TRANSFORM, PCOLLECTION, WINDOWING_STRATEGY
       * CODER, ENVIRONMENT, etc. must always match the keys used to
       * refer to them. For actively processed bundles, these should match the
       * values within the ProcessBundleDescriptor. For job management APIs,
       * these should match values within the original pipeline representation.
       * </pre>
       *
       * <code>TRANSFORM = 0 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      TRANSFORM(0),
      /**
       * <code>PCOLLECTION = 1 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      PCOLLECTION(1),
      /**
       * <code>WINDOWING_STRATEGY = 2 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      WINDOWING_STRATEGY(2),
      /**
       * <code>CODER = 3 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      CODER(3),
      /**
       * <code>ENVIRONMENT = 4 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      ENVIRONMENT(4),
      /**
       * <code>NAMESPACE = 5 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      NAMESPACE(5),
      /**
       * <code>NAME = 6 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      NAME(6),
      /**
       * <code>SERVICE = 7 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      SERVICE(7),
      /**
       * <code>METHOD = 8 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      METHOD(8),
      /**
       * <code>RESOURCE = 9 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      RESOURCE(9),
      /**
       * <code>STATUS = 10 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      STATUS(10),
      /**
       * <code>BIGQUERY_PROJECT_ID = 11 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      BIGQUERY_PROJECT_ID(11),
      /**
       * <code>BIGQUERY_DATASET = 12 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      BIGQUERY_DATASET(12),
      /**
       * <code>BIGQUERY_TABLE = 13 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      BIGQUERY_TABLE(13),
      /**
       * <code>BIGQUERY_VIEW = 14 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      BIGQUERY_VIEW(14),
      /**
       * <code>BIGQUERY_QUERY_NAME = 15 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      BIGQUERY_QUERY_NAME(15),
      /**
       * <code>GCS_BUCKET = 16 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      GCS_BUCKET(16),
      /**
       * <code>GCS_PROJECT_ID = 17 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      GCS_PROJECT_ID(17),
      /**
       * <code>DATASTORE_PROJECT = 18 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      DATASTORE_PROJECT(18),
      /**
       * <code>DATASTORE_NAMESPACE = 19 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      DATASTORE_NAMESPACE(19),
      /**
       * <code>BIGTABLE_PROJECT_ID = 20 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      BIGTABLE_PROJECT_ID(20),
      /**
       * <code>INSTANCE_ID = 21 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      INSTANCE_ID(21),
      /**
       * <code>TABLE_ID = 22 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      TABLE_ID(22),
      /**
       * <code>SPANNER_PROJECT_ID = 23 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      SPANNER_PROJECT_ID(23),
      /**
       * <code>SPANNER_DATABASE_ID = 24 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      SPANNER_DATABASE_ID(24),
      /**
       * <code>SPANNER_TABLE_ID = 25 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      SPANNER_TABLE_ID(25),
      /**
       * <code>SPANNER_INSTANCE_ID = 26 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      SPANNER_INSTANCE_ID(26),
      /**
       * <code>SPANNER_QUERY_NAME = 27 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      SPANNER_QUERY_NAME(27),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * The values used for TRANSFORM, PCOLLECTION, WINDOWING_STRATEGY
       * CODER, ENVIRONMENT, etc. must always match the keys used to
       * refer to them. For actively processed bundles, these should match the
       * values within the ProcessBundleDescriptor. For job management APIs,
       * these should match values within the original pipeline representation.
       * </pre>
       *
       * <code>TRANSFORM = 0 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int TRANSFORM_VALUE = 0;
      /**
       * <code>PCOLLECTION = 1 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int PCOLLECTION_VALUE = 1;
      /**
       * <code>WINDOWING_STRATEGY = 2 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int WINDOWING_STRATEGY_VALUE = 2;
      /**
       * <code>CODER = 3 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int CODER_VALUE = 3;
      /**
       * <code>ENVIRONMENT = 4 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int ENVIRONMENT_VALUE = 4;
      /**
       * <code>NAMESPACE = 5 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int NAMESPACE_VALUE = 5;
      /**
       * <code>NAME = 6 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int NAME_VALUE = 6;
      /**
       * <code>SERVICE = 7 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int SERVICE_VALUE = 7;
      /**
       * <code>METHOD = 8 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int METHOD_VALUE = 8;
      /**
       * <code>RESOURCE = 9 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int RESOURCE_VALUE = 9;
      /**
       * <code>STATUS = 10 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int STATUS_VALUE = 10;
      /**
       * <code>BIGQUERY_PROJECT_ID = 11 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int BIGQUERY_PROJECT_ID_VALUE = 11;
      /**
       * <code>BIGQUERY_DATASET = 12 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int BIGQUERY_DATASET_VALUE = 12;
      /**
       * <code>BIGQUERY_TABLE = 13 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int BIGQUERY_TABLE_VALUE = 13;
      /**
       * <code>BIGQUERY_VIEW = 14 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int BIGQUERY_VIEW_VALUE = 14;
      /**
       * <code>BIGQUERY_QUERY_NAME = 15 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int BIGQUERY_QUERY_NAME_VALUE = 15;
      /**
       * <code>GCS_BUCKET = 16 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int GCS_BUCKET_VALUE = 16;
      /**
       * <code>GCS_PROJECT_ID = 17 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int GCS_PROJECT_ID_VALUE = 17;
      /**
       * <code>DATASTORE_PROJECT = 18 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int DATASTORE_PROJECT_VALUE = 18;
      /**
       * <code>DATASTORE_NAMESPACE = 19 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int DATASTORE_NAMESPACE_VALUE = 19;
      /**
       * <code>BIGTABLE_PROJECT_ID = 20 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int BIGTABLE_PROJECT_ID_VALUE = 20;
      /**
       * <code>INSTANCE_ID = 21 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int INSTANCE_ID_VALUE = 21;
      /**
       * <code>TABLE_ID = 22 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int TABLE_ID_VALUE = 22;
      /**
       * <code>SPANNER_PROJECT_ID = 23 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int SPANNER_PROJECT_ID_VALUE = 23;
      /**
       * <code>SPANNER_DATABASE_ID = 24 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int SPANNER_DATABASE_ID_VALUE = 24;
      /**
       * <code>SPANNER_TABLE_ID = 25 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int SPANNER_TABLE_ID_VALUE = 25;
      /**
       * <code>SPANNER_INSTANCE_ID = 26 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int SPANNER_INSTANCE_ID_VALUE = 26;
      /**
       * <code>SPANNER_QUERY_NAME = 27 [(.org.apache.beam.model.pipeline.v1.label_props) = { ... }</code>
       */
      public static final int SPANNER_QUERY_NAME_VALUE = 27;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MonitoringInfoLabels valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static MonitoringInfoLabels forNumber(int value) {
        switch (value) {
          case 0: return TRANSFORM;
          case 1: return PCOLLECTION;
          case 2: return WINDOWING_STRATEGY;
          case 3: return CODER;
          case 4: return ENVIRONMENT;
          case 5: return NAMESPACE;
          case 6: return NAME;
          case 7: return SERVICE;
          case 8: return METHOD;
          case 9: return RESOURCE;
          case 10: return STATUS;
          case 11: return BIGQUERY_PROJECT_ID;
          case 12: return BIGQUERY_DATASET;
          case 13: return BIGQUERY_TABLE;
          case 14: return BIGQUERY_VIEW;
          case 15: return BIGQUERY_QUERY_NAME;
          case 16: return GCS_BUCKET;
          case 17: return GCS_PROJECT_ID;
          case 18: return DATASTORE_PROJECT;
          case 19: return DATASTORE_NAMESPACE;
          case 20: return BIGTABLE_PROJECT_ID;
          case 21: return INSTANCE_ID;
          case 22: return TABLE_ID;
          case 23: return SPANNER_PROJECT_ID;
          case 24: return SPANNER_DATABASE_ID;
          case 25: return SPANNER_TABLE_ID;
          case 26: return SPANNER_INSTANCE_ID;
          case 27: return SPANNER_QUERY_NAME;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MonitoringInfoLabels>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          MonitoringInfoLabels> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MonitoringInfoLabels>() {
              public MonitoringInfoLabels findValueByNumber(int number) {
                return MonitoringInfoLabels.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.getDescriptor().getEnumTypes().get(0);
      }

      private static final MonitoringInfoLabels[] VALUES = values();

      public static MonitoringInfoLabels valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private MonitoringInfoLabels(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.beam.model.pipeline.v1.MonitoringInfo.MonitoringInfoLabels)
    }

    public static final int URN_FIELD_NUMBER = 1;
    private volatile java.lang.Object urn_;
    /**
     * <pre>
     * (Required) Defines the semantic meaning of the metric or monitored state.
     * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
     * state.
     * </pre>
     *
     * <code>string urn = 1;</code>
     * @return The urn.
     */
    @java.lang.Override
    public java.lang.String getUrn() {
      java.lang.Object ref = urn_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        urn_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) Defines the semantic meaning of the metric or monitored state.
     * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
     * state.
     * </pre>
     *
     * <code>string urn = 1;</code>
     * @return The bytes for urn.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrnBytes() {
      java.lang.Object ref = urn_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        urn_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private volatile java.lang.Object type_;
    /**
     * <pre>
     * (Required) Defines the encoding and aggregation method for the payload.
     * See MonitoringInfoTypeUrns.Enum for the set of well known types.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The type.
     */
    @java.lang.Override
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        type_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Required) Defines the encoding and aggregation method for the payload.
     * See MonitoringInfoTypeUrns.Enum for the set of well known types.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The bytes for type.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PAYLOAD_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString payload_;
    /**
     * <pre>
     * (Required) The metric or monitored state encoded as per the specification
     * defined by the type.
     * </pre>
     *
     * <code>bytes payload = 3;</code>
     * @return The payload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    public static final int LABELS_FIELD_NUMBER = 4;
    private static final class LabelsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_LabelsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> labels_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetLabels() {
      if (labels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            LabelsDefaultEntryHolder.defaultEntry);
      }
      return labels_;
    }

    public int getLabelsCount() {
      return internalGetLabels().getMap().size();
    }
    /**
     * <pre>
     * A set of key and value labels which define the scope of the metric. For
     * well known URNs, the set of required labels is provided by the associated
     * MonitoringInfoSpec.
     * Either a well defined entity id for matching the enum names in
     * the MonitoringInfoLabels enum or any arbitrary label
     * set by a custom metric or user metric.
     * A monitoring system is expected to be able to aggregate the metrics
     * together for all updates having the same URN and labels. Some systems such
     * as Stackdriver will be able to aggregate the metrics using a subset of the
     * provided labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */

    @java.lang.Override
    public boolean containsLabels(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetLabels().getMap().containsKey(key);
    }
    /**
     * Use {@link #getLabelsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getLabels() {
      return getLabelsMap();
    }
    /**
     * <pre>
     * A set of key and value labels which define the scope of the metric. For
     * well known URNs, the set of required labels is provided by the associated
     * MonitoringInfoSpec.
     * Either a well defined entity id for matching the enum names in
     * the MonitoringInfoLabels enum or any arbitrary label
     * set by a custom metric or user metric.
     * A monitoring system is expected to be able to aggregate the metrics
     * together for all updates having the same URN and labels. Some systems such
     * as Stackdriver will be able to aggregate the metrics using a subset of the
     * provided labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
      return internalGetLabels().getMap();
    }
    /**
     * <pre>
     * A set of key and value labels which define the scope of the metric. For
     * well known URNs, the set of required labels is provided by the associated
     * MonitoringInfoSpec.
     * Either a well defined entity id for matching the enum names in
     * the MonitoringInfoLabels enum or any arbitrary label
     * set by a custom metric or user metric.
     * A monitoring system is expected to be able to aggregate the metrics
     * together for all updates having the same URN and labels. Some systems such
     * as Stackdriver will be able to aggregate the metrics using a subset of the
     * provided labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @java.lang.Override

    public java.lang.String getLabelsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A set of key and value labels which define the scope of the metric. For
     * well known URNs, the set of required labels is provided by the associated
     * MonitoringInfoSpec.
     * Either a well defined entity id for matching the enum names in
     * the MonitoringInfoLabels enum or any arbitrary label
     * set by a custom metric or user metric.
     * A monitoring system is expected to be able to aggregate the metrics
     * together for all updates having the same URN and labels. Some systems such
     * as Stackdriver will be able to aggregate the metrics using a subset of the
     * provided labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @java.lang.Override

    public java.lang.String getLabelsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetLabels().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int START_TIME_FIELD_NUMBER = 5;
    private com.google.protobuf.Timestamp startTime_;
    /**
     * <pre>
     * This indicates the start of the time range over which this value was
     * measured.
     * This is needed by some external metric aggregation services
     * to indicate when the reporter of the metric first began collecting the
     * cumulative value for the timeseries.
     * If the SDK Harness restarts, it should reset the start_time, and reset
     * the collection of cumulative metrics (i.e. start to count again from 0).
     * HarnessMonitoringInfos should set this start_time once, when the
     * MonitoringInfo is first reported.
     * ProcessBundle MonitoringInfos should set a start_time for each bundle.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return Whether the startTime field is set.
     */
    @java.lang.Override
    public boolean hasStartTime() {
      return startTime_ != null;
    }
    /**
     * <pre>
     * This indicates the start of the time range over which this value was
     * measured.
     * This is needed by some external metric aggregation services
     * to indicate when the reporter of the metric first began collecting the
     * cumulative value for the timeseries.
     * If the SDK Harness restarts, it should reset the start_time, and reset
     * the collection of cumulative metrics (i.e. start to count again from 0).
     * HarnessMonitoringInfos should set this start_time once, when the
     * MonitoringInfo is first reported.
     * ProcessBundle MonitoringInfos should set a start_time for each bundle.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return The startTime.
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getStartTime() {
      return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
    }
    /**
     * <pre>
     * This indicates the start of the time range over which this value was
     * measured.
     * This is needed by some external metric aggregation services
     * to indicate when the reporter of the metric first began collecting the
     * cumulative value for the timeseries.
     * If the SDK Harness restarts, it should reset the start_time, and reset
     * the collection of cumulative metrics (i.e. start to count again from 0).
     * HarnessMonitoringInfos should set this start_time once, when the
     * MonitoringInfo is first reported.
     * ProcessBundle MonitoringInfos should set a start_time for each bundle.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
      return getStartTime();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(urn_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, urn_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(type_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, type_);
      }
      if (!payload_.isEmpty()) {
        output.writeBytes(3, payload_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetLabels(),
          LabelsDefaultEntryHolder.defaultEntry,
          4);
      if (startTime_ != null) {
        output.writeMessage(5, getStartTime());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(urn_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, urn_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(type_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, type_);
      }
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, payload_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetLabels().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        labels__ = LabelsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, labels__);
      }
      if (startTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getStartTime());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo other = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo) obj;

      if (!getUrn()
          .equals(other.getUrn())) return false;
      if (!getType()
          .equals(other.getType())) return false;
      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (!internalGetLabels().equals(
          other.internalGetLabels())) return false;
      if (hasStartTime() != other.hasStartTime()) return false;
      if (hasStartTime()) {
        if (!getStartTime()
            .equals(other.getStartTime())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + URN_FIELD_NUMBER;
      hash = (53 * hash) + getUrn().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getType().hashCode();
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      if (!internalGetLabels().getMap().isEmpty()) {
        hash = (37 * hash) + LABELS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetLabels().hashCode();
      }
      if (hasStartTime()) {
        hash = (37 * hash) + START_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getStartTime().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.MonitoringInfo)
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetLabels();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetMutableLabels();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        urn_ = "";

        type_ = "";

        payload_ = com.google.protobuf.ByteString.EMPTY;

        internalGetMutableLabels().clear();
        if (startTimeBuilder_ == null) {
          startTime_ = null;
        } else {
          startTime_ = null;
          startTimeBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo build() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo buildPartial() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo result = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo(this);
        int from_bitField0_ = bitField0_;
        result.urn_ = urn_;
        result.type_ = type_;
        result.payload_ = payload_;
        result.labels_ = internalGetLabels();
        result.labels_.makeImmutable();
        if (startTimeBuilder_ == null) {
          result.startTime_ = startTime_;
        } else {
          result.startTime_ = startTimeBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo other) {
        if (other == org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo.getDefaultInstance()) return this;
        if (!other.getUrn().isEmpty()) {
          urn_ = other.urn_;
          onChanged();
        }
        if (!other.getType().isEmpty()) {
          type_ = other.type_;
          onChanged();
        }
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        internalGetMutableLabels().mergeFrom(
            other.internalGetLabels());
        if (other.hasStartTime()) {
          mergeStartTime(other.getStartTime());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object urn_ = "";
      /**
       * <pre>
       * (Required) Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @return The urn.
       */
      public java.lang.String getUrn() {
        java.lang.Object ref = urn_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          urn_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @return The bytes for urn.
       */
      public com.google.protobuf.ByteString
          getUrnBytes() {
        java.lang.Object ref = urn_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          urn_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @param value The urn to set.
       * @return This builder for chaining.
       */
      public Builder setUrn(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        urn_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrn() {
        
        urn_ = getDefaultInstance().getUrn();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Defines the semantic meaning of the metric or monitored state.
       * See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored
       * state.
       * </pre>
       *
       * <code>string urn = 1;</code>
       * @param value The bytes for urn to set.
       * @return This builder for chaining.
       */
      public Builder setUrnBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        urn_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <pre>
       * (Required) Defines the encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @return The type.
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Required) Defines the encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @return The bytes for type.
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Required) Defines the encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Defines the encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) Defines the encoding and aggregation method for the payload.
       * See MonitoringInfoTypeUrns.Enum for the set of well known types.
       * </pre>
       *
       * <code>string type = 2;</code>
       * @param value The bytes for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        type_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * (Required) The metric or monitored state encoded as per the specification
       * defined by the type.
       * </pre>
       *
       * <code>bytes payload = 3;</code>
       * @return The payload.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <pre>
       * (Required) The metric or monitored state encoded as per the specification
       * defined by the type.
       * </pre>
       *
       * <code>bytes payload = 3;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Required) The metric or monitored state encoded as per the specification
       * defined by the type.
       * </pre>
       *
       * <code>bytes payload = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> labels_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetLabels() {
        if (labels_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              LabelsDefaultEntryHolder.defaultEntry);
        }
        return labels_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableLabels() {
        onChanged();;
        if (labels_ == null) {
          labels_ = com.google.protobuf.MapField.newMapField(
              LabelsDefaultEntryHolder.defaultEntry);
        }
        if (!labels_.isMutable()) {
          labels_ = labels_.copy();
        }
        return labels_;
      }

      public int getLabelsCount() {
        return internalGetLabels().getMap().size();
      }
      /**
       * <pre>
       * A set of key and value labels which define the scope of the metric. For
       * well known URNs, the set of required labels is provided by the associated
       * MonitoringInfoSpec.
       * Either a well defined entity id for matching the enum names in
       * the MonitoringInfoLabels enum or any arbitrary label
       * set by a custom metric or user metric.
       * A monitoring system is expected to be able to aggregate the metrics
       * together for all updates having the same URN and labels. Some systems such
       * as Stackdriver will be able to aggregate the metrics using a subset of the
       * provided labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */

      @java.lang.Override
      public boolean containsLabels(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetLabels().getMap().containsKey(key);
      }
      /**
       * Use {@link #getLabelsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getLabels() {
        return getLabelsMap();
      }
      /**
       * <pre>
       * A set of key and value labels which define the scope of the metric. For
       * well known URNs, the set of required labels is provided by the associated
       * MonitoringInfoSpec.
       * Either a well defined entity id for matching the enum names in
       * the MonitoringInfoLabels enum or any arbitrary label
       * set by a custom metric or user metric.
       * A monitoring system is expected to be able to aggregate the metrics
       * together for all updates having the same URN and labels. Some systems such
       * as Stackdriver will be able to aggregate the metrics using a subset of the
       * provided labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
        return internalGetLabels().getMap();
      }
      /**
       * <pre>
       * A set of key and value labels which define the scope of the metric. For
       * well known URNs, the set of required labels is provided by the associated
       * MonitoringInfoSpec.
       * Either a well defined entity id for matching the enum names in
       * the MonitoringInfoLabels enum or any arbitrary label
       * set by a custom metric or user metric.
       * A monitoring system is expected to be able to aggregate the metrics
       * together for all updates having the same URN and labels. Some systems such
       * as Stackdriver will be able to aggregate the metrics using a subset of the
       * provided labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      @java.lang.Override

      public java.lang.String getLabelsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetLabels().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A set of key and value labels which define the scope of the metric. For
       * well known URNs, the set of required labels is provided by the associated
       * MonitoringInfoSpec.
       * Either a well defined entity id for matching the enum names in
       * the MonitoringInfoLabels enum or any arbitrary label
       * set by a custom metric or user metric.
       * A monitoring system is expected to be able to aggregate the metrics
       * together for all updates having the same URN and labels. Some systems such
       * as Stackdriver will be able to aggregate the metrics using a subset of the
       * provided labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      @java.lang.Override

      public java.lang.String getLabelsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetLabels().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearLabels() {
        internalGetMutableLabels().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A set of key and value labels which define the scope of the metric. For
       * well known URNs, the set of required labels is provided by the associated
       * MonitoringInfoSpec.
       * Either a well defined entity id for matching the enum names in
       * the MonitoringInfoLabels enum or any arbitrary label
       * set by a custom metric or user metric.
       * A monitoring system is expected to be able to aggregate the metrics
       * together for all updates having the same URN and labels. Some systems such
       * as Stackdriver will be able to aggregate the metrics using a subset of the
       * provided labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */

      public Builder removeLabels(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableLabels().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableLabels() {
        return internalGetMutableLabels().getMutableMap();
      }
      /**
       * <pre>
       * A set of key and value labels which define the scope of the metric. For
       * well known URNs, the set of required labels is provided by the associated
       * MonitoringInfoSpec.
       * Either a well defined entity id for matching the enum names in
       * the MonitoringInfoLabels enum or any arbitrary label
       * set by a custom metric or user metric.
       * A monitoring system is expected to be able to aggregate the metrics
       * together for all updates having the same URN and labels. Some systems such
       * as Stackdriver will be able to aggregate the metrics using a subset of the
       * provided labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      public Builder putLabels(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableLabels().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A set of key and value labels which define the scope of the metric. For
       * well known URNs, the set of required labels is provided by the associated
       * MonitoringInfoSpec.
       * Either a well defined entity id for matching the enum names in
       * the MonitoringInfoLabels enum or any arbitrary label
       * set by a custom metric or user metric.
       * A monitoring system is expected to be able to aggregate the metrics
       * together for all updates having the same URN and labels. Some systems such
       * as Stackdriver will be able to aggregate the metrics using a subset of the
       * provided labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */

      public Builder putAllLabels(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableLabels().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.Timestamp startTime_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> startTimeBuilder_;
      /**
       * <pre>
       * This indicates the start of the time range over which this value was
       * measured.
       * This is needed by some external metric aggregation services
       * to indicate when the reporter of the metric first began collecting the
       * cumulative value for the timeseries.
       * If the SDK Harness restarts, it should reset the start_time, and reset
       * the collection of cumulative metrics (i.e. start to count again from 0).
       * HarnessMonitoringInfos should set this start_time once, when the
       * MonitoringInfo is first reported.
       * ProcessBundle MonitoringInfos should set a start_time for each bundle.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 5;</code>
       * @return Whether the startTime field is set.
       */
      public boolean hasStartTime() {
        return startTimeBuilder_ != null || startTime_ != null;
      }
      /**
       * <pre>
       * This indicates the start of the time range over which this value was
       * measured.
       * This is needed by some external metric aggregation services
       * to indicate when the reporter of the metric first began collecting the
       * cumulative value for the timeseries.
       * If the SDK Harness restarts, it should reset the start_time, and reset
       * the collection of cumulative metrics (i.e. start to count again from 0).
       * HarnessMonitoringInfos should set this start_time once, when the
       * MonitoringInfo is first reported.
       * ProcessBundle MonitoringInfos should set a start_time for each bundle.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 5;</code>
       * @return The startTime.
       */
      public com.google.protobuf.Timestamp getStartTime() {
        if (startTimeBuilder_ == null) {
          return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
        } else {
          return startTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This indicates the start of the time range over which this value was
       * measured.
       * This is needed by some external metric aggregation services
       * to indicate when the reporter of the metric first began collecting the
       * cumulative value for the timeseries.
       * If the SDK Harness restarts, it should reset the start_time, and reset
       * the collection of cumulative metrics (i.e. start to count again from 0).
       * HarnessMonitoringInfos should set this start_time once, when the
       * MonitoringInfo is first reported.
       * ProcessBundle MonitoringInfos should set a start_time for each bundle.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 5;</code>
       */
      public Builder setStartTime(com.google.protobuf.Timestamp value) {
        if (startTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          startTime_ = value;
          onChanged();
        } else {
          startTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * This indicates the start of the time range over which this value was
       * measured.
       * This is needed by some external metric aggregation services
       * to indicate when the reporter of the metric first began collecting the
       * cumulative value for the timeseries.
       * If the SDK Harness restarts, it should reset the start_time, and reset
       * the collection of cumulative metrics (i.e. start to count again from 0).
       * HarnessMonitoringInfos should set this start_time once, when the
       * MonitoringInfo is first reported.
       * ProcessBundle MonitoringInfos should set a start_time for each bundle.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 5;</code>
       */
      public Builder setStartTime(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (startTimeBuilder_ == null) {
          startTime_ = builderForValue.build();
          onChanged();
        } else {
          startTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * This indicates the start of the time range over which this value was
       * measured.
       * This is needed by some external metric aggregation services
       * to indicate when the reporter of the metric first began collecting the
       * cumulative value for the timeseries.
       * If the SDK Harness restarts, it should reset the start_time, and reset
       * the collection of cumulative metrics (i.e. start to count again from 0).
       * HarnessMonitoringInfos should set this start_time once, when the
       * MonitoringInfo is first reported.
       * ProcessBundle MonitoringInfos should set a start_time for each bundle.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 5;</code>
       */
      public Builder mergeStartTime(com.google.protobuf.Timestamp value) {
        if (startTimeBuilder_ == null) {
          if (startTime_ != null) {
            startTime_ =
              com.google.protobuf.Timestamp.newBuilder(startTime_).mergeFrom(value).buildPartial();
          } else {
            startTime_ = value;
          }
          onChanged();
        } else {
          startTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * This indicates the start of the time range over which this value was
       * measured.
       * This is needed by some external metric aggregation services
       * to indicate when the reporter of the metric first began collecting the
       * cumulative value for the timeseries.
       * If the SDK Harness restarts, it should reset the start_time, and reset
       * the collection of cumulative metrics (i.e. start to count again from 0).
       * HarnessMonitoringInfos should set this start_time once, when the
       * MonitoringInfo is first reported.
       * ProcessBundle MonitoringInfos should set a start_time for each bundle.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 5;</code>
       */
      public Builder clearStartTime() {
        if (startTimeBuilder_ == null) {
          startTime_ = null;
          onChanged();
        } else {
          startTime_ = null;
          startTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * This indicates the start of the time range over which this value was
       * measured.
       * This is needed by some external metric aggregation services
       * to indicate when the reporter of the metric first began collecting the
       * cumulative value for the timeseries.
       * If the SDK Harness restarts, it should reset the start_time, and reset
       * the collection of cumulative metrics (i.e. start to count again from 0).
       * HarnessMonitoringInfos should set this start_time once, when the
       * MonitoringInfo is first reported.
       * ProcessBundle MonitoringInfos should set a start_time for each bundle.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 5;</code>
       */
      public com.google.protobuf.Timestamp.Builder getStartTimeBuilder() {
        
        onChanged();
        return getStartTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This indicates the start of the time range over which this value was
       * measured.
       * This is needed by some external metric aggregation services
       * to indicate when the reporter of the metric first began collecting the
       * cumulative value for the timeseries.
       * If the SDK Harness restarts, it should reset the start_time, and reset
       * the collection of cumulative metrics (i.e. start to count again from 0).
       * HarnessMonitoringInfos should set this start_time once, when the
       * MonitoringInfo is first reported.
       * ProcessBundle MonitoringInfos should set a start_time for each bundle.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 5;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
        if (startTimeBuilder_ != null) {
          return startTimeBuilder_.getMessageOrBuilder();
        } else {
          return startTime_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
        }
      }
      /**
       * <pre>
       * This indicates the start of the time range over which this value was
       * measured.
       * This is needed by some external metric aggregation services
       * to indicate when the reporter of the metric first began collecting the
       * cumulative value for the timeseries.
       * If the SDK Harness restarts, it should reset the start_time, and reset
       * the collection of cumulative metrics (i.e. start to count again from 0).
       * HarnessMonitoringInfos should set this start_time once, when the
       * MonitoringInfo is first reported.
       * ProcessBundle MonitoringInfos should set a start_time for each bundle.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          getStartTimeFieldBuilder() {
        if (startTimeBuilder_ == null) {
          startTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getStartTime(),
                  getParentForChildren(),
                  isClean());
          startTime_ = null;
        }
        return startTimeBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.MonitoringInfo)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.MonitoringInfo)
    private static final org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo();
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitoringInfo>
        PARSER = new com.google.protobuf.AbstractParser<MonitoringInfo>() {
      @java.lang.Override
      public MonitoringInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitoringInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitoringInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitoringInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MonitoringInfoTypeUrnsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * A set of well known URNs that specify the encoding and aggregation method.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns}
   */
  public static final class MonitoringInfoTypeUrns extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns)
      MonitoringInfoTypeUrnsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitoringInfoTypeUrns.newBuilder() to construct.
    private MonitoringInfoTypeUrns(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitoringInfoTypeUrns() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitoringInfoTypeUrns();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitoringInfoTypeUrns(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns.Enum}
     */
    public enum Enum
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Represents an integer counter where values are summed across bundles.
       * Encoding: &lt;value&gt;
       *   - value: beam:coder:varint:v1
       * </pre>
       *
       * <code>SUM_INT64_TYPE = 0 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:sum_int64:v1"];</code>
       */
      SUM_INT64_TYPE(0),
      /**
       * <pre>
       * Represents a double counter where values are summed across bundles.
       * Encoding: &lt;value&gt;
       *   value: beam:coder:double:v1
       * </pre>
       *
       * <code>SUM_DOUBLE_TYPE = 1 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:sum_double:v1"];</code>
       */
      SUM_DOUBLE_TYPE(1),
      /**
       * <pre>
       * Represents a distribution of an integer value where:
       *   - count: represents the number of values seen across all bundles
       *   - sum: represents the total of the value across all bundles
       *   - min: represents the smallest value seen across all bundles
       *   - max: represents the largest value seen across all bundles
       * Encoding: &lt;count&gt;&lt;sum&gt;&lt;min&gt;&lt;max&gt;
       *   - count: beam:coder:varint:v1
       *   - sum:   beam:coder:varint:v1
       *   - min:   beam:coder:varint:v1
       *   - max:   beam:coder:varint:v1
       * </pre>
       *
       * <code>DISTRIBUTION_INT64_TYPE = 2 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:distribution_int64:v1"];</code>
       */
      DISTRIBUTION_INT64_TYPE(2),
      /**
       * <pre>
       * Represents a distribution of a double value where:
       *   - count: represents the number of values seen across all bundles
       *   - sum: represents the total of the value across all bundles
       *   - min: represents the smallest value seen across all bundles
       *   - max: represents the largest value seen across all bundles
       * Encoding: &lt;count&gt;&lt;sum&gt;&lt;min&gt;&lt;max&gt;
       *   - count: beam:coder:varint:v1
       *   - sum:   beam:coder:double:v1
       *   - min:   beam:coder:double:v1
       *   - max:   beam:coder:double:v1
       * </pre>
       *
       * <code>DISTRIBUTION_DOUBLE_TYPE = 3 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:distribution_double:v1"];</code>
       */
      DISTRIBUTION_DOUBLE_TYPE(3),
      /**
       * <pre>
       * Represents the latest seen integer value. The timestamp is used to
       * provide an "ordering" over multiple values to determine which is the
       * latest.
       * Encoding: &lt;timestamp&gt;&lt;value&gt;
       *   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)
       *   - value:     beam:coder:varint:v1
       * </pre>
       *
       * <code>LATEST_INT64_TYPE = 4 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:latest_int64:v1"];</code>
       */
      LATEST_INT64_TYPE(4),
      /**
       * <pre>
       * Represents the latest seen double value. The timestamp is used to
       * provide an "ordering" over multiple values to determine which is the
       * latest.
       * Encoding: &lt;timestamp&gt;&lt;value&gt;
       *   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)
       *   - value:     beam:coder:double:v1
       * </pre>
       *
       * <code>LATEST_DOUBLE_TYPE = 5 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:latest_double:v1"];</code>
       */
      LATEST_DOUBLE_TYPE(5),
      /**
       * <pre>
       * Represents the largest set of integer values seen across bundles.
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder:varint:v1
       * </pre>
       *
       * <code>TOP_N_INT64_TYPE = 6 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:top_n_int64:v1"];</code>
       */
      TOP_N_INT64_TYPE(6),
      /**
       * <pre>
       * Represents the largest set of double values seen across bundles.
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder&lt;beam:coder:double:v1
       * </pre>
       *
       * <code>TOP_N_DOUBLE_TYPE = 7 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:top_n_double:v1"];</code>
       */
      TOP_N_DOUBLE_TYPE(7),
      /**
       * <pre>
       * Represents the smallest set of integer values seen across bundles.
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder:varint:v1
       * </pre>
       *
       * <code>BOTTOM_N_INT64_TYPE = 8 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:bottom_n_int64:v1"];</code>
       */
      BOTTOM_N_INT64_TYPE(8),
      /**
       * <pre>
       * Represents the smallest set of double values seen across bundles.
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder:double:v1
       * </pre>
       *
       * <code>BOTTOM_N_DOUBLE_TYPE = 9 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:bottom_n_double:v1"];</code>
       */
      BOTTOM_N_DOUBLE_TYPE(9),
      /**
       * <pre>
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder:double:v1
       * </pre>
       *
       * <code>PROGRESS_TYPE = 10 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:progress:v1"];</code>
       */
      PROGRESS_TYPE(10),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Represents an integer counter where values are summed across bundles.
       * Encoding: &lt;value&gt;
       *   - value: beam:coder:varint:v1
       * </pre>
       *
       * <code>SUM_INT64_TYPE = 0 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:sum_int64:v1"];</code>
       */
      public static final int SUM_INT64_TYPE_VALUE = 0;
      /**
       * <pre>
       * Represents a double counter where values are summed across bundles.
       * Encoding: &lt;value&gt;
       *   value: beam:coder:double:v1
       * </pre>
       *
       * <code>SUM_DOUBLE_TYPE = 1 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:sum_double:v1"];</code>
       */
      public static final int SUM_DOUBLE_TYPE_VALUE = 1;
      /**
       * <pre>
       * Represents a distribution of an integer value where:
       *   - count: represents the number of values seen across all bundles
       *   - sum: represents the total of the value across all bundles
       *   - min: represents the smallest value seen across all bundles
       *   - max: represents the largest value seen across all bundles
       * Encoding: &lt;count&gt;&lt;sum&gt;&lt;min&gt;&lt;max&gt;
       *   - count: beam:coder:varint:v1
       *   - sum:   beam:coder:varint:v1
       *   - min:   beam:coder:varint:v1
       *   - max:   beam:coder:varint:v1
       * </pre>
       *
       * <code>DISTRIBUTION_INT64_TYPE = 2 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:distribution_int64:v1"];</code>
       */
      public static final int DISTRIBUTION_INT64_TYPE_VALUE = 2;
      /**
       * <pre>
       * Represents a distribution of a double value where:
       *   - count: represents the number of values seen across all bundles
       *   - sum: represents the total of the value across all bundles
       *   - min: represents the smallest value seen across all bundles
       *   - max: represents the largest value seen across all bundles
       * Encoding: &lt;count&gt;&lt;sum&gt;&lt;min&gt;&lt;max&gt;
       *   - count: beam:coder:varint:v1
       *   - sum:   beam:coder:double:v1
       *   - min:   beam:coder:double:v1
       *   - max:   beam:coder:double:v1
       * </pre>
       *
       * <code>DISTRIBUTION_DOUBLE_TYPE = 3 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:distribution_double:v1"];</code>
       */
      public static final int DISTRIBUTION_DOUBLE_TYPE_VALUE = 3;
      /**
       * <pre>
       * Represents the latest seen integer value. The timestamp is used to
       * provide an "ordering" over multiple values to determine which is the
       * latest.
       * Encoding: &lt;timestamp&gt;&lt;value&gt;
       *   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)
       *   - value:     beam:coder:varint:v1
       * </pre>
       *
       * <code>LATEST_INT64_TYPE = 4 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:latest_int64:v1"];</code>
       */
      public static final int LATEST_INT64_TYPE_VALUE = 4;
      /**
       * <pre>
       * Represents the latest seen double value. The timestamp is used to
       * provide an "ordering" over multiple values to determine which is the
       * latest.
       * Encoding: &lt;timestamp&gt;&lt;value&gt;
       *   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)
       *   - value:     beam:coder:double:v1
       * </pre>
       *
       * <code>LATEST_DOUBLE_TYPE = 5 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:latest_double:v1"];</code>
       */
      public static final int LATEST_DOUBLE_TYPE_VALUE = 5;
      /**
       * <pre>
       * Represents the largest set of integer values seen across bundles.
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder:varint:v1
       * </pre>
       *
       * <code>TOP_N_INT64_TYPE = 6 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:top_n_int64:v1"];</code>
       */
      public static final int TOP_N_INT64_TYPE_VALUE = 6;
      /**
       * <pre>
       * Represents the largest set of double values seen across bundles.
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder&lt;beam:coder:double:v1
       * </pre>
       *
       * <code>TOP_N_DOUBLE_TYPE = 7 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:top_n_double:v1"];</code>
       */
      public static final int TOP_N_DOUBLE_TYPE_VALUE = 7;
      /**
       * <pre>
       * Represents the smallest set of integer values seen across bundles.
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder:varint:v1
       * </pre>
       *
       * <code>BOTTOM_N_INT64_TYPE = 8 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:bottom_n_int64:v1"];</code>
       */
      public static final int BOTTOM_N_INT64_TYPE_VALUE = 8;
      /**
       * <pre>
       * Represents the smallest set of double values seen across bundles.
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder:double:v1
       * </pre>
       *
       * <code>BOTTOM_N_DOUBLE_TYPE = 9 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:bottom_n_double:v1"];</code>
       */
      public static final int BOTTOM_N_DOUBLE_TYPE_VALUE = 9;
      /**
       * <pre>
       * Encoding: &lt;iter&gt;&lt;value1&gt;&lt;value2&gt;...&lt;valueN&gt;&lt;/iter&gt;
       *   - iter:   beam:coder:iterable:v1
       *   - valueX: beam:coder:double:v1
       * </pre>
       *
       * <code>PROGRESS_TYPE = 10 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:metrics:progress:v1"];</code>
       */
      public static final int PROGRESS_TYPE_VALUE = 10;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Enum valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Enum forNumber(int value) {
        switch (value) {
          case 0: return SUM_INT64_TYPE;
          case 1: return SUM_DOUBLE_TYPE;
          case 2: return DISTRIBUTION_INT64_TYPE;
          case 3: return DISTRIBUTION_DOUBLE_TYPE;
          case 4: return LATEST_INT64_TYPE;
          case 5: return LATEST_DOUBLE_TYPE;
          case 6: return TOP_N_INT64_TYPE;
          case 7: return TOP_N_DOUBLE_TYPE;
          case 8: return BOTTOM_N_INT64_TYPE;
          case 9: return BOTTOM_N_DOUBLE_TYPE;
          case 10: return PROGRESS_TYPE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Enum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Enum> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Enum>() {
              public Enum findValueByNumber(int number) {
                return Enum.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns.getDescriptor().getEnumTypes().get(0);
      }

      private static final Enum[] VALUES = values();

      public static Enum valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Enum(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns.Enum)
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns other = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A set of well known URNs that specify the encoding and aggregation method.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns)
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrnsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns.class, org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns build() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns buildPartial() {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns result = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns other) {
        if (other == org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.MonitoringInfoTypeUrns)
    private static final org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns();
    }

    public static org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitoringInfoTypeUrns>
        PARSER = new com.google.protobuf.AbstractParser<MonitoringInfoTypeUrns>() {
      @java.lang.Override
      public MonitoringInfoTypeUrns parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitoringInfoTypeUrns(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitoringInfoTypeUrns> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitoringInfoTypeUrns> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoTypeUrns getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int LABEL_PROPS_FIELD_NUMBER = 127337796;
  /**
   * <pre>
   * From: commit 0x7970544.
   * </pre>
   *
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps> labelProps = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps.class,
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoLabelProps.getDefaultInstance());
  public static final int MONITORING_INFO_SPEC_FIELD_NUMBER = 207174266;
  /**
   * <pre>
   * Enum extension to store the MonitoringInfoSpecs.
   * </pre>
   *
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec> monitoringInfoSpec = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec.class,
        org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfoSpec.getDefaultInstance());
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_Annotation_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_Annotation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_LabelsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_LabelsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n/org/apache/beam/model/pipeline/v1/metr" +
      "ics.proto\022!org.apache.beam.model.pipelin" +
      "e.v1\0327org/apache/beam/model/pipeline/v1/" +
      "beam_runner_api.proto\032 google/protobuf/d" +
      "escriptor.proto\032\037google/protobuf/timesta" +
      "mp.proto\"\214\001\n\022MonitoringInfoSpec\022\013\n\003urn\030\001" +
      " \001(\t\022\014\n\004type\030\002 \001(\t\022\027\n\017required_labels\030\003 " +
      "\003(\t\022B\n\013annotations\030\004 \003(\0132-.org.apache.be" +
      "am.model.pipeline.v1.Annotation\"(\n\nAnnot" +
      "ation\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\321#\n\023Mo" +
      "nitoringInfoSpecs\"\271#\n\004Enum\022\247\001\n\016USER_SUM_" +
      "INT64\020\000\032\222\001\322\247\247\226\006\213\001\n\035beam:metric:user:sum_" +
      "int64:v1\022\031beam:metrics:sum_int64:v1\032\nPTR" +
      "ANSFORM\032\tNAMESPACE\032\004NAME\"2\n\013description\022" +
      "#URN utilized to report user metric.\022\252\001\n" +
      "\017USER_SUM_DOUBLE\020\001\032\224\001\322\247\247\226\006\215\001\n\036beam:metri" +
      "c:user:sum_double:v1\022\032beam:metrics:sum_d" +
      "ouble:v1\032\nPTRANSFORM\032\tNAMESPACE\032\004NAME\"2\n" +
      "\013description\022#URN utilized to report use" +
      "r metric.\022\302\001\n\027USER_DISTRIBUTION_INT64\020\002\032" +
      "\244\001\322\247\247\226\006\235\001\n&beam:metric:user:distribution" +
      "_int64:v1\022\"beam:metrics:distribution_int" +
      "64:v1\032\nPTRANSFORM\032\tNAMESPACE\032\004NAME\"2\n\013de" +
      "scription\022#URN utilized to report user m" +
      "etric.\022\305\001\n\030USER_DISTRIBUTION_DOUBLE\020\003\032\246\001" +
      "\322\247\247\226\006\237\001\n\'beam:metric:user:distribution_d" +
      "ouble:v1\022#beam:metrics:distribution_doub" +
      "le:v1\032\nPTRANSFORM\032\tNAMESPACE\032\004NAME\"2\n\013de" +
      "scription\022#URN utilized to report user m" +
      "etric.\022\260\001\n\021USER_LATEST_INT64\020\004\032\230\001\322\247\247\226\006\221\001" +
      "\n beam:metric:user:latest_int64:v1\022\034beam" +
      ":metrics:latest_int64:v1\032\nPTRANSFORM\032\tNA" +
      "MESPACE\032\004NAME\"2\n\013description\022#URN utiliz" +
      "ed to report user metric.\022\263\001\n\022USER_LATES" +
      "T_DOUBLE\020\005\032\232\001\322\247\247\226\006\223\001\n!beam:metric:user:l" +
      "atest_double:v1\022\035beam:metrics:latest_dou" +
      "ble:v1\032\nPTRANSFORM\032\tNAMESPACE\032\004NAME\"2\n\013d" +
      "escription\022#URN utilized to report user " +
      "metric.\022\255\001\n\020USER_TOP_N_INT64\020\006\032\226\001\322\247\247\226\006\217\001" +
      "\n\037beam:metric:user:top_n_int64:v1\022\033beam:" +
      "metrics:top_n_int64:v1\032\nPTRANSFORM\032\tNAME" +
      "SPACE\032\004NAME\"2\n\013description\022#URN utilized" +
      " to report user metric.\022\260\001\n\021USER_TOP_N_D" +
      "OUBLE\020\007\032\230\001\322\247\247\226\006\221\001\n beam:metric:user:top_" +
      "n_double:v1\022\034beam:metrics:top_n_double:v" +
      "1\032\nPTRANSFORM\032\tNAMESPACE\032\004NAME\"2\n\013descri" +
      "ption\022#URN utilized to report user metri" +
      "c.\022\266\001\n\023USER_BOTTOM_N_INT64\020\010\032\234\001\322\247\247\226\006\225\001\n\"" +
      "beam:metric:user:bottom_n_int64:v1\022\036beam" +
      ":metrics:bottom_n_int64:v1\032\nPTRANSFORM\032\t" +
      "NAMESPACE\032\004NAME\"2\n\013description\022#URN util" +
      "ized to report user metric.\022\271\001\n\024USER_BOT" +
      "TOM_N_DOUBLE\020\t\032\236\001\322\247\247\226\006\227\001\n#beam:metric:us" +
      "er:bottom_n_double:v1\022\037beam:metrics:bott" +
      "om_n_double:v1\032\nPTRANSFORM\032\tNAMESPACE\032\004N" +
      "AME\"2\n\013description\022#URN utilized to repo" +
      "rt user metric.\022\255\001\n\rELEMENT_COUNT\020\n\032\231\001\322\247" +
      "\247\226\006\222\001\n\034beam:metric:element_count:v1\022\031bea" +
      "m:metrics:sum_int64:v1\032\013PCOLLECTION\"J\n\013d" +
      "escription\022;The total elements output to" +
      " a Pcollection by a PTransform.\022\315\002\n\021SAMP" +
      "LED_BYTE_SIZE\020\013\032\265\002\322\247\247\226\006\256\002\n beam:metric:s" +
      "ampled_byte_size:v1\022\"beam:metrics:distri" +
      "bution_int64:v1\032\013PCOLLECTION\"\330\001\n\013descrip" +
      "tion\022\310\001The total byte size and count of " +
      "a sampled  set (or all) of elements in t" +
      "he pcollection. Sampling is used  becaus" +
      "e calculating the byte count involves se" +
      "rializing the  elements which is CPU int" +
      "ensive.\022\331\001\n\022START_BUNDLE_MSECS\020\014\032\300\001\322\247\247\226\006" +
      "\271\001\n6beam:metric:pardo_execution_time:sta" +
      "rt_bundle_msecs:v1\022\031beam:metrics:sum_int" +
      "64:v1\032\nPTRANSFORM\"X\n\013description\022IThe to" +
      "tal estimated execution time of the star" +
      "t bundlefunction in a pardo\022\337\001\n\024PROCESS_" +
      "BUNDLE_MSECS\020\r\032\304\001\322\247\247\226\006\275\001\n8beam:metric:pa" +
      "rdo_execution_time:process_bundle_msecs:" +
      "v1\022\031beam:metrics:sum_int64:v1\032\nPTRANSFOR" +
      "M\"Z\n\013description\022KThe total estimated ex" +
      "ecution time of the process bundlefuncti" +
      "on in a pardo\022\335\001\n\023FINISH_BUNDLE_MSECS\020\016\032" +
      "\303\001\322\247\247\226\006\274\001\n7beam:metric:pardo_execution_t" +
      "ime:finish_bundle_msecs:v1\022\031beam:metrics" +
      ":sum_int64:v1\032\nPTRANSFORM\"Z\n\013description" +
      "\022KThe total estimated execution time of " +
      "the finish bundle function in a pardo\022\273\001" +
      "\n\013TOTAL_MSECS\020\017\032\251\001\322\247\247\226\006\242\001\n4beam:metric:p" +
      "transform_execution_time:total_msecs:v1\022" +
      "\031beam:metrics:sum_int64:v1\032\nPTRANSFORM\"C" +
      "\n\013description\0224The total estimated execu" +
      "tion time of the ptransform\022\237\002\n\016WORK_REM" +
      "AINING\020\020\032\212\002\322\247\247\226\006\203\002\n,beam:metric:ptransfo" +
      "rm_progress:remaining:v1\022\030beam:metrics:p" +
      "rogress:v1\032\nPTRANSFORM\"\254\001\n\013description\022\234" +
      "\001The remaining amount of work for each a" +
      "ctive element. Each active element repre" +
      "sents an independent amount of work not " +
      "shared with any other active element.\022\237\002" +
      "\n\016WORK_COMPLETED\020\021\032\212\002\322\247\247\226\006\203\002\n,beam:metri" +
      "c:ptransform_progress:completed:v1\022\030beam" +
      ":metrics:progress:v1\032\nPTRANSFORM\"\254\001\n\013des" +
      "cription\022\234\001The remaining amount of work " +
      "for each active element. Each active ele" +
      "ment represents an independent amount of" +
      " work not shared with any other active e" +
      "lement.\022\250\001\n\027DATA_CHANNEL_READ_INDEX\020\022\032\212\001" +
      "\322\247\247\226\006\203\001\n&beam:metric:data_channel:read_i" +
      "ndex:v1\022\031beam:metrics:sum_int64:v1\032\nPTRA" +
      "NSFORM\"2\n\013description\022#The read index of" +
      " the data channel.\022\212\002\n\021API_REQUEST_COUNT" +
      "\020\023\032\362\001\322\247\247\226\006\353\001\n#beam:metric:io:api_request" +
      "_count:v1\022\031beam:metrics:sum_int64:v1\032\007SE" +
      "RVICE\032\006METHOD\032\010RESOURCE\032\nPTRANSFORM\032\006STA" +
      "TUS\"b\n\013description\022SRequest counts with " +
      "status made to IO service APIs to batch " +
      "read or write elements.\"\026\n\016process_metri" +
      "c\022\004true\022\263\002\n\025API_REQUEST_LATENCIES\020\024\032\227\002\322\247" +
      "\247\226\006\220\002\n\'beam:metric:io:api_request_latenc" +
      "ies:v1\022\037beam:metrics:histogram_int64:v1\032" +
      "\007SERVICE\032\006METHOD\032\010RESOURCE\032\nPTRANSFORM\"n" +
      "\n\013description\022_Histogram counts for requ" +
      "est latencies made to IO service APIs to" +
      " batch read or write elements.\"\025\n\005units\022" +
      "\014Milliseconds\"\026\n\016process_metric\022\004true\"(\n" +
      "\030MonitoringInfoLabelProps\022\014\n\004name\030\001 \001(\t\"" +
      "\232\013\n\016MonitoringInfo\022\013\n\003urn\030\001 \001(\t\022\014\n\004type\030" +
      "\002 \001(\t\022\017\n\007payload\030\003 \001(\014\022M\n\006labels\030\004 \003(\0132=" +
      ".org.apache.beam.model.pipeline.v1.Monit" +
      "oringInfo.LabelsEntry\022.\n\nstart_time\030\005 \001(" +
      "\0132\032.google.protobuf.Timestamp\032-\n\013LabelsE" +
      "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\255\t\n" +
      "\024MonitoringInfoLabels\022!\n\tTRANSFORM\020\000\032\022\242\324" +
      "\340\345\003\014\n\nPTRANSFORM\022$\n\013PCOLLECTION\020\001\032\023\242\324\340\345\003" +
      "\r\n\013PCOLLECTION\0222\n\022WINDOWING_STRATEGY\020\002\032\032" +
      "\242\324\340\345\003\024\n\022WINDOWING_STRATEGY\022\030\n\005CODER\020\003\032\r\242" +
      "\324\340\345\003\007\n\005CODER\022$\n\013ENVIRONMENT\020\004\032\023\242\324\340\345\003\r\n\013E" +
      "NVIRONMENT\022 \n\tNAMESPACE\020\005\032\021\242\324\340\345\003\013\n\tNAMES" +
      "PACE\022\026\n\004NAME\020\006\032\014\242\324\340\345\003\006\n\004NAME\022\034\n\007SERVICE\020" +
      "\007\032\017\242\324\340\345\003\t\n\007SERVICE\022\032\n\006METHOD\020\010\032\016\242\324\340\345\003\010\n\006" +
      "METHOD\022\036\n\010RESOURCE\020\t\032\020\242\324\340\345\003\n\n\010RESOURCE\022\032" +
      "\n\006STATUS\020\n\032\016\242\324\340\345\003\010\n\006STATUS\0224\n\023BIGQUERY_P" +
      "ROJECT_ID\020\013\032\033\242\324\340\345\003\025\n\023BIGQUERY_PROJECT_ID" +
      "\022.\n\020BIGQUERY_DATASET\020\014\032\030\242\324\340\345\003\022\n\020BIGQUERY" +
      "_DATASET\022*\n\016BIGQUERY_TABLE\020\r\032\026\242\324\340\345\003\020\n\016BI" +
      "GQUERY_TABLE\022(\n\rBIGQUERY_VIEW\020\016\032\025\242\324\340\345\003\017\n" +
      "\rBIGQUERY_VIEW\0224\n\023BIGQUERY_QUERY_NAME\020\017\032" +
      "\033\242\324\340\345\003\025\n\023BIGQUERY_QUERY_NAME\022\"\n\nGCS_BUCK" +
      "ET\020\020\032\022\242\324\340\345\003\014\n\nGCS_BUCKET\022*\n\016GCS_PROJECT_" +
      "ID\020\021\032\026\242\324\340\345\003\020\n\016GCS_PROJECT_ID\0220\n\021DATASTOR" +
      "E_PROJECT\020\022\032\031\242\324\340\345\003\023\n\021DATASTORE_PROJECT\0224" +
      "\n\023DATASTORE_NAMESPACE\020\023\032\033\242\324\340\345\003\025\n\023DATASTO" +
      "RE_NAMESPACE\0224\n\023BIGTABLE_PROJECT_ID\020\024\032\033\242" +
      "\324\340\345\003\025\n\023BIGTABLE_PROJECT_ID\022$\n\013INSTANCE_I" +
      "D\020\025\032\023\242\324\340\345\003\r\n\013INSTANCE_ID\022\036\n\010TABLE_ID\020\026\032\020" +
      "\242\324\340\345\003\n\n\010TABLE_ID\0222\n\022SPANNER_PROJECT_ID\020\027" +
      "\032\032\242\324\340\345\003\024\n\022SPANNER_PROJECT_ID\0224\n\023SPANNER_" +
      "DATABASE_ID\020\030\032\033\242\324\340\345\003\025\n\023SPANNER_DATABASE_" +
      "ID\022.\n\020SPANNER_TABLE_ID\020\031\032\030\242\324\340\345\003\022\n\020SPANNE" +
      "R_TABLE_ID\0224\n\023SPANNER_INSTANCE_ID\020\032\032\033\242\324\340" +
      "\345\003\025\n\023SPANNER_INSTANCE_ID\0222\n\022SPANNER_QUER" +
      "Y_NAME\020\033\032\032\242\324\340\345\003\024\n\022SPANNER_QUERY_NAME\"\274\005\n" +
      "\026MonitoringInfoTypeUrns\"\241\005\n\004Enum\0223\n\016SUM_" +
      "INT64_TYPE\020\000\032\037\242\264\372\302\005\031beam:metrics:sum_int" +
      "64:v1\0225\n\017SUM_DOUBLE_TYPE\020\001\032 \242\264\372\302\005\032beam:m" +
      "etrics:sum_double:v1\022E\n\027DISTRIBUTION_INT" +
      "64_TYPE\020\002\032(\242\264\372\302\005\"beam:metrics:distributi" +
      "on_int64:v1\022G\n\030DISTRIBUTION_DOUBLE_TYPE\020" +
      "\003\032)\242\264\372\302\005#beam:metrics:distribution_doubl" +
      "e:v1\0229\n\021LATEST_INT64_TYPE\020\004\032\"\242\264\372\302\005\034beam:" +
      "metrics:latest_int64:v1\022;\n\022LATEST_DOUBLE" +
      "_TYPE\020\005\032#\242\264\372\302\005\035beam:metrics:latest_doubl" +
      "e:v1\0227\n\020TOP_N_INT64_TYPE\020\006\032!\242\264\372\302\005\033beam:m" +
      "etrics:top_n_int64:v1\0229\n\021TOP_N_DOUBLE_TY" +
      "PE\020\007\032\"\242\264\372\302\005\034beam:metrics:top_n_double:v1" +
      "\022=\n\023BOTTOM_N_INT64_TYPE\020\010\032$\242\264\372\302\005\036beam:me" +
      "trics:bottom_n_int64:v1\022?\n\024BOTTOM_N_DOUB" +
      "LE_TYPE\020\t\032%\242\264\372\302\005\037beam:metrics:bottom_n_d" +
      "ouble:v1\0221\n\rPROGRESS_TYPE\020\n\032\036\242\264\372\302\005\030beam:" +
      "metrics:progress:v1:v\n\013label_props\022!.goo" +
      "gle.protobuf.EnumValueOptions\030\304\212\334< \001(\0132;" +
      ".org.apache.beam.model.pipeline.v1.Monit" +
      "oringInfoLabelProps:y\n\024monitoring_info_s" +
      "pec\022!.google.protobuf.EnumValueOptions\030\372" +
      "\364\344b \001(\01325.org.apache.beam.model.pipeline" +
      ".v1.MonitoringInfoSpecBy\n!org.apache.bea" +
      "m.model.pipeline.v1B\nMetricsApiZHgithub." +
      "com/apache/beam/sdks/v2/go/pkg/beam/mode" +
      "l/pipeline_v1;pipeline_v1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.apache.beam.model.pipeline.v1.RunnerApi.getDescriptor(),
          com.google.protobuf.DescriptorProtos.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpec_descriptor,
        new java.lang.String[] { "Urn", "Type", "RequiredLabels", "Annotations", });
    internal_static_org_apache_beam_model_pipeline_v1_Annotation_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_apache_beam_model_pipeline_v1_Annotation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_Annotation_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoSpecs_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoLabelProps_descriptor,
        new java.lang.String[] { "Name", });
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_descriptor,
        new java.lang.String[] { "Urn", "Type", "Payload", "Labels", "StartTime", });
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_LabelsEntry_descriptor =
      internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_LabelsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfo_LabelsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_MonitoringInfoTypeUrns_descriptor,
        new java.lang.String[] { });
    labelProps.internalInit(descriptor.getExtensions().get(0));
    monitoringInfoSpec.internalInit(descriptor.getExtensions().get(1));
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(org.apache.beam.model.pipeline.v1.RunnerApi.beamUrn);
    registry.add(org.apache.beam.model.pipeline.v1.MetricsApi.labelProps);
    registry.add(org.apache.beam.model.pipeline.v1.MetricsApi.monitoringInfoSpec);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    org.apache.beam.model.pipeline.v1.RunnerApi.getDescriptor();
    com.google.protobuf.DescriptorProtos.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
