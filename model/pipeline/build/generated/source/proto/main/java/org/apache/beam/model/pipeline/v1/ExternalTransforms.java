// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/apache/beam/model/pipeline/v1/external_transforms.proto

package org.apache.beam.model.pipeline.v1;

public final class ExternalTransforms {
  private ExternalTransforms() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ExternalConfigurationPayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.ExternalConfigurationPayload)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A schema for use in beam:coder:row:v1
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
     * @return Whether the schema field is set.
     */
    boolean hasSchema();
    /**
     * <pre>
     * A schema for use in beam:coder:row:v1
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
     * @return The schema.
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.Schema getSchema();
    /**
     * <pre>
     * A schema for use in beam:coder:row:v1
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getSchemaOrBuilder();

    /**
     * <pre>
     * A payload which can be decoded using beam:coder:row:v1 and the given
     * schema.
     * </pre>
     *
     * <code>bytes payload = 2;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();
  }
  /**
   * <pre>
   * A configuration payload for an external transform.
   * Used as the payload of ExternalTransform as part of an ExpansionRequest.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.ExternalConfigurationPayload}
   */
  public static final class ExternalConfigurationPayload extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.ExternalConfigurationPayload)
      ExternalConfigurationPayloadOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExternalConfigurationPayload.newBuilder() to construct.
    private ExternalConfigurationPayload(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExternalConfigurationPayload() {
      payload_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExternalConfigurationPayload();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExternalConfigurationPayload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder subBuilder = null;
              if (schema_ != null) {
                subBuilder = schema_.toBuilder();
              }
              schema_ = input.readMessage(org.apache.beam.model.pipeline.v1.SchemaApi.Schema.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(schema_);
                schema_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {

              payload_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload.Builder.class);
    }

    public static final int SCHEMA_FIELD_NUMBER = 1;
    private org.apache.beam.model.pipeline.v1.SchemaApi.Schema schema_;
    /**
     * <pre>
     * A schema for use in beam:coder:row:v1
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
     * @return Whether the schema field is set.
     */
    @java.lang.Override
    public boolean hasSchema() {
      return schema_ != null;
    }
    /**
     * <pre>
     * A schema for use in beam:coder:row:v1
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
     * @return The schema.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getSchema() {
      return schema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : schema_;
    }
    /**
     * <pre>
     * A schema for use in beam:coder:row:v1
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getSchemaOrBuilder() {
      return getSchema();
    }

    public static final int PAYLOAD_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString payload_;
    /**
     * <pre>
     * A payload which can be decoded using beam:coder:row:v1 and the given
     * schema.
     * </pre>
     *
     * <code>bytes payload = 2;</code>
     * @return The payload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (schema_ != null) {
        output.writeMessage(1, getSchema());
      }
      if (!payload_.isEmpty()) {
        output.writeBytes(2, payload_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (schema_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getSchema());
      }
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, payload_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload other = (org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload) obj;

      if (hasSchema() != other.hasSchema()) return false;
      if (hasSchema()) {
        if (!getSchema()
            .equals(other.getSchema())) return false;
      }
      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSchema()) {
        hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getSchema().hashCode();
      }
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A configuration payload for an external transform.
     * Used as the payload of ExternalTransform as part of an ExpansionRequest.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.ExternalConfigurationPayload}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.ExternalConfigurationPayload)
        org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayloadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (schemaBuilder_ == null) {
          schema_ = null;
        } else {
          schema_ = null;
          schemaBuilder_ = null;
        }
        payload_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload build() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload buildPartial() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload result = new org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload(this);
        if (schemaBuilder_ == null) {
          result.schema_ = schema_;
        } else {
          result.schema_ = schemaBuilder_.build();
        }
        result.payload_ = payload_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload other) {
        if (other == org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload.getDefaultInstance()) return this;
        if (other.hasSchema()) {
          mergeSchema(other.getSchema());
        }
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private org.apache.beam.model.pipeline.v1.SchemaApi.Schema schema_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> schemaBuilder_;
      /**
       * <pre>
       * A schema for use in beam:coder:row:v1
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
       * @return Whether the schema field is set.
       */
      public boolean hasSchema() {
        return schemaBuilder_ != null || schema_ != null;
      }
      /**
       * <pre>
       * A schema for use in beam:coder:row:v1
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
       * @return The schema.
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getSchema() {
        if (schemaBuilder_ == null) {
          return schema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : schema_;
        } else {
          return schemaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A schema for use in beam:coder:row:v1
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
       */
      public Builder setSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (schemaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          schema_ = value;
          onChanged();
        } else {
          schemaBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A schema for use in beam:coder:row:v1
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
       */
      public Builder setSchema(
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder builderForValue) {
        if (schemaBuilder_ == null) {
          schema_ = builderForValue.build();
          onChanged();
        } else {
          schemaBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A schema for use in beam:coder:row:v1
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
       */
      public Builder mergeSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (schemaBuilder_ == null) {
          if (schema_ != null) {
            schema_ =
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
          } else {
            schema_ = value;
          }
          onChanged();
        } else {
          schemaBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A schema for use in beam:coder:row:v1
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
       */
      public Builder clearSchema() {
        if (schemaBuilder_ == null) {
          schema_ = null;
          onChanged();
        } else {
          schema_ = null;
          schemaBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A schema for use in beam:coder:row:v1
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder getSchemaBuilder() {
        
        onChanged();
        return getSchemaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A schema for use in beam:coder:row:v1
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getSchemaOrBuilder() {
        if (schemaBuilder_ != null) {
          return schemaBuilder_.getMessageOrBuilder();
        } else {
          return schema_ == null ?
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : schema_;
        }
      }
      /**
       * <pre>
       * A schema for use in beam:coder:row:v1
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> 
          getSchemaFieldBuilder() {
        if (schemaBuilder_ == null) {
          schemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder>(
                  getSchema(),
                  getParentForChildren(),
                  isClean());
          schema_ = null;
        }
        return schemaBuilder_;
      }

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * A payload which can be decoded using beam:coder:row:v1 and the given
       * schema.
       * </pre>
       *
       * <code>bytes payload = 2;</code>
       * @return The payload.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <pre>
       * A payload which can be decoded using beam:coder:row:v1 and the given
       * schema.
       * </pre>
       *
       * <code>bytes payload = 2;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A payload which can be decoded using beam:coder:row:v1 and the given
       * schema.
       * </pre>
       *
       * <code>bytes payload = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.ExternalConfigurationPayload)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.ExternalConfigurationPayload)
    private static final org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload();
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExternalConfigurationPayload>
        PARSER = new com.google.protobuf.AbstractParser<ExternalConfigurationPayload>() {
      @java.lang.Override
      public ExternalConfigurationPayload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExternalConfigurationPayload(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExternalConfigurationPayload> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExternalConfigurationPayload> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.ExternalTransforms.ExternalConfigurationPayload getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExpansionMethodsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.ExpansionMethods)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * Defines specific expansion methods that may be used to expand cross-language
   * transforms.
   * Has to be set as the URN of the transform of the expansion request.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.ExpansionMethods}
   */
  public static final class ExpansionMethods extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.ExpansionMethods)
      ExpansionMethodsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExpansionMethods.newBuilder() to construct.
    private ExpansionMethods(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExpansionMethods() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExpansionMethods();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExpansionMethods(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods.Builder.class);
    }

    /**
     * Protobuf enum {@code org.apache.beam.model.pipeline.v1.ExpansionMethods.Enum}
     */
    public enum Enum
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Expand a Java transform using specified constructor and builder methods.
       * Transform payload will be of type JavaClassLookupPayload.
       * </pre>
       *
       * <code>JAVA_CLASS_LOOKUP = 0 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:expansion:payload:java_class_lookup:v1"];</code>
       */
      JAVA_CLASS_LOOKUP(0),
      /**
       * <pre>
       * Expanding a SchemaTransform identified by the expansion service.
       * Transform payload will be of type  SchemaTransformPayload.
       * </pre>
       *
       * <code>SCHEMA_TRANSFORM = 1 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:expansion:payload:schematransform:v1"];</code>
       */
      SCHEMA_TRANSFORM(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Expand a Java transform using specified constructor and builder methods.
       * Transform payload will be of type JavaClassLookupPayload.
       * </pre>
       *
       * <code>JAVA_CLASS_LOOKUP = 0 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:expansion:payload:java_class_lookup:v1"];</code>
       */
      public static final int JAVA_CLASS_LOOKUP_VALUE = 0;
      /**
       * <pre>
       * Expanding a SchemaTransform identified by the expansion service.
       * Transform payload will be of type  SchemaTransformPayload.
       * </pre>
       *
       * <code>SCHEMA_TRANSFORM = 1 [(.org.apache.beam.model.pipeline.v1.beam_urn) = "beam:expansion:payload:schematransform:v1"];</code>
       */
      public static final int SCHEMA_TRANSFORM_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Enum valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Enum forNumber(int value) {
        switch (value) {
          case 0: return JAVA_CLASS_LOOKUP;
          case 1: return SCHEMA_TRANSFORM;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Enum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Enum> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Enum>() {
              public Enum findValueByNumber(int number) {
                return Enum.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods.getDescriptor().getEnumTypes().get(0);
      }

      private static final Enum[] VALUES = values();

      public static Enum valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Enum(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.apache.beam.model.pipeline.v1.ExpansionMethods.Enum)
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods other = (org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines specific expansion methods that may be used to expand cross-language
     * transforms.
     * Has to be set as the URN of the transform of the expansion request.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.ExpansionMethods}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.ExpansionMethods)
        org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethodsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods build() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods buildPartial() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods result = new org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods other) {
        if (other == org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.ExpansionMethods)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.ExpansionMethods)
    private static final org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods();
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExpansionMethods>
        PARSER = new com.google.protobuf.AbstractParser<ExpansionMethods>() {
      @java.lang.Override
      public ExpansionMethods parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExpansionMethods(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExpansionMethods> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExpansionMethods> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.ExternalTransforms.ExpansionMethods getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface JavaClassLookupPayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.JavaClassLookupPayload)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the Java transform class.
     * </pre>
     *
     * <code>string class_name = 1;</code>
     * @return The className.
     */
    java.lang.String getClassName();
    /**
     * <pre>
     * Name of the Java transform class.
     * </pre>
     *
     * <code>string class_name = 1;</code>
     * @return The bytes for className.
     */
    com.google.protobuf.ByteString
        getClassNameBytes();

    /**
     * <pre>
     * A static method to construct the initial instance of the transform.
     * If not provided, the transform should be instantiated using a class
     * constructor.
     * </pre>
     *
     * <code>string constructor_method = 2;</code>
     * @return The constructorMethod.
     */
    java.lang.String getConstructorMethod();
    /**
     * <pre>
     * A static method to construct the initial instance of the transform.
     * If not provided, the transform should be instantiated using a class
     * constructor.
     * </pre>
     *
     * <code>string constructor_method = 2;</code>
     * @return The bytes for constructorMethod.
     */
    com.google.protobuf.ByteString
        getConstructorMethodBytes();

    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
     * @return Whether the constructorSchema field is set.
     */
    boolean hasConstructorSchema();
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
     * @return The constructorSchema.
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.Schema getConstructorSchema();
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getConstructorSchemaOrBuilder();

    /**
     * <pre>
     * A payload which can be decoded using beam:coder:row:v1 and the provided
     * constructor schema.
     * </pre>
     *
     * <code>bytes constructor_payload = 4;</code>
     * @return The constructorPayload.
     */
    com.google.protobuf.ByteString getConstructorPayload();

    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    java.util.List<org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod> 
        getBuilderMethodsList();
    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod getBuilderMethods(int index);
    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    int getBuilderMethodsCount();
    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    java.util.List<? extends org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder> 
        getBuilderMethodsOrBuilderList();
    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder getBuilderMethodsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A configuration payload for an external transform.
   * Used to define a Java transform that can be directly instantiated by a Java
   * expansion service.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.JavaClassLookupPayload}
   */
  public static final class JavaClassLookupPayload extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.JavaClassLookupPayload)
      JavaClassLookupPayloadOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use JavaClassLookupPayload.newBuilder() to construct.
    private JavaClassLookupPayload(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private JavaClassLookupPayload() {
      className_ = "";
      constructorMethod_ = "";
      constructorPayload_ = com.google.protobuf.ByteString.EMPTY;
      builderMethods_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new JavaClassLookupPayload();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private JavaClassLookupPayload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              className_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              constructorMethod_ = s;
              break;
            }
            case 26: {
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder subBuilder = null;
              if (constructorSchema_ != null) {
                subBuilder = constructorSchema_.toBuilder();
              }
              constructorSchema_ = input.readMessage(org.apache.beam.model.pipeline.v1.SchemaApi.Schema.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(constructorSchema_);
                constructorSchema_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {

              constructorPayload_ = input.readBytes();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                builderMethods_ = new java.util.ArrayList<org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod>();
                mutable_bitField0_ |= 0x00000001;
              }
              builderMethods_.add(
                  input.readMessage(org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          builderMethods_ = java.util.Collections.unmodifiableList(builderMethods_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload.Builder.class);
    }

    public static final int CLASS_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object className_;
    /**
     * <pre>
     * Name of the Java transform class.
     * </pre>
     *
     * <code>string class_name = 1;</code>
     * @return The className.
     */
    @java.lang.Override
    public java.lang.String getClassName() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        className_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the Java transform class.
     * </pre>
     *
     * <code>string class_name = 1;</code>
     * @return The bytes for className.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClassNameBytes() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        className_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONSTRUCTOR_METHOD_FIELD_NUMBER = 2;
    private volatile java.lang.Object constructorMethod_;
    /**
     * <pre>
     * A static method to construct the initial instance of the transform.
     * If not provided, the transform should be instantiated using a class
     * constructor.
     * </pre>
     *
     * <code>string constructor_method = 2;</code>
     * @return The constructorMethod.
     */
    @java.lang.Override
    public java.lang.String getConstructorMethod() {
      java.lang.Object ref = constructorMethod_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        constructorMethod_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A static method to construct the initial instance of the transform.
     * If not provided, the transform should be instantiated using a class
     * constructor.
     * </pre>
     *
     * <code>string constructor_method = 2;</code>
     * @return The bytes for constructorMethod.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getConstructorMethodBytes() {
      java.lang.Object ref = constructorMethod_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        constructorMethod_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONSTRUCTOR_SCHEMA_FIELD_NUMBER = 3;
    private org.apache.beam.model.pipeline.v1.SchemaApi.Schema constructorSchema_;
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
     * @return Whether the constructorSchema field is set.
     */
    @java.lang.Override
    public boolean hasConstructorSchema() {
      return constructorSchema_ != null;
    }
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
     * @return The constructorSchema.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getConstructorSchema() {
      return constructorSchema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : constructorSchema_;
    }
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getConstructorSchemaOrBuilder() {
      return getConstructorSchema();
    }

    public static final int CONSTRUCTOR_PAYLOAD_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString constructorPayload_;
    /**
     * <pre>
     * A payload which can be decoded using beam:coder:row:v1 and the provided
     * constructor schema.
     * </pre>
     *
     * <code>bytes constructor_payload = 4;</code>
     * @return The constructorPayload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getConstructorPayload() {
      return constructorPayload_;
    }

    public static final int BUILDER_METHODS_FIELD_NUMBER = 5;
    private java.util.List<org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod> builderMethods_;
    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod> getBuilderMethodsList() {
      return builderMethods_;
    }
    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder> 
        getBuilderMethodsOrBuilderList() {
      return builderMethods_;
    }
    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    @java.lang.Override
    public int getBuilderMethodsCount() {
      return builderMethods_.size();
    }
    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod getBuilderMethods(int index) {
      return builderMethods_.get(index);
    }
    /**
     * <pre>
     * Set of builder methods and corresponding parameters to apply after the
     * transform object is constructed.
     * When constructing the transform object, given builder methods will be
     * applied in order.
     * </pre>
     *
     * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder getBuilderMethodsOrBuilder(
        int index) {
      return builderMethods_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(className_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, className_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(constructorMethod_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, constructorMethod_);
      }
      if (constructorSchema_ != null) {
        output.writeMessage(3, getConstructorSchema());
      }
      if (!constructorPayload_.isEmpty()) {
        output.writeBytes(4, constructorPayload_);
      }
      for (int i = 0; i < builderMethods_.size(); i++) {
        output.writeMessage(5, builderMethods_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(className_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, className_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(constructorMethod_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, constructorMethod_);
      }
      if (constructorSchema_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getConstructorSchema());
      }
      if (!constructorPayload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, constructorPayload_);
      }
      for (int i = 0; i < builderMethods_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, builderMethods_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload other = (org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload) obj;

      if (!getClassName()
          .equals(other.getClassName())) return false;
      if (!getConstructorMethod()
          .equals(other.getConstructorMethod())) return false;
      if (hasConstructorSchema() != other.hasConstructorSchema()) return false;
      if (hasConstructorSchema()) {
        if (!getConstructorSchema()
            .equals(other.getConstructorSchema())) return false;
      }
      if (!getConstructorPayload()
          .equals(other.getConstructorPayload())) return false;
      if (!getBuilderMethodsList()
          .equals(other.getBuilderMethodsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CLASS_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getClassName().hashCode();
      hash = (37 * hash) + CONSTRUCTOR_METHOD_FIELD_NUMBER;
      hash = (53 * hash) + getConstructorMethod().hashCode();
      if (hasConstructorSchema()) {
        hash = (37 * hash) + CONSTRUCTOR_SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getConstructorSchema().hashCode();
      }
      hash = (37 * hash) + CONSTRUCTOR_PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getConstructorPayload().hashCode();
      if (getBuilderMethodsCount() > 0) {
        hash = (37 * hash) + BUILDER_METHODS_FIELD_NUMBER;
        hash = (53 * hash) + getBuilderMethodsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A configuration payload for an external transform.
     * Used to define a Java transform that can be directly instantiated by a Java
     * expansion service.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.JavaClassLookupPayload}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.JavaClassLookupPayload)
        org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayloadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBuilderMethodsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        className_ = "";

        constructorMethod_ = "";

        if (constructorSchemaBuilder_ == null) {
          constructorSchema_ = null;
        } else {
          constructorSchema_ = null;
          constructorSchemaBuilder_ = null;
        }
        constructorPayload_ = com.google.protobuf.ByteString.EMPTY;

        if (builderMethodsBuilder_ == null) {
          builderMethods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          builderMethodsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload build() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload buildPartial() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload result = new org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload(this);
        int from_bitField0_ = bitField0_;
        result.className_ = className_;
        result.constructorMethod_ = constructorMethod_;
        if (constructorSchemaBuilder_ == null) {
          result.constructorSchema_ = constructorSchema_;
        } else {
          result.constructorSchema_ = constructorSchemaBuilder_.build();
        }
        result.constructorPayload_ = constructorPayload_;
        if (builderMethodsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            builderMethods_ = java.util.Collections.unmodifiableList(builderMethods_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.builderMethods_ = builderMethods_;
        } else {
          result.builderMethods_ = builderMethodsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload other) {
        if (other == org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload.getDefaultInstance()) return this;
        if (!other.getClassName().isEmpty()) {
          className_ = other.className_;
          onChanged();
        }
        if (!other.getConstructorMethod().isEmpty()) {
          constructorMethod_ = other.constructorMethod_;
          onChanged();
        }
        if (other.hasConstructorSchema()) {
          mergeConstructorSchema(other.getConstructorSchema());
        }
        if (other.getConstructorPayload() != com.google.protobuf.ByteString.EMPTY) {
          setConstructorPayload(other.getConstructorPayload());
        }
        if (builderMethodsBuilder_ == null) {
          if (!other.builderMethods_.isEmpty()) {
            if (builderMethods_.isEmpty()) {
              builderMethods_ = other.builderMethods_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBuilderMethodsIsMutable();
              builderMethods_.addAll(other.builderMethods_);
            }
            onChanged();
          }
        } else {
          if (!other.builderMethods_.isEmpty()) {
            if (builderMethodsBuilder_.isEmpty()) {
              builderMethodsBuilder_.dispose();
              builderMethodsBuilder_ = null;
              builderMethods_ = other.builderMethods_;
              bitField0_ = (bitField0_ & ~0x00000001);
              builderMethodsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBuilderMethodsFieldBuilder() : null;
            } else {
              builderMethodsBuilder_.addAllMessages(other.builderMethods_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object className_ = "";
      /**
       * <pre>
       * Name of the Java transform class.
       * </pre>
       *
       * <code>string class_name = 1;</code>
       * @return The className.
       */
      public java.lang.String getClassName() {
        java.lang.Object ref = className_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          className_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the Java transform class.
       * </pre>
       *
       * <code>string class_name = 1;</code>
       * @return The bytes for className.
       */
      public com.google.protobuf.ByteString
          getClassNameBytes() {
        java.lang.Object ref = className_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          className_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the Java transform class.
       * </pre>
       *
       * <code>string class_name = 1;</code>
       * @param value The className to set.
       * @return This builder for chaining.
       */
      public Builder setClassName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        className_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the Java transform class.
       * </pre>
       *
       * <code>string class_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClassName() {
        
        className_ = getDefaultInstance().getClassName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the Java transform class.
       * </pre>
       *
       * <code>string class_name = 1;</code>
       * @param value The bytes for className to set.
       * @return This builder for chaining.
       */
      public Builder setClassNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        className_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object constructorMethod_ = "";
      /**
       * <pre>
       * A static method to construct the initial instance of the transform.
       * If not provided, the transform should be instantiated using a class
       * constructor.
       * </pre>
       *
       * <code>string constructor_method = 2;</code>
       * @return The constructorMethod.
       */
      public java.lang.String getConstructorMethod() {
        java.lang.Object ref = constructorMethod_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          constructorMethod_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A static method to construct the initial instance of the transform.
       * If not provided, the transform should be instantiated using a class
       * constructor.
       * </pre>
       *
       * <code>string constructor_method = 2;</code>
       * @return The bytes for constructorMethod.
       */
      public com.google.protobuf.ByteString
          getConstructorMethodBytes() {
        java.lang.Object ref = constructorMethod_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          constructorMethod_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A static method to construct the initial instance of the transform.
       * If not provided, the transform should be instantiated using a class
       * constructor.
       * </pre>
       *
       * <code>string constructor_method = 2;</code>
       * @param value The constructorMethod to set.
       * @return This builder for chaining.
       */
      public Builder setConstructorMethod(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        constructorMethod_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A static method to construct the initial instance of the transform.
       * If not provided, the transform should be instantiated using a class
       * constructor.
       * </pre>
       *
       * <code>string constructor_method = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearConstructorMethod() {
        
        constructorMethod_ = getDefaultInstance().getConstructorMethod();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A static method to construct the initial instance of the transform.
       * If not provided, the transform should be instantiated using a class
       * constructor.
       * </pre>
       *
       * <code>string constructor_method = 2;</code>
       * @param value The bytes for constructorMethod to set.
       * @return This builder for chaining.
       */
      public Builder setConstructorMethodBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        constructorMethod_ = value;
        onChanged();
        return this;
      }

      private org.apache.beam.model.pipeline.v1.SchemaApi.Schema constructorSchema_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> constructorSchemaBuilder_;
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
       * @return Whether the constructorSchema field is set.
       */
      public boolean hasConstructorSchema() {
        return constructorSchemaBuilder_ != null || constructorSchema_ != null;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
       * @return The constructorSchema.
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getConstructorSchema() {
        if (constructorSchemaBuilder_ == null) {
          return constructorSchema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : constructorSchema_;
        } else {
          return constructorSchemaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
       */
      public Builder setConstructorSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (constructorSchemaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          constructorSchema_ = value;
          onChanged();
        } else {
          constructorSchemaBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
       */
      public Builder setConstructorSchema(
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder builderForValue) {
        if (constructorSchemaBuilder_ == null) {
          constructorSchema_ = builderForValue.build();
          onChanged();
        } else {
          constructorSchemaBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
       */
      public Builder mergeConstructorSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (constructorSchemaBuilder_ == null) {
          if (constructorSchema_ != null) {
            constructorSchema_ =
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.newBuilder(constructorSchema_).mergeFrom(value).buildPartial();
          } else {
            constructorSchema_ = value;
          }
          onChanged();
        } else {
          constructorSchemaBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
       */
      public Builder clearConstructorSchema() {
        if (constructorSchemaBuilder_ == null) {
          constructorSchema_ = null;
          onChanged();
        } else {
          constructorSchema_ = null;
          constructorSchemaBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder getConstructorSchemaBuilder() {
        
        onChanged();
        return getConstructorSchemaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getConstructorSchemaOrBuilder() {
        if (constructorSchemaBuilder_ != null) {
          return constructorSchemaBuilder_.getMessageOrBuilder();
        } else {
          return constructorSchema_ == null ?
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : constructorSchema_;
        }
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema constructor_schema = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> 
          getConstructorSchemaFieldBuilder() {
        if (constructorSchemaBuilder_ == null) {
          constructorSchemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder>(
                  getConstructorSchema(),
                  getParentForChildren(),
                  isClean());
          constructorSchema_ = null;
        }
        return constructorSchemaBuilder_;
      }

      private com.google.protobuf.ByteString constructorPayload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * A payload which can be decoded using beam:coder:row:v1 and the provided
       * constructor schema.
       * </pre>
       *
       * <code>bytes constructor_payload = 4;</code>
       * @return The constructorPayload.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getConstructorPayload() {
        return constructorPayload_;
      }
      /**
       * <pre>
       * A payload which can be decoded using beam:coder:row:v1 and the provided
       * constructor schema.
       * </pre>
       *
       * <code>bytes constructor_payload = 4;</code>
       * @param value The constructorPayload to set.
       * @return This builder for chaining.
       */
      public Builder setConstructorPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        constructorPayload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A payload which can be decoded using beam:coder:row:v1 and the provided
       * constructor schema.
       * </pre>
       *
       * <code>bytes constructor_payload = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearConstructorPayload() {
        
        constructorPayload_ = getDefaultInstance().getConstructorPayload();
        onChanged();
        return this;
      }

      private java.util.List<org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod> builderMethods_ =
        java.util.Collections.emptyList();
      private void ensureBuilderMethodsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          builderMethods_ = new java.util.ArrayList<org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod>(builderMethods_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder> builderMethodsBuilder_;

      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public java.util.List<org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod> getBuilderMethodsList() {
        if (builderMethodsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(builderMethods_);
        } else {
          return builderMethodsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public int getBuilderMethodsCount() {
        if (builderMethodsBuilder_ == null) {
          return builderMethods_.size();
        } else {
          return builderMethodsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod getBuilderMethods(int index) {
        if (builderMethodsBuilder_ == null) {
          return builderMethods_.get(index);
        } else {
          return builderMethodsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public Builder setBuilderMethods(
          int index, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod value) {
        if (builderMethodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuilderMethodsIsMutable();
          builderMethods_.set(index, value);
          onChanged();
        } else {
          builderMethodsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public Builder setBuilderMethods(
          int index, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder builderForValue) {
        if (builderMethodsBuilder_ == null) {
          ensureBuilderMethodsIsMutable();
          builderMethods_.set(index, builderForValue.build());
          onChanged();
        } else {
          builderMethodsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public Builder addBuilderMethods(org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod value) {
        if (builderMethodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuilderMethodsIsMutable();
          builderMethods_.add(value);
          onChanged();
        } else {
          builderMethodsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public Builder addBuilderMethods(
          int index, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod value) {
        if (builderMethodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuilderMethodsIsMutable();
          builderMethods_.add(index, value);
          onChanged();
        } else {
          builderMethodsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public Builder addBuilderMethods(
          org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder builderForValue) {
        if (builderMethodsBuilder_ == null) {
          ensureBuilderMethodsIsMutable();
          builderMethods_.add(builderForValue.build());
          onChanged();
        } else {
          builderMethodsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public Builder addBuilderMethods(
          int index, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder builderForValue) {
        if (builderMethodsBuilder_ == null) {
          ensureBuilderMethodsIsMutable();
          builderMethods_.add(index, builderForValue.build());
          onChanged();
        } else {
          builderMethodsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public Builder addAllBuilderMethods(
          java.lang.Iterable<? extends org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod> values) {
        if (builderMethodsBuilder_ == null) {
          ensureBuilderMethodsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, builderMethods_);
          onChanged();
        } else {
          builderMethodsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public Builder clearBuilderMethods() {
        if (builderMethodsBuilder_ == null) {
          builderMethods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          builderMethodsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public Builder removeBuilderMethods(int index) {
        if (builderMethodsBuilder_ == null) {
          ensureBuilderMethodsIsMutable();
          builderMethods_.remove(index);
          onChanged();
        } else {
          builderMethodsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder getBuilderMethodsBuilder(
          int index) {
        return getBuilderMethodsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder getBuilderMethodsOrBuilder(
          int index) {
        if (builderMethodsBuilder_ == null) {
          return builderMethods_.get(index);  } else {
          return builderMethodsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public java.util.List<? extends org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder> 
           getBuilderMethodsOrBuilderList() {
        if (builderMethodsBuilder_ != null) {
          return builderMethodsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(builderMethods_);
        }
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder addBuilderMethodsBuilder() {
        return getBuilderMethodsFieldBuilder().addBuilder(
            org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder addBuilderMethodsBuilder(
          int index) {
        return getBuilderMethodsFieldBuilder().addBuilder(
            index, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of builder methods and corresponding parameters to apply after the
       * transform object is constructed.
       * When constructing the transform object, given builder methods will be
       * applied in order.
       * </pre>
       *
       * <code>repeated .org.apache.beam.model.pipeline.v1.BuilderMethod builder_methods = 5;</code>
       */
      public java.util.List<org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder> 
           getBuilderMethodsBuilderList() {
        return getBuilderMethodsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder> 
          getBuilderMethodsFieldBuilder() {
        if (builderMethodsBuilder_ == null) {
          builderMethodsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder>(
                  builderMethods_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          builderMethods_ = null;
        }
        return builderMethodsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.JavaClassLookupPayload)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.JavaClassLookupPayload)
    private static final org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload();
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<JavaClassLookupPayload>
        PARSER = new com.google.protobuf.AbstractParser<JavaClassLookupPayload>() {
      @java.lang.Override
      public JavaClassLookupPayload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JavaClassLookupPayload(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<JavaClassLookupPayload> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<JavaClassLookupPayload> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.ExternalTransforms.JavaClassLookupPayload getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BuilderMethodOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.BuilderMethod)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the builder method
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of the builder method
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
     * @return Whether the schema field is set.
     */
    boolean hasSchema();
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
     * @return The schema.
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.Schema getSchema();
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getSchemaOrBuilder();

    /**
     * <pre>
     * A payload which can be decoded using beam:coder:row:v1 and the builder
     * method schema.
     * </pre>
     *
     * <code>bytes payload = 3;</code>
     * @return The payload.
     */
    com.google.protobuf.ByteString getPayload();
  }
  /**
   * <pre>
   * This represents a builder method of the transform class that should be
   * applied in-order after instantiating the initial transform object.
   * Each builder method may take one or more parameters and has to return an
   * instance of the transform object.
   * </pre>
   *
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.BuilderMethod}
   */
  public static final class BuilderMethod extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.BuilderMethod)
      BuilderMethodOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BuilderMethod.newBuilder() to construct.
    private BuilderMethod(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BuilderMethod() {
      name_ = "";
      payload_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BuilderMethod();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BuilderMethod(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder subBuilder = null;
              if (schema_ != null) {
                subBuilder = schema_.toBuilder();
              }
              schema_ = input.readMessage(org.apache.beam.model.pipeline.v1.SchemaApi.Schema.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(schema_);
                schema_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {

              payload_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of the builder method
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the builder method
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCHEMA_FIELD_NUMBER = 2;
    private org.apache.beam.model.pipeline.v1.SchemaApi.Schema schema_;
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
     * @return Whether the schema field is set.
     */
    @java.lang.Override
    public boolean hasSchema() {
      return schema_ != null;
    }
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
     * @return The schema.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getSchema() {
      return schema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : schema_;
    }
    /**
     * <pre>
     * The top level fields of the schema represent the method parameters in
     * order.
     * If able, top level field names are also verified against the method
     * parameters for a match.
     * Any field names in the form 'ignore[0-9]+' will not be used for validation
     * hence that format can be used to represent arbitrary field names.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getSchemaOrBuilder() {
      return getSchema();
    }

    public static final int PAYLOAD_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString payload_;
    /**
     * <pre>
     * A payload which can be decoded using beam:coder:row:v1 and the builder
     * method schema.
     * </pre>
     *
     * <code>bytes payload = 3;</code>
     * @return The payload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (schema_ != null) {
        output.writeMessage(2, getSchema());
      }
      if (!payload_.isEmpty()) {
        output.writeBytes(3, payload_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (schema_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSchema());
      }
      if (!payload_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, payload_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod other = (org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (hasSchema() != other.hasSchema()) return false;
      if (hasSchema()) {
        if (!getSchema()
            .equals(other.getSchema())) return false;
      }
      if (!getPayload()
          .equals(other.getPayload())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasSchema()) {
        hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getSchema().hashCode();
      }
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This represents a builder method of the transform class that should be
     * applied in-order after instantiating the initial transform object.
     * Each builder method may take one or more parameters and has to return an
     * instance of the transform object.
     * </pre>
     *
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.BuilderMethod}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.BuilderMethod)
        org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethodOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        if (schemaBuilder_ == null) {
          schema_ = null;
        } else {
          schema_ = null;
          schemaBuilder_ = null;
        }
        payload_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod build() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod buildPartial() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod result = new org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod(this);
        result.name_ = name_;
        if (schemaBuilder_ == null) {
          result.schema_ = schema_;
        } else {
          result.schema_ = schemaBuilder_.build();
        }
        result.payload_ = payload_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod other) {
        if (other == org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.hasSchema()) {
          mergeSchema(other.getSchema());
        }
        if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of the builder method
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the builder method
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the builder method
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the builder method
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the builder method
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private org.apache.beam.model.pipeline.v1.SchemaApi.Schema schema_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> schemaBuilder_;
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
       * @return Whether the schema field is set.
       */
      public boolean hasSchema() {
        return schemaBuilder_ != null || schema_ != null;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
       * @return The schema.
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getSchema() {
        if (schemaBuilder_ == null) {
          return schema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : schema_;
        } else {
          return schemaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
       */
      public Builder setSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (schemaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          schema_ = value;
          onChanged();
        } else {
          schemaBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
       */
      public Builder setSchema(
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder builderForValue) {
        if (schemaBuilder_ == null) {
          schema_ = builderForValue.build();
          onChanged();
        } else {
          schemaBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
       */
      public Builder mergeSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (schemaBuilder_ == null) {
          if (schema_ != null) {
            schema_ =
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
          } else {
            schema_ = value;
          }
          onChanged();
        } else {
          schemaBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
       */
      public Builder clearSchema() {
        if (schemaBuilder_ == null) {
          schema_ = null;
          onChanged();
        } else {
          schema_ = null;
          schemaBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder getSchemaBuilder() {
        
        onChanged();
        return getSchemaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getSchemaOrBuilder() {
        if (schemaBuilder_ != null) {
          return schemaBuilder_.getMessageOrBuilder();
        } else {
          return schema_ == null ?
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : schema_;
        }
      }
      /**
       * <pre>
       * The top level fields of the schema represent the method parameters in
       * order.
       * If able, top level field names are also verified against the method
       * parameters for a match.
       * Any field names in the form 'ignore[0-9]+' will not be used for validation
       * hence that format can be used to represent arbitrary field names.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema schema = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> 
          getSchemaFieldBuilder() {
        if (schemaBuilder_ == null) {
          schemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder>(
                  getSchema(),
                  getParentForChildren(),
                  isClean());
          schema_ = null;
        }
        return schemaBuilder_;
      }

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * A payload which can be decoded using beam:coder:row:v1 and the builder
       * method schema.
       * </pre>
       *
       * <code>bytes payload = 3;</code>
       * @return The payload.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <pre>
       * A payload which can be decoded using beam:coder:row:v1 and the builder
       * method schema.
       * </pre>
       *
       * <code>bytes payload = 3;</code>
       * @param value The payload to set.
       * @return This builder for chaining.
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A payload which can be decoded using beam:coder:row:v1 and the builder
       * method schema.
       * </pre>
       *
       * <code>bytes payload = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.BuilderMethod)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.BuilderMethod)
    private static final org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod();
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BuilderMethod>
        PARSER = new com.google.protobuf.AbstractParser<BuilderMethod>() {
      @java.lang.Override
      public BuilderMethod parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuilderMethod(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BuilderMethod> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BuilderMethod> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.ExternalTransforms.BuilderMethod getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SchemaTransformPayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.pipeline.v1.SchemaTransformPayload)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The identifier of the SchemaTransform (typically a URN).
     * </pre>
     *
     * <code>string identifier = 1;</code>
     * @return The identifier.
     */
    java.lang.String getIdentifier();
    /**
     * <pre>
     * The identifier of the SchemaTransform (typically a URN).
     * </pre>
     *
     * <code>string identifier = 1;</code>
     * @return The bytes for identifier.
     */
    com.google.protobuf.ByteString
        getIdentifierBytes();

    /**
     * <pre>
     * The configuration schema of the SchemaTransform.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
     * @return Whether the configurationSchema field is set.
     */
    boolean hasConfigurationSchema();
    /**
     * <pre>
     * The configuration schema of the SchemaTransform.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
     * @return The configurationSchema.
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.Schema getConfigurationSchema();
    /**
     * <pre>
     * The configuration schema of the SchemaTransform.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getConfigurationSchemaOrBuilder();

    /**
     * <pre>
     * The configuration of the SchemaTransform.
     * Should be decodable via beam:coder:row:v1.
     * The schema of the Row should be compatible with the schema of the
     * SchemaTransform.
     * </pre>
     *
     * <code>bytes configuration_row = 3;</code>
     * @return The configurationRow.
     */
    com.google.protobuf.ByteString getConfigurationRow();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.pipeline.v1.SchemaTransformPayload}
   */
  public static final class SchemaTransformPayload extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.pipeline.v1.SchemaTransformPayload)
      SchemaTransformPayloadOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SchemaTransformPayload.newBuilder() to construct.
    private SchemaTransformPayload(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SchemaTransformPayload() {
      identifier_ = "";
      configurationRow_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SchemaTransformPayload();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SchemaTransformPayload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              identifier_ = s;
              break;
            }
            case 18: {
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder subBuilder = null;
              if (configurationSchema_ != null) {
                subBuilder = configurationSchema_.toBuilder();
              }
              configurationSchema_ = input.readMessage(org.apache.beam.model.pipeline.v1.SchemaApi.Schema.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(configurationSchema_);
                configurationSchema_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {

              configurationRow_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload.Builder.class);
    }

    public static final int IDENTIFIER_FIELD_NUMBER = 1;
    private volatile java.lang.Object identifier_;
    /**
     * <pre>
     * The identifier of the SchemaTransform (typically a URN).
     * </pre>
     *
     * <code>string identifier = 1;</code>
     * @return The identifier.
     */
    @java.lang.Override
    public java.lang.String getIdentifier() {
      java.lang.Object ref = identifier_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        identifier_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The identifier of the SchemaTransform (typically a URN).
     * </pre>
     *
     * <code>string identifier = 1;</code>
     * @return The bytes for identifier.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdentifierBytes() {
      java.lang.Object ref = identifier_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        identifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONFIGURATION_SCHEMA_FIELD_NUMBER = 2;
    private org.apache.beam.model.pipeline.v1.SchemaApi.Schema configurationSchema_;
    /**
     * <pre>
     * The configuration schema of the SchemaTransform.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
     * @return Whether the configurationSchema field is set.
     */
    @java.lang.Override
    public boolean hasConfigurationSchema() {
      return configurationSchema_ != null;
    }
    /**
     * <pre>
     * The configuration schema of the SchemaTransform.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
     * @return The configurationSchema.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getConfigurationSchema() {
      return configurationSchema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : configurationSchema_;
    }
    /**
     * <pre>
     * The configuration schema of the SchemaTransform.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getConfigurationSchemaOrBuilder() {
      return getConfigurationSchema();
    }

    public static final int CONFIGURATION_ROW_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString configurationRow_;
    /**
     * <pre>
     * The configuration of the SchemaTransform.
     * Should be decodable via beam:coder:row:v1.
     * The schema of the Row should be compatible with the schema of the
     * SchemaTransform.
     * </pre>
     *
     * <code>bytes configuration_row = 3;</code>
     * @return The configurationRow.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getConfigurationRow() {
      return configurationRow_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(identifier_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, identifier_);
      }
      if (configurationSchema_ != null) {
        output.writeMessage(2, getConfigurationSchema());
      }
      if (!configurationRow_.isEmpty()) {
        output.writeBytes(3, configurationRow_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(identifier_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, identifier_);
      }
      if (configurationSchema_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getConfigurationSchema());
      }
      if (!configurationRow_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, configurationRow_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload)) {
        return super.equals(obj);
      }
      org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload other = (org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload) obj;

      if (!getIdentifier()
          .equals(other.getIdentifier())) return false;
      if (hasConfigurationSchema() != other.hasConfigurationSchema()) return false;
      if (hasConfigurationSchema()) {
        if (!getConfigurationSchema()
            .equals(other.getConfigurationSchema())) return false;
      }
      if (!getConfigurationRow()
          .equals(other.getConfigurationRow())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + IDENTIFIER_FIELD_NUMBER;
      hash = (53 * hash) + getIdentifier().hashCode();
      if (hasConfigurationSchema()) {
        hash = (37 * hash) + CONFIGURATION_SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getConfigurationSchema().hashCode();
      }
      hash = (37 * hash) + CONFIGURATION_ROW_FIELD_NUMBER;
      hash = (53 * hash) + getConfigurationRow().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.pipeline.v1.SchemaTransformPayload}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.pipeline.v1.SchemaTransformPayload)
        org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayloadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload.class, org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload.Builder.class);
      }

      // Construct using org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        identifier_ = "";

        if (configurationSchemaBuilder_ == null) {
          configurationSchema_ = null;
        } else {
          configurationSchema_ = null;
          configurationSchemaBuilder_ = null;
        }
        configurationRow_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload getDefaultInstanceForType() {
        return org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload build() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload buildPartial() {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload result = new org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload(this);
        result.identifier_ = identifier_;
        if (configurationSchemaBuilder_ == null) {
          result.configurationSchema_ = configurationSchema_;
        } else {
          result.configurationSchema_ = configurationSchemaBuilder_.build();
        }
        result.configurationRow_ = configurationRow_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload) {
          return mergeFrom((org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload other) {
        if (other == org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload.getDefaultInstance()) return this;
        if (!other.getIdentifier().isEmpty()) {
          identifier_ = other.identifier_;
          onChanged();
        }
        if (other.hasConfigurationSchema()) {
          mergeConfigurationSchema(other.getConfigurationSchema());
        }
        if (other.getConfigurationRow() != com.google.protobuf.ByteString.EMPTY) {
          setConfigurationRow(other.getConfigurationRow());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object identifier_ = "";
      /**
       * <pre>
       * The identifier of the SchemaTransform (typically a URN).
       * </pre>
       *
       * <code>string identifier = 1;</code>
       * @return The identifier.
       */
      public java.lang.String getIdentifier() {
        java.lang.Object ref = identifier_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          identifier_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The identifier of the SchemaTransform (typically a URN).
       * </pre>
       *
       * <code>string identifier = 1;</code>
       * @return The bytes for identifier.
       */
      public com.google.protobuf.ByteString
          getIdentifierBytes() {
        java.lang.Object ref = identifier_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          identifier_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The identifier of the SchemaTransform (typically a URN).
       * </pre>
       *
       * <code>string identifier = 1;</code>
       * @param value The identifier to set.
       * @return This builder for chaining.
       */
      public Builder setIdentifier(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        identifier_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The identifier of the SchemaTransform (typically a URN).
       * </pre>
       *
       * <code>string identifier = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIdentifier() {
        
        identifier_ = getDefaultInstance().getIdentifier();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The identifier of the SchemaTransform (typically a URN).
       * </pre>
       *
       * <code>string identifier = 1;</code>
       * @param value The bytes for identifier to set.
       * @return This builder for chaining.
       */
      public Builder setIdentifierBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        identifier_ = value;
        onChanged();
        return this;
      }

      private org.apache.beam.model.pipeline.v1.SchemaApi.Schema configurationSchema_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> configurationSchemaBuilder_;
      /**
       * <pre>
       * The configuration schema of the SchemaTransform.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
       * @return Whether the configurationSchema field is set.
       */
      public boolean hasConfigurationSchema() {
        return configurationSchemaBuilder_ != null || configurationSchema_ != null;
      }
      /**
       * <pre>
       * The configuration schema of the SchemaTransform.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
       * @return The configurationSchema.
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getConfigurationSchema() {
        if (configurationSchemaBuilder_ == null) {
          return configurationSchema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : configurationSchema_;
        } else {
          return configurationSchemaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The configuration schema of the SchemaTransform.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
       */
      public Builder setConfigurationSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (configurationSchemaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          configurationSchema_ = value;
          onChanged();
        } else {
          configurationSchemaBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The configuration schema of the SchemaTransform.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
       */
      public Builder setConfigurationSchema(
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder builderForValue) {
        if (configurationSchemaBuilder_ == null) {
          configurationSchema_ = builderForValue.build();
          onChanged();
        } else {
          configurationSchemaBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The configuration schema of the SchemaTransform.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
       */
      public Builder mergeConfigurationSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (configurationSchemaBuilder_ == null) {
          if (configurationSchema_ != null) {
            configurationSchema_ =
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.newBuilder(configurationSchema_).mergeFrom(value).buildPartial();
          } else {
            configurationSchema_ = value;
          }
          onChanged();
        } else {
          configurationSchemaBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The configuration schema of the SchemaTransform.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
       */
      public Builder clearConfigurationSchema() {
        if (configurationSchemaBuilder_ == null) {
          configurationSchema_ = null;
          onChanged();
        } else {
          configurationSchema_ = null;
          configurationSchemaBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The configuration schema of the SchemaTransform.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder getConfigurationSchemaBuilder() {
        
        onChanged();
        return getConfigurationSchemaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The configuration schema of the SchemaTransform.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getConfigurationSchemaOrBuilder() {
        if (configurationSchemaBuilder_ != null) {
          return configurationSchemaBuilder_.getMessageOrBuilder();
        } else {
          return configurationSchema_ == null ?
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : configurationSchema_;
        }
      }
      /**
       * <pre>
       * The configuration schema of the SchemaTransform.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema configuration_schema = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> 
          getConfigurationSchemaFieldBuilder() {
        if (configurationSchemaBuilder_ == null) {
          configurationSchemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder>(
                  getConfigurationSchema(),
                  getParentForChildren(),
                  isClean());
          configurationSchema_ = null;
        }
        return configurationSchemaBuilder_;
      }

      private com.google.protobuf.ByteString configurationRow_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The configuration of the SchemaTransform.
       * Should be decodable via beam:coder:row:v1.
       * The schema of the Row should be compatible with the schema of the
       * SchemaTransform.
       * </pre>
       *
       * <code>bytes configuration_row = 3;</code>
       * @return The configurationRow.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getConfigurationRow() {
        return configurationRow_;
      }
      /**
       * <pre>
       * The configuration of the SchemaTransform.
       * Should be decodable via beam:coder:row:v1.
       * The schema of the Row should be compatible with the schema of the
       * SchemaTransform.
       * </pre>
       *
       * <code>bytes configuration_row = 3;</code>
       * @param value The configurationRow to set.
       * @return This builder for chaining.
       */
      public Builder setConfigurationRow(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        configurationRow_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The configuration of the SchemaTransform.
       * Should be decodable via beam:coder:row:v1.
       * The schema of the Row should be compatible with the schema of the
       * SchemaTransform.
       * </pre>
       *
       * <code>bytes configuration_row = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearConfigurationRow() {
        
        configurationRow_ = getDefaultInstance().getConfigurationRow();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.pipeline.v1.SchemaTransformPayload)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.pipeline.v1.SchemaTransformPayload)
    private static final org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload();
    }

    public static org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SchemaTransformPayload>
        PARSER = new com.google.protobuf.AbstractParser<SchemaTransformPayload>() {
      @java.lang.Override
      public SchemaTransformPayload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SchemaTransformPayload(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SchemaTransformPayload> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SchemaTransformPayload> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.ExternalTransforms.SchemaTransformPayload getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n;org/apache/beam/model/pipeline/v1/exte" +
      "rnal_transforms.proto\022!org.apache.beam.m" +
      "odel.pipeline.v1\032.org/apache/beam/model/" +
      "pipeline/v1/schema.proto\0327org/apache/bea" +
      "m/model/pipeline/v1/beam_runner_api.prot" +
      "o\"j\n\034ExternalConfigurationPayload\0229\n\006sch" +
      "ema\030\001 \001(\0132).org.apache.beam.model.pipeli" +
      "ne.v1.Schema\022\017\n\007payload\030\002 \001(\014\"\254\001\n\020Expans" +
      "ionMethods\"\227\001\n\004Enum\022H\n\021JAVA_CLASS_LOOKUP" +
      "\020\000\0321\242\264\372\302\005+beam:expansion:payload:java_cl" +
      "ass_lookup:v1\022E\n\020SCHEMA_TRANSFORM\020\001\032/\242\264\372" +
      "\302\005)beam:expansion:payload:schematransfor" +
      "m:v1\"\367\001\n\026JavaClassLookupPayload\022\022\n\nclass" +
      "_name\030\001 \001(\t\022\032\n\022constructor_method\030\002 \001(\t\022" +
      "E\n\022constructor_schema\030\003 \001(\0132).org.apache" +
      ".beam.model.pipeline.v1.Schema\022\033\n\023constr" +
      "uctor_payload\030\004 \001(\014\022I\n\017builder_methods\030\005" +
      " \003(\01320.org.apache.beam.model.pipeline.v1" +
      ".BuilderMethod\"i\n\rBuilderMethod\022\014\n\004name\030" +
      "\001 \001(\t\0229\n\006schema\030\002 \001(\0132).org.apache.beam." +
      "model.pipeline.v1.Schema\022\017\n\007payload\030\003 \001(" +
      "\014\"\220\001\n\026SchemaTransformPayload\022\022\n\nidentifi" +
      "er\030\001 \001(\t\022G\n\024configuration_schema\030\002 \001(\0132)" +
      ".org.apache.beam.model.pipeline.v1.Schem" +
      "a\022\031\n\021configuration_row\030\003 \001(\014B\201\001\n!org.apa" +
      "che.beam.model.pipeline.v1B\022ExternalTran" +
      "sformsZHgithub.com/apache/beam/sdks/v2/g" +
      "o/pkg/beam/model/pipeline_v1;pipeline_v1" +
      "b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.apache.beam.model.pipeline.v1.SchemaApi.getDescriptor(),
          org.apache.beam.model.pipeline.v1.RunnerApi.getDescriptor(),
        });
    internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_ExternalConfigurationPayload_descriptor,
        new java.lang.String[] { "Schema", "Payload", });
    internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_ExpansionMethods_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_JavaClassLookupPayload_descriptor,
        new java.lang.String[] { "ClassName", "ConstructorMethod", "ConstructorSchema", "ConstructorPayload", "BuilderMethods", });
    internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_BuilderMethod_descriptor,
        new java.lang.String[] { "Name", "Schema", "Payload", });
    internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_pipeline_v1_SchemaTransformPayload_descriptor,
        new java.lang.String[] { "Identifier", "ConfigurationSchema", "ConfigurationRow", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(org.apache.beam.model.pipeline.v1.RunnerApi.beamUrn);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    org.apache.beam.model.pipeline.v1.SchemaApi.getDescriptor();
    org.apache.beam.model.pipeline.v1.RunnerApi.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
