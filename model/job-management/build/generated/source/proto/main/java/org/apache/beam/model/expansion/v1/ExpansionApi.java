// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/apache/beam/model/job_management/v1/beam_expansion_api.proto

package org.apache.beam.model.expansion.v1;

public final class ExpansionApi {
  private ExpansionApi() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ExpansionRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.expansion.v1.ExpansionRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Set of components needed to interpret the transform, or which
     * may be useful for its expansion.  This includes the input
     * PCollections (if any) to the to-be-expanded transform, along
     * with their coders and windowing strategies.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     * @return Whether the components field is set.
     */
    boolean hasComponents();
    /**
     * <pre>
     * Set of components needed to interpret the transform, or which
     * may be useful for its expansion.  This includes the input
     * PCollections (if any) to the to-be-expanded transform, along
     * with their coders and windowing strategies.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     * @return The components.
     */
    org.apache.beam.model.pipeline.v1.RunnerApi.Components getComponents();
    /**
     * <pre>
     * Set of components needed to interpret the transform, or which
     * may be useful for its expansion.  This includes the input
     * PCollections (if any) to the to-be-expanded transform, along
     * with their coders and windowing strategies.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     */
    org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder getComponentsOrBuilder();

    /**
     * <pre>
     * The actual PTransform to be expaneded according to its spec.
     * Its input should be set, but its subtransforms and outputs
     * should not be.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     * @return Whether the transform field is set.
     */
    boolean hasTransform();
    /**
     * <pre>
     * The actual PTransform to be expaneded according to its spec.
     * Its input should be set, but its subtransforms and outputs
     * should not be.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     * @return The transform.
     */
    org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransform();
    /**
     * <pre>
     * The actual PTransform to be expaneded according to its spec.
     * Its input should be set, but its subtransforms and outputs
     * should not be.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     */
    org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder getTransformOrBuilder();

    /**
     * <pre>
     * A namespace (prefix) to use for the id of any newly created
     * components.
     * </pre>
     *
     * <code>string namespace = 3;</code>
     * @return The namespace.
     */
    java.lang.String getNamespace();
    /**
     * <pre>
     * A namespace (prefix) to use for the id of any newly created
     * components.
     * </pre>
     *
     * <code>string namespace = 3;</code>
     * @return The bytes for namespace.
     */
    com.google.protobuf.ByteString
        getNamespaceBytes();

    /**
     * <pre>
     * (Optional) Map from a local output tag to a coder id.
     * If it is set, asks the expansion service to use the given
     * coders for the output PCollections. Note that the request
     * may not be fulfilled.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
     */
    int getOutputCoderRequestsCount();
    /**
     * <pre>
     * (Optional) Map from a local output tag to a coder id.
     * If it is set, asks the expansion service to use the given
     * coders for the output PCollections. Note that the request
     * may not be fulfilled.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
     */
    boolean containsOutputCoderRequests(
        java.lang.String key);
    /**
     * Use {@link #getOutputCoderRequestsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getOutputCoderRequests();
    /**
     * <pre>
     * (Optional) Map from a local output tag to a coder id.
     * If it is set, asks the expansion service to use the given
     * coders for the output PCollections. Note that the request
     * may not be fulfilled.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getOutputCoderRequestsMap();
    /**
     * <pre>
     * (Optional) Map from a local output tag to a coder id.
     * If it is set, asks the expansion service to use the given
     * coders for the output PCollections. Note that the request
     * may not be fulfilled.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
     */

    /* nullable */
java.lang.String getOutputCoderRequestsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <pre>
     * (Optional) Map from a local output tag to a coder id.
     * If it is set, asks the expansion service to use the given
     * coders for the output PCollections. Note that the request
     * may not be fulfilled.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
     */

    java.lang.String getOutputCoderRequestsOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code org.apache.beam.model.expansion.v1.ExpansionRequest}
   */
  public static final class ExpansionRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.expansion.v1.ExpansionRequest)
      ExpansionRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExpansionRequest.newBuilder() to construct.
    private ExpansionRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExpansionRequest() {
      namespace_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExpansionRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExpansionRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder subBuilder = null;
              if (components_ != null) {
                subBuilder = components_.toBuilder();
              }
              components_ = input.readMessage(org.apache.beam.model.pipeline.v1.RunnerApi.Components.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(components_);
                components_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder subBuilder = null;
              if (transform_ != null) {
                subBuilder = transform_.toBuilder();
              }
              transform_ = input.readMessage(org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(transform_);
                transform_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              namespace_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                outputCoderRequests_ = com.google.protobuf.MapField.newMapField(
                    OutputCoderRequestsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              outputCoderRequests__ = input.readMessage(
                  OutputCoderRequestsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              outputCoderRequests_.getMutableMap().put(
                  outputCoderRequests__.getKey(), outputCoderRequests__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetOutputCoderRequests();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest.class, org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest.Builder.class);
    }

    public static final int COMPONENTS_FIELD_NUMBER = 1;
    private org.apache.beam.model.pipeline.v1.RunnerApi.Components components_;
    /**
     * <pre>
     * Set of components needed to interpret the transform, or which
     * may be useful for its expansion.  This includes the input
     * PCollections (if any) to the to-be-expanded transform, along
     * with their coders and windowing strategies.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     * @return Whether the components field is set.
     */
    @java.lang.Override
    public boolean hasComponents() {
      return components_ != null;
    }
    /**
     * <pre>
     * Set of components needed to interpret the transform, or which
     * may be useful for its expansion.  This includes the input
     * PCollections (if any) to the to-be-expanded transform, along
     * with their coders and windowing strategies.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     * @return The components.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.RunnerApi.Components getComponents() {
      return components_ == null ? org.apache.beam.model.pipeline.v1.RunnerApi.Components.getDefaultInstance() : components_;
    }
    /**
     * <pre>
     * Set of components needed to interpret the transform, or which
     * may be useful for its expansion.  This includes the input
     * PCollections (if any) to the to-be-expanded transform, along
     * with their coders and windowing strategies.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder getComponentsOrBuilder() {
      return getComponents();
    }

    public static final int TRANSFORM_FIELD_NUMBER = 2;
    private org.apache.beam.model.pipeline.v1.RunnerApi.PTransform transform_;
    /**
     * <pre>
     * The actual PTransform to be expaneded according to its spec.
     * Its input should be set, but its subtransforms and outputs
     * should not be.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     * @return Whether the transform field is set.
     */
    @java.lang.Override
    public boolean hasTransform() {
      return transform_ != null;
    }
    /**
     * <pre>
     * The actual PTransform to be expaneded according to its spec.
     * Its input should be set, but its subtransforms and outputs
     * should not be.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     * @return The transform.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransform() {
      return transform_ == null ? org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.getDefaultInstance() : transform_;
    }
    /**
     * <pre>
     * The actual PTransform to be expaneded according to its spec.
     * Its input should be set, but its subtransforms and outputs
     * should not be.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder getTransformOrBuilder() {
      return getTransform();
    }

    public static final int NAMESPACE_FIELD_NUMBER = 3;
    private volatile java.lang.Object namespace_;
    /**
     * <pre>
     * A namespace (prefix) to use for the id of any newly created
     * components.
     * </pre>
     *
     * <code>string namespace = 3;</code>
     * @return The namespace.
     */
    @java.lang.Override
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A namespace (prefix) to use for the id of any newly created
     * components.
     * </pre>
     *
     * <code>string namespace = 3;</code>
     * @return The bytes for namespace.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OUTPUT_CODER_REQUESTS_FIELD_NUMBER = 4;
    private static final class OutputCoderRequestsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_OutputCoderRequestsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> outputCoderRequests_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetOutputCoderRequests() {
      if (outputCoderRequests_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OutputCoderRequestsDefaultEntryHolder.defaultEntry);
      }
      return outputCoderRequests_;
    }

    public int getOutputCoderRequestsCount() {
      return internalGetOutputCoderRequests().getMap().size();
    }
    /**
     * <pre>
     * (Optional) Map from a local output tag to a coder id.
     * If it is set, asks the expansion service to use the given
     * coders for the output PCollections. Note that the request
     * may not be fulfilled.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
     */

    @java.lang.Override
    public boolean containsOutputCoderRequests(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetOutputCoderRequests().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOutputCoderRequestsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getOutputCoderRequests() {
      return getOutputCoderRequestsMap();
    }
    /**
     * <pre>
     * (Optional) Map from a local output tag to a coder id.
     * If it is set, asks the expansion service to use the given
     * coders for the output PCollections. Note that the request
     * may not be fulfilled.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getOutputCoderRequestsMap() {
      return internalGetOutputCoderRequests().getMap();
    }
    /**
     * <pre>
     * (Optional) Map from a local output tag to a coder id.
     * If it is set, asks the expansion service to use the given
     * coders for the output PCollections. Note that the request
     * may not be fulfilled.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
     */
    @java.lang.Override

    public java.lang.String getOutputCoderRequestsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetOutputCoderRequests().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (Optional) Map from a local output tag to a coder id.
     * If it is set, asks the expansion service to use the given
     * coders for the output PCollections. Note that the request
     * may not be fulfilled.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
     */
    @java.lang.Override

    public java.lang.String getOutputCoderRequestsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetOutputCoderRequests().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (components_ != null) {
        output.writeMessage(1, getComponents());
      }
      if (transform_ != null) {
        output.writeMessage(2, getTransform());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(namespace_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, namespace_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetOutputCoderRequests(),
          OutputCoderRequestsDefaultEntryHolder.defaultEntry,
          4);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (components_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getComponents());
      }
      if (transform_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTransform());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(namespace_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, namespace_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetOutputCoderRequests().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        outputCoderRequests__ = OutputCoderRequestsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, outputCoderRequests__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest other = (org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest) obj;

      if (hasComponents() != other.hasComponents()) return false;
      if (hasComponents()) {
        if (!getComponents()
            .equals(other.getComponents())) return false;
      }
      if (hasTransform() != other.hasTransform()) return false;
      if (hasTransform()) {
        if (!getTransform()
            .equals(other.getTransform())) return false;
      }
      if (!getNamespace()
          .equals(other.getNamespace())) return false;
      if (!internalGetOutputCoderRequests().equals(
          other.internalGetOutputCoderRequests())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasComponents()) {
        hash = (37 * hash) + COMPONENTS_FIELD_NUMBER;
        hash = (53 * hash) + getComponents().hashCode();
      }
      if (hasTransform()) {
        hash = (37 * hash) + TRANSFORM_FIELD_NUMBER;
        hash = (53 * hash) + getTransform().hashCode();
      }
      hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
      hash = (53 * hash) + getNamespace().hashCode();
      if (!internalGetOutputCoderRequests().getMap().isEmpty()) {
        hash = (37 * hash) + OUTPUT_CODER_REQUESTS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetOutputCoderRequests().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.expansion.v1.ExpansionRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.expansion.v1.ExpansionRequest)
        org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetOutputCoderRequests();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetMutableOutputCoderRequests();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest.class, org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (componentsBuilder_ == null) {
          components_ = null;
        } else {
          components_ = null;
          componentsBuilder_ = null;
        }
        if (transformBuilder_ == null) {
          transform_ = null;
        } else {
          transform_ = null;
          transformBuilder_ = null;
        }
        namespace_ = "";

        internalGetMutableOutputCoderRequests().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest getDefaultInstanceForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest build() {
        org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest buildPartial() {
        org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest result = new org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest(this);
        int from_bitField0_ = bitField0_;
        if (componentsBuilder_ == null) {
          result.components_ = components_;
        } else {
          result.components_ = componentsBuilder_.build();
        }
        if (transformBuilder_ == null) {
          result.transform_ = transform_;
        } else {
          result.transform_ = transformBuilder_.build();
        }
        result.namespace_ = namespace_;
        result.outputCoderRequests_ = internalGetOutputCoderRequests();
        result.outputCoderRequests_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest) {
          return mergeFrom((org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest other) {
        if (other == org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest.getDefaultInstance()) return this;
        if (other.hasComponents()) {
          mergeComponents(other.getComponents());
        }
        if (other.hasTransform()) {
          mergeTransform(other.getTransform());
        }
        if (!other.getNamespace().isEmpty()) {
          namespace_ = other.namespace_;
          onChanged();
        }
        internalGetMutableOutputCoderRequests().mergeFrom(
            other.internalGetOutputCoderRequests());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.apache.beam.model.pipeline.v1.RunnerApi.Components components_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.RunnerApi.Components, org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder> componentsBuilder_;
      /**
       * <pre>
       * Set of components needed to interpret the transform, or which
       * may be useful for its expansion.  This includes the input
       * PCollections (if any) to the to-be-expanded transform, along
       * with their coders and windowing strategies.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       * @return Whether the components field is set.
       */
      public boolean hasComponents() {
        return componentsBuilder_ != null || components_ != null;
      }
      /**
       * <pre>
       * Set of components needed to interpret the transform, or which
       * may be useful for its expansion.  This includes the input
       * PCollections (if any) to the to-be-expanded transform, along
       * with their coders and windowing strategies.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       * @return The components.
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.Components getComponents() {
        if (componentsBuilder_ == null) {
          return components_ == null ? org.apache.beam.model.pipeline.v1.RunnerApi.Components.getDefaultInstance() : components_;
        } else {
          return componentsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Set of components needed to interpret the transform, or which
       * may be useful for its expansion.  This includes the input
       * PCollections (if any) to the to-be-expanded transform, along
       * with their coders and windowing strategies.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public Builder setComponents(org.apache.beam.model.pipeline.v1.RunnerApi.Components value) {
        if (componentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          components_ = value;
          onChanged();
        } else {
          componentsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Set of components needed to interpret the transform, or which
       * may be useful for its expansion.  This includes the input
       * PCollections (if any) to the to-be-expanded transform, along
       * with their coders and windowing strategies.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public Builder setComponents(
          org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder builderForValue) {
        if (componentsBuilder_ == null) {
          components_ = builderForValue.build();
          onChanged();
        } else {
          componentsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Set of components needed to interpret the transform, or which
       * may be useful for its expansion.  This includes the input
       * PCollections (if any) to the to-be-expanded transform, along
       * with their coders and windowing strategies.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public Builder mergeComponents(org.apache.beam.model.pipeline.v1.RunnerApi.Components value) {
        if (componentsBuilder_ == null) {
          if (components_ != null) {
            components_ =
              org.apache.beam.model.pipeline.v1.RunnerApi.Components.newBuilder(components_).mergeFrom(value).buildPartial();
          } else {
            components_ = value;
          }
          onChanged();
        } else {
          componentsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Set of components needed to interpret the transform, or which
       * may be useful for its expansion.  This includes the input
       * PCollections (if any) to the to-be-expanded transform, along
       * with their coders and windowing strategies.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public Builder clearComponents() {
        if (componentsBuilder_ == null) {
          components_ = null;
          onChanged();
        } else {
          components_ = null;
          componentsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Set of components needed to interpret the transform, or which
       * may be useful for its expansion.  This includes the input
       * PCollections (if any) to the to-be-expanded transform, along
       * with their coders and windowing strategies.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder getComponentsBuilder() {
        
        onChanged();
        return getComponentsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Set of components needed to interpret the transform, or which
       * may be useful for its expansion.  This includes the input
       * PCollections (if any) to the to-be-expanded transform, along
       * with their coders and windowing strategies.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder getComponentsOrBuilder() {
        if (componentsBuilder_ != null) {
          return componentsBuilder_.getMessageOrBuilder();
        } else {
          return components_ == null ?
              org.apache.beam.model.pipeline.v1.RunnerApi.Components.getDefaultInstance() : components_;
        }
      }
      /**
       * <pre>
       * Set of components needed to interpret the transform, or which
       * may be useful for its expansion.  This includes the input
       * PCollections (if any) to the to-be-expanded transform, along
       * with their coders and windowing strategies.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.RunnerApi.Components, org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder> 
          getComponentsFieldBuilder() {
        if (componentsBuilder_ == null) {
          componentsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.RunnerApi.Components, org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder>(
                  getComponents(),
                  getParentForChildren(),
                  isClean());
          components_ = null;
        }
        return componentsBuilder_;
      }

      private org.apache.beam.model.pipeline.v1.RunnerApi.PTransform transform_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.RunnerApi.PTransform, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder> transformBuilder_;
      /**
       * <pre>
       * The actual PTransform to be expaneded according to its spec.
       * Its input should be set, but its subtransforms and outputs
       * should not be.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       * @return Whether the transform field is set.
       */
      public boolean hasTransform() {
        return transformBuilder_ != null || transform_ != null;
      }
      /**
       * <pre>
       * The actual PTransform to be expaneded according to its spec.
       * Its input should be set, but its subtransforms and outputs
       * should not be.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       * @return The transform.
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransform() {
        if (transformBuilder_ == null) {
          return transform_ == null ? org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.getDefaultInstance() : transform_;
        } else {
          return transformBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The actual PTransform to be expaneded according to its spec.
       * Its input should be set, but its subtransforms and outputs
       * should not be.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public Builder setTransform(org.apache.beam.model.pipeline.v1.RunnerApi.PTransform value) {
        if (transformBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          transform_ = value;
          onChanged();
        } else {
          transformBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The actual PTransform to be expaneded according to its spec.
       * Its input should be set, but its subtransforms and outputs
       * should not be.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public Builder setTransform(
          org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder builderForValue) {
        if (transformBuilder_ == null) {
          transform_ = builderForValue.build();
          onChanged();
        } else {
          transformBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The actual PTransform to be expaneded according to its spec.
       * Its input should be set, but its subtransforms and outputs
       * should not be.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public Builder mergeTransform(org.apache.beam.model.pipeline.v1.RunnerApi.PTransform value) {
        if (transformBuilder_ == null) {
          if (transform_ != null) {
            transform_ =
              org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.newBuilder(transform_).mergeFrom(value).buildPartial();
          } else {
            transform_ = value;
          }
          onChanged();
        } else {
          transformBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The actual PTransform to be expaneded according to its spec.
       * Its input should be set, but its subtransforms and outputs
       * should not be.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public Builder clearTransform() {
        if (transformBuilder_ == null) {
          transform_ = null;
          onChanged();
        } else {
          transform_ = null;
          transformBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The actual PTransform to be expaneded according to its spec.
       * Its input should be set, but its subtransforms and outputs
       * should not be.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder getTransformBuilder() {
        
        onChanged();
        return getTransformFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The actual PTransform to be expaneded according to its spec.
       * Its input should be set, but its subtransforms and outputs
       * should not be.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder getTransformOrBuilder() {
        if (transformBuilder_ != null) {
          return transformBuilder_.getMessageOrBuilder();
        } else {
          return transform_ == null ?
              org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.getDefaultInstance() : transform_;
        }
      }
      /**
       * <pre>
       * The actual PTransform to be expaneded according to its spec.
       * Its input should be set, but its subtransforms and outputs
       * should not be.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.RunnerApi.PTransform, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder> 
          getTransformFieldBuilder() {
        if (transformBuilder_ == null) {
          transformBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.RunnerApi.PTransform, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder>(
                  getTransform(),
                  getParentForChildren(),
                  isClean());
          transform_ = null;
        }
        return transformBuilder_;
      }

      private java.lang.Object namespace_ = "";
      /**
       * <pre>
       * A namespace (prefix) to use for the id of any newly created
       * components.
       * </pre>
       *
       * <code>string namespace = 3;</code>
       * @return The namespace.
       */
      public java.lang.String getNamespace() {
        java.lang.Object ref = namespace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          namespace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A namespace (prefix) to use for the id of any newly created
       * components.
       * </pre>
       *
       * <code>string namespace = 3;</code>
       * @return The bytes for namespace.
       */
      public com.google.protobuf.ByteString
          getNamespaceBytes() {
        java.lang.Object ref = namespace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          namespace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A namespace (prefix) to use for the id of any newly created
       * components.
       * </pre>
       *
       * <code>string namespace = 3;</code>
       * @param value The namespace to set.
       * @return This builder for chaining.
       */
      public Builder setNamespace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        namespace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A namespace (prefix) to use for the id of any newly created
       * components.
       * </pre>
       *
       * <code>string namespace = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearNamespace() {
        
        namespace_ = getDefaultInstance().getNamespace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A namespace (prefix) to use for the id of any newly created
       * components.
       * </pre>
       *
       * <code>string namespace = 3;</code>
       * @param value The bytes for namespace to set.
       * @return This builder for chaining.
       */
      public Builder setNamespaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        namespace_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> outputCoderRequests_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetOutputCoderRequests() {
        if (outputCoderRequests_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              OutputCoderRequestsDefaultEntryHolder.defaultEntry);
        }
        return outputCoderRequests_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableOutputCoderRequests() {
        onChanged();;
        if (outputCoderRequests_ == null) {
          outputCoderRequests_ = com.google.protobuf.MapField.newMapField(
              OutputCoderRequestsDefaultEntryHolder.defaultEntry);
        }
        if (!outputCoderRequests_.isMutable()) {
          outputCoderRequests_ = outputCoderRequests_.copy();
        }
        return outputCoderRequests_;
      }

      public int getOutputCoderRequestsCount() {
        return internalGetOutputCoderRequests().getMap().size();
      }
      /**
       * <pre>
       * (Optional) Map from a local output tag to a coder id.
       * If it is set, asks the expansion service to use the given
       * coders for the output PCollections. Note that the request
       * may not be fulfilled.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
       */

      @java.lang.Override
      public boolean containsOutputCoderRequests(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetOutputCoderRequests().getMap().containsKey(key);
      }
      /**
       * Use {@link #getOutputCoderRequestsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getOutputCoderRequests() {
        return getOutputCoderRequestsMap();
      }
      /**
       * <pre>
       * (Optional) Map from a local output tag to a coder id.
       * If it is set, asks the expansion service to use the given
       * coders for the output PCollections. Note that the request
       * may not be fulfilled.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getOutputCoderRequestsMap() {
        return internalGetOutputCoderRequests().getMap();
      }
      /**
       * <pre>
       * (Optional) Map from a local output tag to a coder id.
       * If it is set, asks the expansion service to use the given
       * coders for the output PCollections. Note that the request
       * may not be fulfilled.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
       */
      @java.lang.Override

      public java.lang.String getOutputCoderRequestsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetOutputCoderRequests().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * (Optional) Map from a local output tag to a coder id.
       * If it is set, asks the expansion service to use the given
       * coders for the output PCollections. Note that the request
       * may not be fulfilled.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
       */
      @java.lang.Override

      public java.lang.String getOutputCoderRequestsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetOutputCoderRequests().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearOutputCoderRequests() {
        internalGetMutableOutputCoderRequests().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * (Optional) Map from a local output tag to a coder id.
       * If it is set, asks the expansion service to use the given
       * coders for the output PCollections. Note that the request
       * may not be fulfilled.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
       */

      public Builder removeOutputCoderRequests(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableOutputCoderRequests().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableOutputCoderRequests() {
        return internalGetMutableOutputCoderRequests().getMutableMap();
      }
      /**
       * <pre>
       * (Optional) Map from a local output tag to a coder id.
       * If it is set, asks the expansion service to use the given
       * coders for the output PCollections. Note that the request
       * may not be fulfilled.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
       */
      public Builder putOutputCoderRequests(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableOutputCoderRequests().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * (Optional) Map from a local output tag to a coder id.
       * If it is set, asks the expansion service to use the given
       * coders for the output PCollections. Note that the request
       * may not be fulfilled.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_coder_requests = 4;</code>
       */

      public Builder putAllOutputCoderRequests(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableOutputCoderRequests().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.expansion.v1.ExpansionRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.expansion.v1.ExpansionRequest)
    private static final org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest();
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExpansionRequest>
        PARSER = new com.google.protobuf.AbstractParser<ExpansionRequest>() {
      @java.lang.Override
      public ExpansionRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExpansionRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExpansionRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExpansionRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExpansionResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.expansion.v1.ExpansionResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Set of components needed to execute the expanded transform,
     * including the (original) inputs, outputs, and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     * @return Whether the components field is set.
     */
    boolean hasComponents();
    /**
     * <pre>
     * Set of components needed to execute the expanded transform,
     * including the (original) inputs, outputs, and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     * @return The components.
     */
    org.apache.beam.model.pipeline.v1.RunnerApi.Components getComponents();
    /**
     * <pre>
     * Set of components needed to execute the expanded transform,
     * including the (original) inputs, outputs, and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     */
    org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder getComponentsOrBuilder();

    /**
     * <pre>
     * The expanded transform itself, with references to its outputs
     * and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     * @return Whether the transform field is set.
     */
    boolean hasTransform();
    /**
     * <pre>
     * The expanded transform itself, with references to its outputs
     * and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     * @return The transform.
     */
    org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransform();
    /**
     * <pre>
     * The expanded transform itself, with references to its outputs
     * and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     */
    org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder getTransformOrBuilder();

    /**
     * <pre>
     * A set of requirements that must be appended to this pipeline's
     * requirements.
     * </pre>
     *
     * <code>repeated string requirements = 3;</code>
     * @return A list containing the requirements.
     */
    java.util.List<java.lang.String>
        getRequirementsList();
    /**
     * <pre>
     * A set of requirements that must be appended to this pipeline's
     * requirements.
     * </pre>
     *
     * <code>repeated string requirements = 3;</code>
     * @return The count of requirements.
     */
    int getRequirementsCount();
    /**
     * <pre>
     * A set of requirements that must be appended to this pipeline's
     * requirements.
     * </pre>
     *
     * <code>repeated string requirements = 3;</code>
     * @param index The index of the element to return.
     * @return The requirements at the given index.
     */
    java.lang.String getRequirements(int index);
    /**
     * <pre>
     * A set of requirements that must be appended to this pipeline's
     * requirements.
     * </pre>
     *
     * <code>repeated string requirements = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the requirements at the given index.
     */
    com.google.protobuf.ByteString
        getRequirementsBytes(int index);

    /**
     * <pre>
     * (Optional) An string representation of any error encountered while
     * attempting to expand this transform.
     * </pre>
     *
     * <code>string error = 10;</code>
     * @return The error.
     */
    java.lang.String getError();
    /**
     * <pre>
     * (Optional) An string representation of any error encountered while
     * attempting to expand this transform.
     * </pre>
     *
     * <code>string error = 10;</code>
     * @return The bytes for error.
     */
    com.google.protobuf.ByteString
        getErrorBytes();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.expansion.v1.ExpansionResponse}
   */
  public static final class ExpansionResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.expansion.v1.ExpansionResponse)
      ExpansionResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExpansionResponse.newBuilder() to construct.
    private ExpansionResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExpansionResponse() {
      requirements_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      error_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExpansionResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExpansionResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder subBuilder = null;
              if (components_ != null) {
                subBuilder = components_.toBuilder();
              }
              components_ = input.readMessage(org.apache.beam.model.pipeline.v1.RunnerApi.Components.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(components_);
                components_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder subBuilder = null;
              if (transform_ != null) {
                subBuilder = transform_.toBuilder();
              }
              transform_ = input.readMessage(org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(transform_);
                transform_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                requirements_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              requirements_.add(s);
              break;
            }
            case 82: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          requirements_ = requirements_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse.class, org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse.Builder.class);
    }

    public static final int COMPONENTS_FIELD_NUMBER = 1;
    private org.apache.beam.model.pipeline.v1.RunnerApi.Components components_;
    /**
     * <pre>
     * Set of components needed to execute the expanded transform,
     * including the (original) inputs, outputs, and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     * @return Whether the components field is set.
     */
    @java.lang.Override
    public boolean hasComponents() {
      return components_ != null;
    }
    /**
     * <pre>
     * Set of components needed to execute the expanded transform,
     * including the (original) inputs, outputs, and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     * @return The components.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.RunnerApi.Components getComponents() {
      return components_ == null ? org.apache.beam.model.pipeline.v1.RunnerApi.Components.getDefaultInstance() : components_;
    }
    /**
     * <pre>
     * Set of components needed to execute the expanded transform,
     * including the (original) inputs, outputs, and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder getComponentsOrBuilder() {
      return getComponents();
    }

    public static final int TRANSFORM_FIELD_NUMBER = 2;
    private org.apache.beam.model.pipeline.v1.RunnerApi.PTransform transform_;
    /**
     * <pre>
     * The expanded transform itself, with references to its outputs
     * and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     * @return Whether the transform field is set.
     */
    @java.lang.Override
    public boolean hasTransform() {
      return transform_ != null;
    }
    /**
     * <pre>
     * The expanded transform itself, with references to its outputs
     * and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     * @return The transform.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransform() {
      return transform_ == null ? org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.getDefaultInstance() : transform_;
    }
    /**
     * <pre>
     * The expanded transform itself, with references to its outputs
     * and subtransforms.
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder getTransformOrBuilder() {
      return getTransform();
    }

    public static final int REQUIREMENTS_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList requirements_;
    /**
     * <pre>
     * A set of requirements that must be appended to this pipeline's
     * requirements.
     * </pre>
     *
     * <code>repeated string requirements = 3;</code>
     * @return A list containing the requirements.
     */
    public com.google.protobuf.ProtocolStringList
        getRequirementsList() {
      return requirements_;
    }
    /**
     * <pre>
     * A set of requirements that must be appended to this pipeline's
     * requirements.
     * </pre>
     *
     * <code>repeated string requirements = 3;</code>
     * @return The count of requirements.
     */
    public int getRequirementsCount() {
      return requirements_.size();
    }
    /**
     * <pre>
     * A set of requirements that must be appended to this pipeline's
     * requirements.
     * </pre>
     *
     * <code>repeated string requirements = 3;</code>
     * @param index The index of the element to return.
     * @return The requirements at the given index.
     */
    public java.lang.String getRequirements(int index) {
      return requirements_.get(index);
    }
    /**
     * <pre>
     * A set of requirements that must be appended to this pipeline's
     * requirements.
     * </pre>
     *
     * <code>repeated string requirements = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the requirements at the given index.
     */
    public com.google.protobuf.ByteString
        getRequirementsBytes(int index) {
      return requirements_.getByteString(index);
    }

    public static final int ERROR_FIELD_NUMBER = 10;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * (Optional) An string representation of any error encountered while
     * attempting to expand this transform.
     * </pre>
     *
     * <code>string error = 10;</code>
     * @return The error.
     */
    @java.lang.Override
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * (Optional) An string representation of any error encountered while
     * attempting to expand this transform.
     * </pre>
     *
     * <code>string error = 10;</code>
     * @return The bytes for error.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (components_ != null) {
        output.writeMessage(1, getComponents());
      }
      if (transform_ != null) {
        output.writeMessage(2, getTransform());
      }
      for (int i = 0; i < requirements_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, requirements_.getRaw(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, error_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (components_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getComponents());
      }
      if (transform_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTransform());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < requirements_.size(); i++) {
          dataSize += computeStringSizeNoTag(requirements_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getRequirementsList().size();
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, error_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse other = (org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse) obj;

      if (hasComponents() != other.hasComponents()) return false;
      if (hasComponents()) {
        if (!getComponents()
            .equals(other.getComponents())) return false;
      }
      if (hasTransform() != other.hasTransform()) return false;
      if (hasTransform()) {
        if (!getTransform()
            .equals(other.getTransform())) return false;
      }
      if (!getRequirementsList()
          .equals(other.getRequirementsList())) return false;
      if (!getError()
          .equals(other.getError())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasComponents()) {
        hash = (37 * hash) + COMPONENTS_FIELD_NUMBER;
        hash = (53 * hash) + getComponents().hashCode();
      }
      if (hasTransform()) {
        hash = (37 * hash) + TRANSFORM_FIELD_NUMBER;
        hash = (53 * hash) + getTransform().hashCode();
      }
      if (getRequirementsCount() > 0) {
        hash = (37 * hash) + REQUIREMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getRequirementsList().hashCode();
      }
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.expansion.v1.ExpansionResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.expansion.v1.ExpansionResponse)
        org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse.class, org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (componentsBuilder_ == null) {
          components_ = null;
        } else {
          components_ = null;
          componentsBuilder_ = null;
        }
        if (transformBuilder_ == null) {
          transform_ = null;
        } else {
          transform_ = null;
          transformBuilder_ = null;
        }
        requirements_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        error_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse getDefaultInstanceForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse build() {
        org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse buildPartial() {
        org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse result = new org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse(this);
        int from_bitField0_ = bitField0_;
        if (componentsBuilder_ == null) {
          result.components_ = components_;
        } else {
          result.components_ = componentsBuilder_.build();
        }
        if (transformBuilder_ == null) {
          result.transform_ = transform_;
        } else {
          result.transform_ = transformBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          requirements_ = requirements_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.requirements_ = requirements_;
        result.error_ = error_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse) {
          return mergeFrom((org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse other) {
        if (other == org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse.getDefaultInstance()) return this;
        if (other.hasComponents()) {
          mergeComponents(other.getComponents());
        }
        if (other.hasTransform()) {
          mergeTransform(other.getTransform());
        }
        if (!other.requirements_.isEmpty()) {
          if (requirements_.isEmpty()) {
            requirements_ = other.requirements_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRequirementsIsMutable();
            requirements_.addAll(other.requirements_);
          }
          onChanged();
        }
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.apache.beam.model.pipeline.v1.RunnerApi.Components components_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.RunnerApi.Components, org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder> componentsBuilder_;
      /**
       * <pre>
       * Set of components needed to execute the expanded transform,
       * including the (original) inputs, outputs, and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       * @return Whether the components field is set.
       */
      public boolean hasComponents() {
        return componentsBuilder_ != null || components_ != null;
      }
      /**
       * <pre>
       * Set of components needed to execute the expanded transform,
       * including the (original) inputs, outputs, and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       * @return The components.
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.Components getComponents() {
        if (componentsBuilder_ == null) {
          return components_ == null ? org.apache.beam.model.pipeline.v1.RunnerApi.Components.getDefaultInstance() : components_;
        } else {
          return componentsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Set of components needed to execute the expanded transform,
       * including the (original) inputs, outputs, and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public Builder setComponents(org.apache.beam.model.pipeline.v1.RunnerApi.Components value) {
        if (componentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          components_ = value;
          onChanged();
        } else {
          componentsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Set of components needed to execute the expanded transform,
       * including the (original) inputs, outputs, and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public Builder setComponents(
          org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder builderForValue) {
        if (componentsBuilder_ == null) {
          components_ = builderForValue.build();
          onChanged();
        } else {
          componentsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Set of components needed to execute the expanded transform,
       * including the (original) inputs, outputs, and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public Builder mergeComponents(org.apache.beam.model.pipeline.v1.RunnerApi.Components value) {
        if (componentsBuilder_ == null) {
          if (components_ != null) {
            components_ =
              org.apache.beam.model.pipeline.v1.RunnerApi.Components.newBuilder(components_).mergeFrom(value).buildPartial();
          } else {
            components_ = value;
          }
          onChanged();
        } else {
          componentsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Set of components needed to execute the expanded transform,
       * including the (original) inputs, outputs, and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public Builder clearComponents() {
        if (componentsBuilder_ == null) {
          components_ = null;
          onChanged();
        } else {
          components_ = null;
          componentsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Set of components needed to execute the expanded transform,
       * including the (original) inputs, outputs, and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder getComponentsBuilder() {
        
        onChanged();
        return getComponentsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Set of components needed to execute the expanded transform,
       * including the (original) inputs, outputs, and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder getComponentsOrBuilder() {
        if (componentsBuilder_ != null) {
          return componentsBuilder_.getMessageOrBuilder();
        } else {
          return components_ == null ?
              org.apache.beam.model.pipeline.v1.RunnerApi.Components.getDefaultInstance() : components_;
        }
      }
      /**
       * <pre>
       * Set of components needed to execute the expanded transform,
       * including the (original) inputs, outputs, and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Components components = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.RunnerApi.Components, org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder> 
          getComponentsFieldBuilder() {
        if (componentsBuilder_ == null) {
          componentsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.RunnerApi.Components, org.apache.beam.model.pipeline.v1.RunnerApi.Components.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.ComponentsOrBuilder>(
                  getComponents(),
                  getParentForChildren(),
                  isClean());
          components_ = null;
        }
        return componentsBuilder_;
      }

      private org.apache.beam.model.pipeline.v1.RunnerApi.PTransform transform_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.RunnerApi.PTransform, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder> transformBuilder_;
      /**
       * <pre>
       * The expanded transform itself, with references to its outputs
       * and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       * @return Whether the transform field is set.
       */
      public boolean hasTransform() {
        return transformBuilder_ != null || transform_ != null;
      }
      /**
       * <pre>
       * The expanded transform itself, with references to its outputs
       * and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       * @return The transform.
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform getTransform() {
        if (transformBuilder_ == null) {
          return transform_ == null ? org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.getDefaultInstance() : transform_;
        } else {
          return transformBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The expanded transform itself, with references to its outputs
       * and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public Builder setTransform(org.apache.beam.model.pipeline.v1.RunnerApi.PTransform value) {
        if (transformBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          transform_ = value;
          onChanged();
        } else {
          transformBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The expanded transform itself, with references to its outputs
       * and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public Builder setTransform(
          org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder builderForValue) {
        if (transformBuilder_ == null) {
          transform_ = builderForValue.build();
          onChanged();
        } else {
          transformBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The expanded transform itself, with references to its outputs
       * and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public Builder mergeTransform(org.apache.beam.model.pipeline.v1.RunnerApi.PTransform value) {
        if (transformBuilder_ == null) {
          if (transform_ != null) {
            transform_ =
              org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.newBuilder(transform_).mergeFrom(value).buildPartial();
          } else {
            transform_ = value;
          }
          onChanged();
        } else {
          transformBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The expanded transform itself, with references to its outputs
       * and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public Builder clearTransform() {
        if (transformBuilder_ == null) {
          transform_ = null;
          onChanged();
        } else {
          transform_ = null;
          transformBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The expanded transform itself, with references to its outputs
       * and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder getTransformBuilder() {
        
        onChanged();
        return getTransformFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The expanded transform itself, with references to its outputs
       * and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      public org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder getTransformOrBuilder() {
        if (transformBuilder_ != null) {
          return transformBuilder_.getMessageOrBuilder();
        } else {
          return transform_ == null ?
              org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.getDefaultInstance() : transform_;
        }
      }
      /**
       * <pre>
       * The expanded transform itself, with references to its outputs
       * and subtransforms.
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.PTransform transform = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.RunnerApi.PTransform, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder> 
          getTransformFieldBuilder() {
        if (transformBuilder_ == null) {
          transformBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.RunnerApi.PTransform, org.apache.beam.model.pipeline.v1.RunnerApi.PTransform.Builder, org.apache.beam.model.pipeline.v1.RunnerApi.PTransformOrBuilder>(
                  getTransform(),
                  getParentForChildren(),
                  isClean());
          transform_ = null;
        }
        return transformBuilder_;
      }

      private com.google.protobuf.LazyStringList requirements_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureRequirementsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          requirements_ = new com.google.protobuf.LazyStringArrayList(requirements_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * A set of requirements that must be appended to this pipeline's
       * requirements.
       * </pre>
       *
       * <code>repeated string requirements = 3;</code>
       * @return A list containing the requirements.
       */
      public com.google.protobuf.ProtocolStringList
          getRequirementsList() {
        return requirements_.getUnmodifiableView();
      }
      /**
       * <pre>
       * A set of requirements that must be appended to this pipeline's
       * requirements.
       * </pre>
       *
       * <code>repeated string requirements = 3;</code>
       * @return The count of requirements.
       */
      public int getRequirementsCount() {
        return requirements_.size();
      }
      /**
       * <pre>
       * A set of requirements that must be appended to this pipeline's
       * requirements.
       * </pre>
       *
       * <code>repeated string requirements = 3;</code>
       * @param index The index of the element to return.
       * @return The requirements at the given index.
       */
      public java.lang.String getRequirements(int index) {
        return requirements_.get(index);
      }
      /**
       * <pre>
       * A set of requirements that must be appended to this pipeline's
       * requirements.
       * </pre>
       *
       * <code>repeated string requirements = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the requirements at the given index.
       */
      public com.google.protobuf.ByteString
          getRequirementsBytes(int index) {
        return requirements_.getByteString(index);
      }
      /**
       * <pre>
       * A set of requirements that must be appended to this pipeline's
       * requirements.
       * </pre>
       *
       * <code>repeated string requirements = 3;</code>
       * @param index The index to set the value at.
       * @param value The requirements to set.
       * @return This builder for chaining.
       */
      public Builder setRequirements(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRequirementsIsMutable();
        requirements_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of requirements that must be appended to this pipeline's
       * requirements.
       * </pre>
       *
       * <code>repeated string requirements = 3;</code>
       * @param value The requirements to add.
       * @return This builder for chaining.
       */
      public Builder addRequirements(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRequirementsIsMutable();
        requirements_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of requirements that must be appended to this pipeline's
       * requirements.
       * </pre>
       *
       * <code>repeated string requirements = 3;</code>
       * @param values The requirements to add.
       * @return This builder for chaining.
       */
      public Builder addAllRequirements(
          java.lang.Iterable<java.lang.String> values) {
        ensureRequirementsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, requirements_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of requirements that must be appended to this pipeline's
       * requirements.
       * </pre>
       *
       * <code>repeated string requirements = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearRequirements() {
        requirements_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of requirements that must be appended to this pipeline's
       * requirements.
       * </pre>
       *
       * <code>repeated string requirements = 3;</code>
       * @param value The bytes of the requirements to add.
       * @return This builder for chaining.
       */
      public Builder addRequirementsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureRequirementsIsMutable();
        requirements_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * (Optional) An string representation of any error encountered while
       * attempting to expand this transform.
       * </pre>
       *
       * <code>string error = 10;</code>
       * @return The error.
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Optional) An string representation of any error encountered while
       * attempting to expand this transform.
       * </pre>
       *
       * <code>string error = 10;</code>
       * @return The bytes for error.
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Optional) An string representation of any error encountered while
       * attempting to expand this transform.
       * </pre>
       *
       * <code>string error = 10;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) An string representation of any error encountered while
       * attempting to expand this transform.
       * </pre>
       *
       * <code>string error = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) An string representation of any error encountered while
       * attempting to expand this transform.
       * </pre>
       *
       * <code>string error = 10;</code>
       * @param value The bytes for error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.expansion.v1.ExpansionResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.expansion.v1.ExpansionResponse)
    private static final org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse();
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExpansionResponse>
        PARSER = new com.google.protobuf.AbstractParser<ExpansionResponse>() {
      @java.lang.Override
      public ExpansionResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExpansionResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExpansionResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExpansionResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.expansion.v1.ExpansionApi.ExpansionResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DiscoverSchemaTransformRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformRequest)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.beam.model.expansion.v1.DiscoverSchemaTransformRequest}
   */
  public static final class DiscoverSchemaTransformRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformRequest)
      DiscoverSchemaTransformRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DiscoverSchemaTransformRequest.newBuilder() to construct.
    private DiscoverSchemaTransformRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DiscoverSchemaTransformRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DiscoverSchemaTransformRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DiscoverSchemaTransformRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest.class, org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest)) {
        return super.equals(obj);
      }
      org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest other = (org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.expansion.v1.DiscoverSchemaTransformRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformRequest)
        org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest.class, org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest.Builder.class);
      }

      // Construct using org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest getDefaultInstanceForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest build() {
        org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest buildPartial() {
        org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest result = new org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest) {
          return mergeFrom((org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest other) {
        if (other == org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformRequest)
    private static final org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest();
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DiscoverSchemaTransformRequest>
        PARSER = new com.google.protobuf.AbstractParser<DiscoverSchemaTransformRequest>() {
      @java.lang.Override
      public DiscoverSchemaTransformRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiscoverSchemaTransformRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DiscoverSchemaTransformRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DiscoverSchemaTransformRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SchemaTransformConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.expansion.v1.SchemaTransformConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Config schema of the SchemaTransform
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
     * @return Whether the configSchema field is set.
     */
    boolean hasConfigSchema();
    /**
     * <pre>
     * Config schema of the SchemaTransform
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
     * @return The configSchema.
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.Schema getConfigSchema();
    /**
     * <pre>
     * Config schema of the SchemaTransform
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
     */
    org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getConfigSchemaOrBuilder();

    /**
     * <pre>
     * Names of input PCollections
     * </pre>
     *
     * <code>repeated string input_pcollection_names = 2;</code>
     * @return A list containing the inputPcollectionNames.
     */
    java.util.List<java.lang.String>
        getInputPcollectionNamesList();
    /**
     * <pre>
     * Names of input PCollections
     * </pre>
     *
     * <code>repeated string input_pcollection_names = 2;</code>
     * @return The count of inputPcollectionNames.
     */
    int getInputPcollectionNamesCount();
    /**
     * <pre>
     * Names of input PCollections
     * </pre>
     *
     * <code>repeated string input_pcollection_names = 2;</code>
     * @param index The index of the element to return.
     * @return The inputPcollectionNames at the given index.
     */
    java.lang.String getInputPcollectionNames(int index);
    /**
     * <pre>
     * Names of input PCollections
     * </pre>
     *
     * <code>repeated string input_pcollection_names = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the inputPcollectionNames at the given index.
     */
    com.google.protobuf.ByteString
        getInputPcollectionNamesBytes(int index);

    /**
     * <pre>
     * Names of output PCollections
     * </pre>
     *
     * <code>repeated string output_pcollection_names = 3;</code>
     * @return A list containing the outputPcollectionNames.
     */
    java.util.List<java.lang.String>
        getOutputPcollectionNamesList();
    /**
     * <pre>
     * Names of output PCollections
     * </pre>
     *
     * <code>repeated string output_pcollection_names = 3;</code>
     * @return The count of outputPcollectionNames.
     */
    int getOutputPcollectionNamesCount();
    /**
     * <pre>
     * Names of output PCollections
     * </pre>
     *
     * <code>repeated string output_pcollection_names = 3;</code>
     * @param index The index of the element to return.
     * @return The outputPcollectionNames at the given index.
     */
    java.lang.String getOutputPcollectionNames(int index);
    /**
     * <pre>
     * Names of output PCollections
     * </pre>
     *
     * <code>repeated string output_pcollection_names = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the outputPcollectionNames at the given index.
     */
    com.google.protobuf.ByteString
        getOutputPcollectionNamesBytes(int index);
  }
  /**
   * Protobuf type {@code org.apache.beam.model.expansion.v1.SchemaTransformConfig}
   */
  public static final class SchemaTransformConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.expansion.v1.SchemaTransformConfig)
      SchemaTransformConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SchemaTransformConfig.newBuilder() to construct.
    private SchemaTransformConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SchemaTransformConfig() {
      inputPcollectionNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      outputPcollectionNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SchemaTransformConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SchemaTransformConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder subBuilder = null;
              if (configSchema_ != null) {
                subBuilder = configSchema_.toBuilder();
              }
              configSchema_ = input.readMessage(org.apache.beam.model.pipeline.v1.SchemaApi.Schema.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(configSchema_);
                configSchema_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                inputPcollectionNames_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              inputPcollectionNames_.add(s);
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                outputPcollectionNames_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              outputPcollectionNames_.add(s);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          inputPcollectionNames_ = inputPcollectionNames_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          outputPcollectionNames_ = outputPcollectionNames_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig.class, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig.Builder.class);
    }

    public static final int CONFIG_SCHEMA_FIELD_NUMBER = 1;
    private org.apache.beam.model.pipeline.v1.SchemaApi.Schema configSchema_;
    /**
     * <pre>
     * Config schema of the SchemaTransform
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
     * @return Whether the configSchema field is set.
     */
    @java.lang.Override
    public boolean hasConfigSchema() {
      return configSchema_ != null;
    }
    /**
     * <pre>
     * Config schema of the SchemaTransform
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
     * @return The configSchema.
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getConfigSchema() {
      return configSchema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : configSchema_;
    }
    /**
     * <pre>
     * Config schema of the SchemaTransform
     * </pre>
     *
     * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
     */
    @java.lang.Override
    public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getConfigSchemaOrBuilder() {
      return getConfigSchema();
    }

    public static final int INPUT_PCOLLECTION_NAMES_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList inputPcollectionNames_;
    /**
     * <pre>
     * Names of input PCollections
     * </pre>
     *
     * <code>repeated string input_pcollection_names = 2;</code>
     * @return A list containing the inputPcollectionNames.
     */
    public com.google.protobuf.ProtocolStringList
        getInputPcollectionNamesList() {
      return inputPcollectionNames_;
    }
    /**
     * <pre>
     * Names of input PCollections
     * </pre>
     *
     * <code>repeated string input_pcollection_names = 2;</code>
     * @return The count of inputPcollectionNames.
     */
    public int getInputPcollectionNamesCount() {
      return inputPcollectionNames_.size();
    }
    /**
     * <pre>
     * Names of input PCollections
     * </pre>
     *
     * <code>repeated string input_pcollection_names = 2;</code>
     * @param index The index of the element to return.
     * @return The inputPcollectionNames at the given index.
     */
    public java.lang.String getInputPcollectionNames(int index) {
      return inputPcollectionNames_.get(index);
    }
    /**
     * <pre>
     * Names of input PCollections
     * </pre>
     *
     * <code>repeated string input_pcollection_names = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the inputPcollectionNames at the given index.
     */
    public com.google.protobuf.ByteString
        getInputPcollectionNamesBytes(int index) {
      return inputPcollectionNames_.getByteString(index);
    }

    public static final int OUTPUT_PCOLLECTION_NAMES_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList outputPcollectionNames_;
    /**
     * <pre>
     * Names of output PCollections
     * </pre>
     *
     * <code>repeated string output_pcollection_names = 3;</code>
     * @return A list containing the outputPcollectionNames.
     */
    public com.google.protobuf.ProtocolStringList
        getOutputPcollectionNamesList() {
      return outputPcollectionNames_;
    }
    /**
     * <pre>
     * Names of output PCollections
     * </pre>
     *
     * <code>repeated string output_pcollection_names = 3;</code>
     * @return The count of outputPcollectionNames.
     */
    public int getOutputPcollectionNamesCount() {
      return outputPcollectionNames_.size();
    }
    /**
     * <pre>
     * Names of output PCollections
     * </pre>
     *
     * <code>repeated string output_pcollection_names = 3;</code>
     * @param index The index of the element to return.
     * @return The outputPcollectionNames at the given index.
     */
    public java.lang.String getOutputPcollectionNames(int index) {
      return outputPcollectionNames_.get(index);
    }
    /**
     * <pre>
     * Names of output PCollections
     * </pre>
     *
     * <code>repeated string output_pcollection_names = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the outputPcollectionNames at the given index.
     */
    public com.google.protobuf.ByteString
        getOutputPcollectionNamesBytes(int index) {
      return outputPcollectionNames_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (configSchema_ != null) {
        output.writeMessage(1, getConfigSchema());
      }
      for (int i = 0; i < inputPcollectionNames_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, inputPcollectionNames_.getRaw(i));
      }
      for (int i = 0; i < outputPcollectionNames_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, outputPcollectionNames_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (configSchema_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getConfigSchema());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < inputPcollectionNames_.size(); i++) {
          dataSize += computeStringSizeNoTag(inputPcollectionNames_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getInputPcollectionNamesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outputPcollectionNames_.size(); i++) {
          dataSize += computeStringSizeNoTag(outputPcollectionNames_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getOutputPcollectionNamesList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig)) {
        return super.equals(obj);
      }
      org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig other = (org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig) obj;

      if (hasConfigSchema() != other.hasConfigSchema()) return false;
      if (hasConfigSchema()) {
        if (!getConfigSchema()
            .equals(other.getConfigSchema())) return false;
      }
      if (!getInputPcollectionNamesList()
          .equals(other.getInputPcollectionNamesList())) return false;
      if (!getOutputPcollectionNamesList()
          .equals(other.getOutputPcollectionNamesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasConfigSchema()) {
        hash = (37 * hash) + CONFIG_SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getConfigSchema().hashCode();
      }
      if (getInputPcollectionNamesCount() > 0) {
        hash = (37 * hash) + INPUT_PCOLLECTION_NAMES_FIELD_NUMBER;
        hash = (53 * hash) + getInputPcollectionNamesList().hashCode();
      }
      if (getOutputPcollectionNamesCount() > 0) {
        hash = (37 * hash) + OUTPUT_PCOLLECTION_NAMES_FIELD_NUMBER;
        hash = (53 * hash) + getOutputPcollectionNamesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.expansion.v1.SchemaTransformConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.expansion.v1.SchemaTransformConfig)
        org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig.class, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig.Builder.class);
      }

      // Construct using org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (configSchemaBuilder_ == null) {
          configSchema_ = null;
        } else {
          configSchema_ = null;
          configSchemaBuilder_ = null;
        }
        inputPcollectionNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        outputPcollectionNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig getDefaultInstanceForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig build() {
        org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig buildPartial() {
        org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig result = new org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig(this);
        int from_bitField0_ = bitField0_;
        if (configSchemaBuilder_ == null) {
          result.configSchema_ = configSchema_;
        } else {
          result.configSchema_ = configSchemaBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          inputPcollectionNames_ = inputPcollectionNames_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.inputPcollectionNames_ = inputPcollectionNames_;
        if (((bitField0_ & 0x00000002) != 0)) {
          outputPcollectionNames_ = outputPcollectionNames_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.outputPcollectionNames_ = outputPcollectionNames_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig) {
          return mergeFrom((org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig other) {
        if (other == org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig.getDefaultInstance()) return this;
        if (other.hasConfigSchema()) {
          mergeConfigSchema(other.getConfigSchema());
        }
        if (!other.inputPcollectionNames_.isEmpty()) {
          if (inputPcollectionNames_.isEmpty()) {
            inputPcollectionNames_ = other.inputPcollectionNames_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureInputPcollectionNamesIsMutable();
            inputPcollectionNames_.addAll(other.inputPcollectionNames_);
          }
          onChanged();
        }
        if (!other.outputPcollectionNames_.isEmpty()) {
          if (outputPcollectionNames_.isEmpty()) {
            outputPcollectionNames_ = other.outputPcollectionNames_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureOutputPcollectionNamesIsMutable();
            outputPcollectionNames_.addAll(other.outputPcollectionNames_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.apache.beam.model.pipeline.v1.SchemaApi.Schema configSchema_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> configSchemaBuilder_;
      /**
       * <pre>
       * Config schema of the SchemaTransform
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
       * @return Whether the configSchema field is set.
       */
      public boolean hasConfigSchema() {
        return configSchemaBuilder_ != null || configSchema_ != null;
      }
      /**
       * <pre>
       * Config schema of the SchemaTransform
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
       * @return The configSchema.
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema getConfigSchema() {
        if (configSchemaBuilder_ == null) {
          return configSchema_ == null ? org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : configSchema_;
        } else {
          return configSchemaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Config schema of the SchemaTransform
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
       */
      public Builder setConfigSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (configSchemaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          configSchema_ = value;
          onChanged();
        } else {
          configSchemaBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config schema of the SchemaTransform
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
       */
      public Builder setConfigSchema(
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder builderForValue) {
        if (configSchemaBuilder_ == null) {
          configSchema_ = builderForValue.build();
          onChanged();
        } else {
          configSchemaBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Config schema of the SchemaTransform
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
       */
      public Builder mergeConfigSchema(org.apache.beam.model.pipeline.v1.SchemaApi.Schema value) {
        if (configSchemaBuilder_ == null) {
          if (configSchema_ != null) {
            configSchema_ =
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.newBuilder(configSchema_).mergeFrom(value).buildPartial();
          } else {
            configSchema_ = value;
          }
          onChanged();
        } else {
          configSchemaBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config schema of the SchemaTransform
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
       */
      public Builder clearConfigSchema() {
        if (configSchemaBuilder_ == null) {
          configSchema_ = null;
          onChanged();
        } else {
          configSchema_ = null;
          configSchemaBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Config schema of the SchemaTransform
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder getConfigSchemaBuilder() {
        
        onChanged();
        return getConfigSchemaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Config schema of the SchemaTransform
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
       */
      public org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder getConfigSchemaOrBuilder() {
        if (configSchemaBuilder_ != null) {
          return configSchemaBuilder_.getMessageOrBuilder();
        } else {
          return configSchema_ == null ?
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema.getDefaultInstance() : configSchema_;
        }
      }
      /**
       * <pre>
       * Config schema of the SchemaTransform
       * </pre>
       *
       * <code>.org.apache.beam.model.pipeline.v1.Schema config_schema = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder> 
          getConfigSchemaFieldBuilder() {
        if (configSchemaBuilder_ == null) {
          configSchemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.beam.model.pipeline.v1.SchemaApi.Schema, org.apache.beam.model.pipeline.v1.SchemaApi.Schema.Builder, org.apache.beam.model.pipeline.v1.SchemaApi.SchemaOrBuilder>(
                  getConfigSchema(),
                  getParentForChildren(),
                  isClean());
          configSchema_ = null;
        }
        return configSchemaBuilder_;
      }

      private com.google.protobuf.LazyStringList inputPcollectionNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInputPcollectionNamesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          inputPcollectionNames_ = new com.google.protobuf.LazyStringArrayList(inputPcollectionNames_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Names of input PCollections
       * </pre>
       *
       * <code>repeated string input_pcollection_names = 2;</code>
       * @return A list containing the inputPcollectionNames.
       */
      public com.google.protobuf.ProtocolStringList
          getInputPcollectionNamesList() {
        return inputPcollectionNames_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Names of input PCollections
       * </pre>
       *
       * <code>repeated string input_pcollection_names = 2;</code>
       * @return The count of inputPcollectionNames.
       */
      public int getInputPcollectionNamesCount() {
        return inputPcollectionNames_.size();
      }
      /**
       * <pre>
       * Names of input PCollections
       * </pre>
       *
       * <code>repeated string input_pcollection_names = 2;</code>
       * @param index The index of the element to return.
       * @return The inputPcollectionNames at the given index.
       */
      public java.lang.String getInputPcollectionNames(int index) {
        return inputPcollectionNames_.get(index);
      }
      /**
       * <pre>
       * Names of input PCollections
       * </pre>
       *
       * <code>repeated string input_pcollection_names = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the inputPcollectionNames at the given index.
       */
      public com.google.protobuf.ByteString
          getInputPcollectionNamesBytes(int index) {
        return inputPcollectionNames_.getByteString(index);
      }
      /**
       * <pre>
       * Names of input PCollections
       * </pre>
       *
       * <code>repeated string input_pcollection_names = 2;</code>
       * @param index The index to set the value at.
       * @param value The inputPcollectionNames to set.
       * @return This builder for chaining.
       */
      public Builder setInputPcollectionNames(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputPcollectionNamesIsMutable();
        inputPcollectionNames_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of input PCollections
       * </pre>
       *
       * <code>repeated string input_pcollection_names = 2;</code>
       * @param value The inputPcollectionNames to add.
       * @return This builder for chaining.
       */
      public Builder addInputPcollectionNames(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputPcollectionNamesIsMutable();
        inputPcollectionNames_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of input PCollections
       * </pre>
       *
       * <code>repeated string input_pcollection_names = 2;</code>
       * @param values The inputPcollectionNames to add.
       * @return This builder for chaining.
       */
      public Builder addAllInputPcollectionNames(
          java.lang.Iterable<java.lang.String> values) {
        ensureInputPcollectionNamesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, inputPcollectionNames_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of input PCollections
       * </pre>
       *
       * <code>repeated string input_pcollection_names = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearInputPcollectionNames() {
        inputPcollectionNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of input PCollections
       * </pre>
       *
       * <code>repeated string input_pcollection_names = 2;</code>
       * @param value The bytes of the inputPcollectionNames to add.
       * @return This builder for chaining.
       */
      public Builder addInputPcollectionNamesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureInputPcollectionNamesIsMutable();
        inputPcollectionNames_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList outputPcollectionNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureOutputPcollectionNamesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          outputPcollectionNames_ = new com.google.protobuf.LazyStringArrayList(outputPcollectionNames_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Names of output PCollections
       * </pre>
       *
       * <code>repeated string output_pcollection_names = 3;</code>
       * @return A list containing the outputPcollectionNames.
       */
      public com.google.protobuf.ProtocolStringList
          getOutputPcollectionNamesList() {
        return outputPcollectionNames_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Names of output PCollections
       * </pre>
       *
       * <code>repeated string output_pcollection_names = 3;</code>
       * @return The count of outputPcollectionNames.
       */
      public int getOutputPcollectionNamesCount() {
        return outputPcollectionNames_.size();
      }
      /**
       * <pre>
       * Names of output PCollections
       * </pre>
       *
       * <code>repeated string output_pcollection_names = 3;</code>
       * @param index The index of the element to return.
       * @return The outputPcollectionNames at the given index.
       */
      public java.lang.String getOutputPcollectionNames(int index) {
        return outputPcollectionNames_.get(index);
      }
      /**
       * <pre>
       * Names of output PCollections
       * </pre>
       *
       * <code>repeated string output_pcollection_names = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the outputPcollectionNames at the given index.
       */
      public com.google.protobuf.ByteString
          getOutputPcollectionNamesBytes(int index) {
        return outputPcollectionNames_.getByteString(index);
      }
      /**
       * <pre>
       * Names of output PCollections
       * </pre>
       *
       * <code>repeated string output_pcollection_names = 3;</code>
       * @param index The index to set the value at.
       * @param value The outputPcollectionNames to set.
       * @return This builder for chaining.
       */
      public Builder setOutputPcollectionNames(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputPcollectionNamesIsMutable();
        outputPcollectionNames_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of output PCollections
       * </pre>
       *
       * <code>repeated string output_pcollection_names = 3;</code>
       * @param value The outputPcollectionNames to add.
       * @return This builder for chaining.
       */
      public Builder addOutputPcollectionNames(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputPcollectionNamesIsMutable();
        outputPcollectionNames_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of output PCollections
       * </pre>
       *
       * <code>repeated string output_pcollection_names = 3;</code>
       * @param values The outputPcollectionNames to add.
       * @return This builder for chaining.
       */
      public Builder addAllOutputPcollectionNames(
          java.lang.Iterable<java.lang.String> values) {
        ensureOutputPcollectionNamesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, outputPcollectionNames_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of output PCollections
       * </pre>
       *
       * <code>repeated string output_pcollection_names = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputPcollectionNames() {
        outputPcollectionNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of output PCollections
       * </pre>
       *
       * <code>repeated string output_pcollection_names = 3;</code>
       * @param value The bytes of the outputPcollectionNames to add.
       * @return This builder for chaining.
       */
      public Builder addOutputPcollectionNamesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureOutputPcollectionNamesIsMutable();
        outputPcollectionNames_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.expansion.v1.SchemaTransformConfig)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.expansion.v1.SchemaTransformConfig)
    private static final org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig();
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SchemaTransformConfig>
        PARSER = new com.google.protobuf.AbstractParser<SchemaTransformConfig>() {
      @java.lang.Override
      public SchemaTransformConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SchemaTransformConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SchemaTransformConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SchemaTransformConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DiscoverSchemaTransformResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A mapping from SchemaTransform ID to schema transform config of discovered
     * SchemaTransforms
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
     */
    int getSchemaTransformConfigsCount();
    /**
     * <pre>
     * A mapping from SchemaTransform ID to schema transform config of discovered
     * SchemaTransforms
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
     */
    boolean containsSchemaTransformConfigs(
        java.lang.String key);
    /**
     * Use {@link #getSchemaTransformConfigsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig>
    getSchemaTransformConfigs();
    /**
     * <pre>
     * A mapping from SchemaTransform ID to schema transform config of discovered
     * SchemaTransforms
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
     */
    java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig>
    getSchemaTransformConfigsMap();
    /**
     * <pre>
     * A mapping from SchemaTransform ID to schema transform config of discovered
     * SchemaTransforms
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
     */

    /* nullable */
org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig getSchemaTransformConfigsOrDefault(
        java.lang.String key,
        /* nullable */
org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig defaultValue);
    /**
     * <pre>
     * A mapping from SchemaTransform ID to schema transform config of discovered
     * SchemaTransforms
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
     */

    org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig getSchemaTransformConfigsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * If list of identifies are empty, this may contain an error.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The error.
     */
    java.lang.String getError();
    /**
     * <pre>
     * If list of identifies are empty, this may contain an error.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The bytes for error.
     */
    com.google.protobuf.ByteString
        getErrorBytes();
  }
  /**
   * Protobuf type {@code org.apache.beam.model.expansion.v1.DiscoverSchemaTransformResponse}
   */
  public static final class DiscoverSchemaTransformResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformResponse)
      DiscoverSchemaTransformResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DiscoverSchemaTransformResponse.newBuilder() to construct.
    private DiscoverSchemaTransformResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DiscoverSchemaTransformResponse() {
      error_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DiscoverSchemaTransformResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DiscoverSchemaTransformResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                schemaTransformConfigs_ = com.google.protobuf.MapField.newMapField(
                    SchemaTransformConfigsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig>
              schemaTransformConfigs__ = input.readMessage(
                  SchemaTransformConfigsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              schemaTransformConfigs_.getMutableMap().put(
                  schemaTransformConfigs__.getKey(), schemaTransformConfigs__.getValue());
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetSchemaTransformConfigs();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse.class, org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse.Builder.class);
    }

    public static final int SCHEMA_TRANSFORM_CONFIGS_FIELD_NUMBER = 1;
    private static final class SchemaTransformConfigsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig>newDefaultInstance(
                  org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_SchemaTransformConfigsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> schemaTransformConfigs_;
    private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig>
    internalGetSchemaTransformConfigs() {
      if (schemaTransformConfigs_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            SchemaTransformConfigsDefaultEntryHolder.defaultEntry);
      }
      return schemaTransformConfigs_;
    }

    public int getSchemaTransformConfigsCount() {
      return internalGetSchemaTransformConfigs().getMap().size();
    }
    /**
     * <pre>
     * A mapping from SchemaTransform ID to schema transform config of discovered
     * SchemaTransforms
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
     */

    @java.lang.Override
    public boolean containsSchemaTransformConfigs(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetSchemaTransformConfigs().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSchemaTransformConfigsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> getSchemaTransformConfigs() {
      return getSchemaTransformConfigsMap();
    }
    /**
     * <pre>
     * A mapping from SchemaTransform ID to schema transform config of discovered
     * SchemaTransforms
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> getSchemaTransformConfigsMap() {
      return internalGetSchemaTransformConfigs().getMap();
    }
    /**
     * <pre>
     * A mapping from SchemaTransform ID to schema transform config of discovered
     * SchemaTransforms
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig getSchemaTransformConfigsOrDefault(
        java.lang.String key,
        org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> map =
          internalGetSchemaTransformConfigs().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A mapping from SchemaTransform ID to schema transform config of discovered
     * SchemaTransforms
     * </pre>
     *
     * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
     */
    @java.lang.Override

    public org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig getSchemaTransformConfigsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> map =
          internalGetSchemaTransformConfigs().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * If list of identifies are empty, this may contain an error.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The error.
     */
    @java.lang.Override
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * If list of identifies are empty, this may contain an error.
     * </pre>
     *
     * <code>string error = 2;</code>
     * @return The bytes for error.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetSchemaTransformConfigs(),
          SchemaTransformConfigsDefaultEntryHolder.defaultEntry,
          1);
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, error_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> entry
           : internalGetSchemaTransformConfigs().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig>
        schemaTransformConfigs__ = SchemaTransformConfigsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, schemaTransformConfigs__);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(error_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, error_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse)) {
        return super.equals(obj);
      }
      org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse other = (org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse) obj;

      if (!internalGetSchemaTransformConfigs().equals(
          other.internalGetSchemaTransformConfigs())) return false;
      if (!getError()
          .equals(other.getError())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetSchemaTransformConfigs().getMap().isEmpty()) {
        hash = (37 * hash) + SCHEMA_TRANSFORM_CONFIGS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetSchemaTransformConfigs().hashCode();
      }
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.beam.model.expansion.v1.DiscoverSchemaTransformResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformResponse)
        org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetSchemaTransformConfigs();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableSchemaTransformConfigs();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse.class, org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse.Builder.class);
      }

      // Construct using org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableSchemaTransformConfigs().clear();
        error_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse getDefaultInstanceForType() {
        return org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse build() {
        org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse buildPartial() {
        org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse result = new org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse(this);
        int from_bitField0_ = bitField0_;
        result.schemaTransformConfigs_ = internalGetSchemaTransformConfigs();
        result.schemaTransformConfigs_.makeImmutable();
        result.error_ = error_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse) {
          return mergeFrom((org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse other) {
        if (other == org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse.getDefaultInstance()) return this;
        internalGetMutableSchemaTransformConfigs().mergeFrom(
            other.internalGetSchemaTransformConfigs());
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> schemaTransformConfigs_;
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig>
      internalGetSchemaTransformConfigs() {
        if (schemaTransformConfigs_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              SchemaTransformConfigsDefaultEntryHolder.defaultEntry);
        }
        return schemaTransformConfigs_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig>
      internalGetMutableSchemaTransformConfigs() {
        onChanged();;
        if (schemaTransformConfigs_ == null) {
          schemaTransformConfigs_ = com.google.protobuf.MapField.newMapField(
              SchemaTransformConfigsDefaultEntryHolder.defaultEntry);
        }
        if (!schemaTransformConfigs_.isMutable()) {
          schemaTransformConfigs_ = schemaTransformConfigs_.copy();
        }
        return schemaTransformConfigs_;
      }

      public int getSchemaTransformConfigsCount() {
        return internalGetSchemaTransformConfigs().getMap().size();
      }
      /**
       * <pre>
       * A mapping from SchemaTransform ID to schema transform config of discovered
       * SchemaTransforms
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
       */

      @java.lang.Override
      public boolean containsSchemaTransformConfigs(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetSchemaTransformConfigs().getMap().containsKey(key);
      }
      /**
       * Use {@link #getSchemaTransformConfigsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> getSchemaTransformConfigs() {
        return getSchemaTransformConfigsMap();
      }
      /**
       * <pre>
       * A mapping from SchemaTransform ID to schema transform config of discovered
       * SchemaTransforms
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> getSchemaTransformConfigsMap() {
        return internalGetSchemaTransformConfigs().getMap();
      }
      /**
       * <pre>
       * A mapping from SchemaTransform ID to schema transform config of discovered
       * SchemaTransforms
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig getSchemaTransformConfigsOrDefault(
          java.lang.String key,
          org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> map =
            internalGetSchemaTransformConfigs().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A mapping from SchemaTransform ID to schema transform config of discovered
       * SchemaTransforms
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
       */
      @java.lang.Override

      public org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig getSchemaTransformConfigsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> map =
            internalGetSchemaTransformConfigs().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearSchemaTransformConfigs() {
        internalGetMutableSchemaTransformConfigs().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A mapping from SchemaTransform ID to schema transform config of discovered
       * SchemaTransforms
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
       */

      public Builder removeSchemaTransformConfigs(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableSchemaTransformConfigs().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig>
      getMutableSchemaTransformConfigs() {
        return internalGetMutableSchemaTransformConfigs().getMutableMap();
      }
      /**
       * <pre>
       * A mapping from SchemaTransform ID to schema transform config of discovered
       * SchemaTransforms
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
       */
      public Builder putSchemaTransformConfigs(
          java.lang.String key,
          org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableSchemaTransformConfigs().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A mapping from SchemaTransform ID to schema transform config of discovered
       * SchemaTransforms
       * </pre>
       *
       * <code>map&lt;string, .org.apache.beam.model.expansion.v1.SchemaTransformConfig&gt; schema_transform_configs = 1;</code>
       */

      public Builder putAllSchemaTransformConfigs(
          java.util.Map<java.lang.String, org.apache.beam.model.expansion.v1.ExpansionApi.SchemaTransformConfig> values) {
        internalGetMutableSchemaTransformConfigs().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * If list of identifies are empty, this may contain an error.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return The error.
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If list of identifies are empty, this may contain an error.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return The bytes for error.
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If list of identifies are empty, this may contain an error.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If list of identifies are empty, this may contain an error.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If list of identifies are empty, this may contain an error.
       * </pre>
       *
       * <code>string error = 2;</code>
       * @param value The bytes for error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.beam.model.expansion.v1.DiscoverSchemaTransformResponse)
    private static final org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse();
    }

    public static org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DiscoverSchemaTransformResponse>
        PARSER = new com.google.protobuf.AbstractParser<DiscoverSchemaTransformResponse>() {
      @java.lang.Override
      public DiscoverSchemaTransformResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiscoverSchemaTransformResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DiscoverSchemaTransformResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DiscoverSchemaTransformResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.beam.model.expansion.v1.ExpansionApi.DiscoverSchemaTransformResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_OutputCoderRequestsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_OutputCoderRequestsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_SchemaTransformConfigsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_SchemaTransformConfigsEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n@org/apache/beam/model/job_management/v" +
      "1/beam_expansion_api.proto\022\"org.apache.b" +
      "eam.model.expansion.v1\0327org/apache/beam/" +
      "model/pipeline/v1/beam_runner_api.proto\032" +
      ".org/apache/beam/model/pipeline/v1/schem" +
      "a.proto\"\324\002\n\020ExpansionRequest\022A\n\ncomponen" +
      "ts\030\001 \001(\0132-.org.apache.beam.model.pipelin" +
      "e.v1.Components\022@\n\ttransform\030\002 \001(\0132-.org" +
      ".apache.beam.model.pipeline.v1.PTransfor" +
      "m\022\021\n\tnamespace\030\003 \001(\t\022l\n\025output_coder_req" +
      "uests\030\004 \003(\0132M.org.apache.beam.model.expa" +
      "nsion.v1.ExpansionRequest.OutputCoderReq" +
      "uestsEntry\032:\n\030OutputCoderRequestsEntry\022\013" +
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\275\001\n\021Expan" +
      "sionResponse\022A\n\ncomponents\030\001 \001(\0132-.org.a" +
      "pache.beam.model.pipeline.v1.Components\022" +
      "@\n\ttransform\030\002 \001(\0132-.org.apache.beam.mod" +
      "el.pipeline.v1.PTransform\022\024\n\014requirement" +
      "s\030\003 \003(\t\022\r\n\005error\030\n \001(\t\" \n\036DiscoverSchema" +
      "TransformRequest\"\234\001\n\025SchemaTransformConf" +
      "ig\022@\n\rconfig_schema\030\001 \001(\0132).org.apache.b" +
      "eam.model.pipeline.v1.Schema\022\037\n\027input_pc" +
      "ollection_names\030\002 \003(\t\022 \n\030output_pcollect" +
      "ion_names\030\003 \003(\t\"\256\002\n\037DiscoverSchemaTransf" +
      "ormResponse\022\201\001\n\030schema_transform_configs" +
      "\030\001 \003(\0132_.org.apache.beam.model.expansion" +
      ".v1.DiscoverSchemaTransformResponse.Sche" +
      "maTransformConfigsEntry\022\r\n\005error\030\002 \001(\t\032x" +
      "\n\033SchemaTransformConfigsEntry\022\013\n\003key\030\001 \001" +
      "(\t\022H\n\005value\030\002 \001(\01329.org.apache.beam.mode" +
      "l.expansion.v1.SchemaTransformConfig:\0028\001" +
      "2\256\002\n\020ExpansionService\022u\n\006Expand\0224.org.ap" +
      "ache.beam.model.expansion.v1.ExpansionRe" +
      "quest\0325.org.apache.beam.model.expansion." +
      "v1.ExpansionResponse\022\242\001\n\027DiscoverSchemaT" +
      "ransform\022B.org.apache.beam.model.expansi" +
      "on.v1.DiscoverSchemaTransformRequest\032C.o" +
      "rg.apache.beam.model.expansion.v1.Discov" +
      "erSchemaTransformResponseB\206\001\n\"org.apache" +
      ".beam.model.expansion.v1B\014ExpansionApiZR" +
      "github.com/apache/beam/sdks/v2/go/pkg/be" +
      "am/model/jobmanagement_v1;jobmanagement_" +
      "v1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.apache.beam.model.pipeline.v1.RunnerApi.getDescriptor(),
          org.apache.beam.model.pipeline.v1.SchemaApi.getDescriptor(),
        });
    internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_descriptor,
        new java.lang.String[] { "Components", "Transform", "Namespace", "OutputCoderRequests", });
    internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_OutputCoderRequestsEntry_descriptor =
      internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_OutputCoderRequestsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_expansion_v1_ExpansionRequest_OutputCoderRequestsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_expansion_v1_ExpansionResponse_descriptor,
        new java.lang.String[] { "Components", "Transform", "Requirements", "Error", });
    internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformRequest_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_expansion_v1_SchemaTransformConfig_descriptor,
        new java.lang.String[] { "ConfigSchema", "InputPcollectionNames", "OutputPcollectionNames", });
    internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_descriptor,
        new java.lang.String[] { "SchemaTransformConfigs", "Error", });
    internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_SchemaTransformConfigsEntry_descriptor =
      internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_SchemaTransformConfigsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_beam_model_expansion_v1_DiscoverSchemaTransformResponse_SchemaTransformConfigsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    org.apache.beam.model.pipeline.v1.RunnerApi.getDescriptor();
    org.apache.beam.model.pipeline.v1.SchemaApi.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
